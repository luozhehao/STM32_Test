
led_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f98  08080188  08080188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08083120  08083120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080831b4  080831b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080831b4  080831b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080831bc  080831bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080831bc  080831bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080831c0  080831c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080831c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000080  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009aa0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c60  00000000  00000000  00029b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0002b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006f8  00000000  00000000  0002bf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213a6  00000000  00000000  0002c648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090aa  00000000  00000000  0004d9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3acc  00000000  00000000  00056a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011a564  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023f4  00000000  00000000  0011a5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08080188 <__do_global_dtors_aux>:
 8080188:	b510      	push	{r4, lr}
 808018a:	4c05      	ldr	r4, [pc, #20]	; (80801a0 <__do_global_dtors_aux+0x18>)
 808018c:	7823      	ldrb	r3, [r4, #0]
 808018e:	b933      	cbnz	r3, 808019e <__do_global_dtors_aux+0x16>
 8080190:	4b04      	ldr	r3, [pc, #16]	; (80801a4 <__do_global_dtors_aux+0x1c>)
 8080192:	b113      	cbz	r3, 808019a <__do_global_dtors_aux+0x12>
 8080194:	4804      	ldr	r0, [pc, #16]	; (80801a8 <__do_global_dtors_aux+0x20>)
 8080196:	f3af 8000 	nop.w
 808019a:	2301      	movs	r3, #1
 808019c:	7023      	strb	r3, [r4, #0]
 808019e:	bd10      	pop	{r4, pc}
 80801a0:	20000070 	.word	0x20000070
 80801a4:	00000000 	.word	0x00000000
 80801a8:	08083108 	.word	0x08083108

080801ac <frame_dummy>:
 80801ac:	b508      	push	{r3, lr}
 80801ae:	4b03      	ldr	r3, [pc, #12]	; (80801bc <frame_dummy+0x10>)
 80801b0:	b11b      	cbz	r3, 80801ba <frame_dummy+0xe>
 80801b2:	4903      	ldr	r1, [pc, #12]	; (80801c0 <frame_dummy+0x14>)
 80801b4:	4803      	ldr	r0, [pc, #12]	; (80801c4 <frame_dummy+0x18>)
 80801b6:	f3af 8000 	nop.w
 80801ba:	bd08      	pop	{r3, pc}
 80801bc:	00000000 	.word	0x00000000
 80801c0:	20000074 	.word	0x20000074
 80801c4:	08083108 	.word	0x08083108

080801c8 <__aeabi_uldivmod>:
 80801c8:	b953      	cbnz	r3, 80801e0 <__aeabi_uldivmod+0x18>
 80801ca:	b94a      	cbnz	r2, 80801e0 <__aeabi_uldivmod+0x18>
 80801cc:	2900      	cmp	r1, #0
 80801ce:	bf08      	it	eq
 80801d0:	2800      	cmpeq	r0, #0
 80801d2:	bf1c      	itt	ne
 80801d4:	f04f 31ff 	movne.w	r1, #4294967295
 80801d8:	f04f 30ff 	movne.w	r0, #4294967295
 80801dc:	f000 b96e 	b.w	80804bc <__aeabi_idiv0>
 80801e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80801e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80801e8:	f000 f806 	bl	80801f8 <__udivmoddi4>
 80801ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80801f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80801f4:	b004      	add	sp, #16
 80801f6:	4770      	bx	lr

080801f8 <__udivmoddi4>:
 80801f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80801fc:	9d08      	ldr	r5, [sp, #32]
 80801fe:	4604      	mov	r4, r0
 8080200:	468c      	mov	ip, r1
 8080202:	2b00      	cmp	r3, #0
 8080204:	f040 8083 	bne.w	808030e <__udivmoddi4+0x116>
 8080208:	428a      	cmp	r2, r1
 808020a:	4617      	mov	r7, r2
 808020c:	d947      	bls.n	808029e <__udivmoddi4+0xa6>
 808020e:	fab2 f282 	clz	r2, r2
 8080212:	b142      	cbz	r2, 8080226 <__udivmoddi4+0x2e>
 8080214:	f1c2 0020 	rsb	r0, r2, #32
 8080218:	fa24 f000 	lsr.w	r0, r4, r0
 808021c:	4091      	lsls	r1, r2
 808021e:	4097      	lsls	r7, r2
 8080220:	ea40 0c01 	orr.w	ip, r0, r1
 8080224:	4094      	lsls	r4, r2
 8080226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808022a:	0c23      	lsrs	r3, r4, #16
 808022c:	fbbc f6f8 	udiv	r6, ip, r8
 8080230:	fa1f fe87 	uxth.w	lr, r7
 8080234:	fb08 c116 	mls	r1, r8, r6, ip
 8080238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 808023c:	fb06 f10e 	mul.w	r1, r6, lr
 8080240:	4299      	cmp	r1, r3
 8080242:	d909      	bls.n	8080258 <__udivmoddi4+0x60>
 8080244:	18fb      	adds	r3, r7, r3
 8080246:	f106 30ff 	add.w	r0, r6, #4294967295
 808024a:	f080 8119 	bcs.w	8080480 <__udivmoddi4+0x288>
 808024e:	4299      	cmp	r1, r3
 8080250:	f240 8116 	bls.w	8080480 <__udivmoddi4+0x288>
 8080254:	3e02      	subs	r6, #2
 8080256:	443b      	add	r3, r7
 8080258:	1a5b      	subs	r3, r3, r1
 808025a:	b2a4      	uxth	r4, r4
 808025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8080260:	fb08 3310 	mls	r3, r8, r0, r3
 8080264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8080268:	fb00 fe0e 	mul.w	lr, r0, lr
 808026c:	45a6      	cmp	lr, r4
 808026e:	d909      	bls.n	8080284 <__udivmoddi4+0x8c>
 8080270:	193c      	adds	r4, r7, r4
 8080272:	f100 33ff 	add.w	r3, r0, #4294967295
 8080276:	f080 8105 	bcs.w	8080484 <__udivmoddi4+0x28c>
 808027a:	45a6      	cmp	lr, r4
 808027c:	f240 8102 	bls.w	8080484 <__udivmoddi4+0x28c>
 8080280:	3802      	subs	r0, #2
 8080282:	443c      	add	r4, r7
 8080284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8080288:	eba4 040e 	sub.w	r4, r4, lr
 808028c:	2600      	movs	r6, #0
 808028e:	b11d      	cbz	r5, 8080298 <__udivmoddi4+0xa0>
 8080290:	40d4      	lsrs	r4, r2
 8080292:	2300      	movs	r3, #0
 8080294:	e9c5 4300 	strd	r4, r3, [r5]
 8080298:	4631      	mov	r1, r6
 808029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808029e:	b902      	cbnz	r2, 80802a2 <__udivmoddi4+0xaa>
 80802a0:	deff      	udf	#255	; 0xff
 80802a2:	fab2 f282 	clz	r2, r2
 80802a6:	2a00      	cmp	r2, #0
 80802a8:	d150      	bne.n	808034c <__udivmoddi4+0x154>
 80802aa:	1bcb      	subs	r3, r1, r7
 80802ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80802b0:	fa1f f887 	uxth.w	r8, r7
 80802b4:	2601      	movs	r6, #1
 80802b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80802ba:	0c21      	lsrs	r1, r4, #16
 80802bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80802c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80802c4:	fb08 f30c 	mul.w	r3, r8, ip
 80802c8:	428b      	cmp	r3, r1
 80802ca:	d907      	bls.n	80802dc <__udivmoddi4+0xe4>
 80802cc:	1879      	adds	r1, r7, r1
 80802ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80802d2:	d202      	bcs.n	80802da <__udivmoddi4+0xe2>
 80802d4:	428b      	cmp	r3, r1
 80802d6:	f200 80e9 	bhi.w	80804ac <__udivmoddi4+0x2b4>
 80802da:	4684      	mov	ip, r0
 80802dc:	1ac9      	subs	r1, r1, r3
 80802de:	b2a3      	uxth	r3, r4
 80802e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80802e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80802e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80802ec:	fb08 f800 	mul.w	r8, r8, r0
 80802f0:	45a0      	cmp	r8, r4
 80802f2:	d907      	bls.n	8080304 <__udivmoddi4+0x10c>
 80802f4:	193c      	adds	r4, r7, r4
 80802f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80802fa:	d202      	bcs.n	8080302 <__udivmoddi4+0x10a>
 80802fc:	45a0      	cmp	r8, r4
 80802fe:	f200 80d9 	bhi.w	80804b4 <__udivmoddi4+0x2bc>
 8080302:	4618      	mov	r0, r3
 8080304:	eba4 0408 	sub.w	r4, r4, r8
 8080308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 808030c:	e7bf      	b.n	808028e <__udivmoddi4+0x96>
 808030e:	428b      	cmp	r3, r1
 8080310:	d909      	bls.n	8080326 <__udivmoddi4+0x12e>
 8080312:	2d00      	cmp	r5, #0
 8080314:	f000 80b1 	beq.w	808047a <__udivmoddi4+0x282>
 8080318:	2600      	movs	r6, #0
 808031a:	e9c5 0100 	strd	r0, r1, [r5]
 808031e:	4630      	mov	r0, r6
 8080320:	4631      	mov	r1, r6
 8080322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080326:	fab3 f683 	clz	r6, r3
 808032a:	2e00      	cmp	r6, #0
 808032c:	d14a      	bne.n	80803c4 <__udivmoddi4+0x1cc>
 808032e:	428b      	cmp	r3, r1
 8080330:	d302      	bcc.n	8080338 <__udivmoddi4+0x140>
 8080332:	4282      	cmp	r2, r0
 8080334:	f200 80b8 	bhi.w	80804a8 <__udivmoddi4+0x2b0>
 8080338:	1a84      	subs	r4, r0, r2
 808033a:	eb61 0103 	sbc.w	r1, r1, r3
 808033e:	2001      	movs	r0, #1
 8080340:	468c      	mov	ip, r1
 8080342:	2d00      	cmp	r5, #0
 8080344:	d0a8      	beq.n	8080298 <__udivmoddi4+0xa0>
 8080346:	e9c5 4c00 	strd	r4, ip, [r5]
 808034a:	e7a5      	b.n	8080298 <__udivmoddi4+0xa0>
 808034c:	f1c2 0320 	rsb	r3, r2, #32
 8080350:	fa20 f603 	lsr.w	r6, r0, r3
 8080354:	4097      	lsls	r7, r2
 8080356:	fa01 f002 	lsl.w	r0, r1, r2
 808035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 808035e:	40d9      	lsrs	r1, r3
 8080360:	4330      	orrs	r0, r6
 8080362:	0c03      	lsrs	r3, r0, #16
 8080364:	fbb1 f6fe 	udiv	r6, r1, lr
 8080368:	fa1f f887 	uxth.w	r8, r7
 808036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8080370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8080374:	fb06 f108 	mul.w	r1, r6, r8
 8080378:	4299      	cmp	r1, r3
 808037a:	fa04 f402 	lsl.w	r4, r4, r2
 808037e:	d909      	bls.n	8080394 <__udivmoddi4+0x19c>
 8080380:	18fb      	adds	r3, r7, r3
 8080382:	f106 3cff 	add.w	ip, r6, #4294967295
 8080386:	f080 808d 	bcs.w	80804a4 <__udivmoddi4+0x2ac>
 808038a:	4299      	cmp	r1, r3
 808038c:	f240 808a 	bls.w	80804a4 <__udivmoddi4+0x2ac>
 8080390:	3e02      	subs	r6, #2
 8080392:	443b      	add	r3, r7
 8080394:	1a5b      	subs	r3, r3, r1
 8080396:	b281      	uxth	r1, r0
 8080398:	fbb3 f0fe 	udiv	r0, r3, lr
 808039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80803a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80803a4:	fb00 f308 	mul.w	r3, r0, r8
 80803a8:	428b      	cmp	r3, r1
 80803aa:	d907      	bls.n	80803bc <__udivmoddi4+0x1c4>
 80803ac:	1879      	adds	r1, r7, r1
 80803ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80803b2:	d273      	bcs.n	808049c <__udivmoddi4+0x2a4>
 80803b4:	428b      	cmp	r3, r1
 80803b6:	d971      	bls.n	808049c <__udivmoddi4+0x2a4>
 80803b8:	3802      	subs	r0, #2
 80803ba:	4439      	add	r1, r7
 80803bc:	1acb      	subs	r3, r1, r3
 80803be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80803c2:	e778      	b.n	80802b6 <__udivmoddi4+0xbe>
 80803c4:	f1c6 0c20 	rsb	ip, r6, #32
 80803c8:	fa03 f406 	lsl.w	r4, r3, r6
 80803cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80803d0:	431c      	orrs	r4, r3
 80803d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80803d6:	fa01 f306 	lsl.w	r3, r1, r6
 80803da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80803de:	fa21 f10c 	lsr.w	r1, r1, ip
 80803e2:	431f      	orrs	r7, r3
 80803e4:	0c3b      	lsrs	r3, r7, #16
 80803e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80803ea:	fa1f f884 	uxth.w	r8, r4
 80803ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80803f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80803f6:	fb09 fa08 	mul.w	sl, r9, r8
 80803fa:	458a      	cmp	sl, r1
 80803fc:	fa02 f206 	lsl.w	r2, r2, r6
 8080400:	fa00 f306 	lsl.w	r3, r0, r6
 8080404:	d908      	bls.n	8080418 <__udivmoddi4+0x220>
 8080406:	1861      	adds	r1, r4, r1
 8080408:	f109 30ff 	add.w	r0, r9, #4294967295
 808040c:	d248      	bcs.n	80804a0 <__udivmoddi4+0x2a8>
 808040e:	458a      	cmp	sl, r1
 8080410:	d946      	bls.n	80804a0 <__udivmoddi4+0x2a8>
 8080412:	f1a9 0902 	sub.w	r9, r9, #2
 8080416:	4421      	add	r1, r4
 8080418:	eba1 010a 	sub.w	r1, r1, sl
 808041c:	b2bf      	uxth	r7, r7
 808041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8080422:	fb0e 1110 	mls	r1, lr, r0, r1
 8080426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 808042a:	fb00 f808 	mul.w	r8, r0, r8
 808042e:	45b8      	cmp	r8, r7
 8080430:	d907      	bls.n	8080442 <__udivmoddi4+0x24a>
 8080432:	19e7      	adds	r7, r4, r7
 8080434:	f100 31ff 	add.w	r1, r0, #4294967295
 8080438:	d22e      	bcs.n	8080498 <__udivmoddi4+0x2a0>
 808043a:	45b8      	cmp	r8, r7
 808043c:	d92c      	bls.n	8080498 <__udivmoddi4+0x2a0>
 808043e:	3802      	subs	r0, #2
 8080440:	4427      	add	r7, r4
 8080442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8080446:	eba7 0708 	sub.w	r7, r7, r8
 808044a:	fba0 8902 	umull	r8, r9, r0, r2
 808044e:	454f      	cmp	r7, r9
 8080450:	46c6      	mov	lr, r8
 8080452:	4649      	mov	r1, r9
 8080454:	d31a      	bcc.n	808048c <__udivmoddi4+0x294>
 8080456:	d017      	beq.n	8080488 <__udivmoddi4+0x290>
 8080458:	b15d      	cbz	r5, 8080472 <__udivmoddi4+0x27a>
 808045a:	ebb3 020e 	subs.w	r2, r3, lr
 808045e:	eb67 0701 	sbc.w	r7, r7, r1
 8080462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8080466:	40f2      	lsrs	r2, r6
 8080468:	ea4c 0202 	orr.w	r2, ip, r2
 808046c:	40f7      	lsrs	r7, r6
 808046e:	e9c5 2700 	strd	r2, r7, [r5]
 8080472:	2600      	movs	r6, #0
 8080474:	4631      	mov	r1, r6
 8080476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808047a:	462e      	mov	r6, r5
 808047c:	4628      	mov	r0, r5
 808047e:	e70b      	b.n	8080298 <__udivmoddi4+0xa0>
 8080480:	4606      	mov	r6, r0
 8080482:	e6e9      	b.n	8080258 <__udivmoddi4+0x60>
 8080484:	4618      	mov	r0, r3
 8080486:	e6fd      	b.n	8080284 <__udivmoddi4+0x8c>
 8080488:	4543      	cmp	r3, r8
 808048a:	d2e5      	bcs.n	8080458 <__udivmoddi4+0x260>
 808048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8080490:	eb69 0104 	sbc.w	r1, r9, r4
 8080494:	3801      	subs	r0, #1
 8080496:	e7df      	b.n	8080458 <__udivmoddi4+0x260>
 8080498:	4608      	mov	r0, r1
 808049a:	e7d2      	b.n	8080442 <__udivmoddi4+0x24a>
 808049c:	4660      	mov	r0, ip
 808049e:	e78d      	b.n	80803bc <__udivmoddi4+0x1c4>
 80804a0:	4681      	mov	r9, r0
 80804a2:	e7b9      	b.n	8080418 <__udivmoddi4+0x220>
 80804a4:	4666      	mov	r6, ip
 80804a6:	e775      	b.n	8080394 <__udivmoddi4+0x19c>
 80804a8:	4630      	mov	r0, r6
 80804aa:	e74a      	b.n	8080342 <__udivmoddi4+0x14a>
 80804ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80804b0:	4439      	add	r1, r7
 80804b2:	e713      	b.n	80802dc <__udivmoddi4+0xe4>
 80804b4:	3802      	subs	r0, #2
 80804b6:	443c      	add	r4, r7
 80804b8:	e724      	b.n	8080304 <__udivmoddi4+0x10c>
 80804ba:	bf00      	nop

080804bc <__aeabi_idiv0>:
 80804bc:	4770      	bx	lr
 80804be:	bf00      	nop

080804c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80804c0:	b580      	push	{r7, lr}
 80804c2:	b088      	sub	sp, #32
 80804c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80804c6:	f107 030c 	add.w	r3, r7, #12
 80804ca:	2200      	movs	r2, #0
 80804cc:	601a      	str	r2, [r3, #0]
 80804ce:	605a      	str	r2, [r3, #4]
 80804d0:	609a      	str	r2, [r3, #8]
 80804d2:	60da      	str	r2, [r3, #12]
 80804d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80804d6:	2300      	movs	r3, #0
 80804d8:	60bb      	str	r3, [r7, #8]
 80804da:	4b1f      	ldr	r3, [pc, #124]	; (8080558 <MX_GPIO_Init+0x98>)
 80804dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80804de:	4a1e      	ldr	r2, [pc, #120]	; (8080558 <MX_GPIO_Init+0x98>)
 80804e0:	f043 0310 	orr.w	r3, r3, #16
 80804e4:	6313      	str	r3, [r2, #48]	; 0x30
 80804e6:	4b1c      	ldr	r3, [pc, #112]	; (8080558 <MX_GPIO_Init+0x98>)
 80804e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80804ea:	f003 0310 	and.w	r3, r3, #16
 80804ee:	60bb      	str	r3, [r7, #8]
 80804f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80804f2:	2300      	movs	r3, #0
 80804f4:	607b      	str	r3, [r7, #4]
 80804f6:	4b18      	ldr	r3, [pc, #96]	; (8080558 <MX_GPIO_Init+0x98>)
 80804f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80804fa:	4a17      	ldr	r2, [pc, #92]	; (8080558 <MX_GPIO_Init+0x98>)
 80804fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8080500:	6313      	str	r3, [r2, #48]	; 0x30
 8080502:	4b15      	ldr	r3, [pc, #84]	; (8080558 <MX_GPIO_Init+0x98>)
 8080504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 808050a:	607b      	str	r3, [r7, #4]
 808050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 808050e:	2300      	movs	r3, #0
 8080510:	603b      	str	r3, [r7, #0]
 8080512:	4b11      	ldr	r3, [pc, #68]	; (8080558 <MX_GPIO_Init+0x98>)
 8080514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080516:	4a10      	ldr	r2, [pc, #64]	; (8080558 <MX_GPIO_Init+0x98>)
 8080518:	f043 0301 	orr.w	r3, r3, #1
 808051c:	6313      	str	r3, [r2, #48]	; 0x30
 808051e:	4b0e      	ldr	r3, [pc, #56]	; (8080558 <MX_GPIO_Init+0x98>)
 8080520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080522:	f003 0301 	and.w	r3, r3, #1
 8080526:	603b      	str	r3, [r7, #0]
 8080528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 808052a:	2200      	movs	r2, #0
 808052c:	2118      	movs	r1, #24
 808052e:	480b      	ldr	r0, [pc, #44]	; (808055c <MX_GPIO_Init+0x9c>)
 8080530:	f000 fe5c 	bl	80811ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8080534:	2318      	movs	r3, #24
 8080536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8080538:	2301      	movs	r3, #1
 808053a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 808053c:	2300      	movs	r3, #0
 808053e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8080540:	2300      	movs	r3, #0
 8080542:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8080544:	f107 030c 	add.w	r3, r7, #12
 8080548:	4619      	mov	r1, r3
 808054a:	4804      	ldr	r0, [pc, #16]	; (808055c <MX_GPIO_Init+0x9c>)
 808054c:	f000 fcb2 	bl	8080eb4 <HAL_GPIO_Init>

}
 8080550:	bf00      	nop
 8080552:	3720      	adds	r7, #32
 8080554:	46bd      	mov	sp, r7
 8080556:	bd80      	pop	{r7, pc}
 8080558:	40023800 	.word	0x40023800
 808055c:	40021000 	.word	0x40021000

08080560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8080560:	b580      	push	{r7, lr}
 8080562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8080564:	f000 fa6c 	bl	8080a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8080568:	f000 f822 	bl	80805b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 808056c:	f7ff ffa8 	bl	80804c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8080570:	f000 f9a4 	bl	80808bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_Delay(500);
 8080574:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080578:	f000 fad4 	bl	8080b24 <HAL_Delay>
	  printf("this is app, HAL_Delay\n\n");
 808057c:	480a      	ldr	r0, [pc, #40]	; (80805a8 <main+0x48>)
 808057e:	f002 f96b 	bl	8082858 <puts>

	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8080582:	2200      	movs	r2, #0
 8080584:	2118      	movs	r1, #24
 8080586:	4809      	ldr	r0, [pc, #36]	; (80805ac <main+0x4c>)
 8080588:	f000 fe30 	bl	80811ec <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 808058c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080590:	f000 fac8 	bl	8080b24 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 8080594:	2201      	movs	r2, #1
 8080596:	2118      	movs	r1, #24
 8080598:	4804      	ldr	r0, [pc, #16]	; (80805ac <main+0x4c>)
 808059a:	f000 fe27 	bl	80811ec <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 808059e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80805a2:	f000 fabf 	bl	8080b24 <HAL_Delay>
  {
 80805a6:	e7e5      	b.n	8080574 <main+0x14>
 80805a8:	08083120 	.word	0x08083120
 80805ac:	40021000 	.word	0x40021000

080805b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80805b0:	b580      	push	{r7, lr}
 80805b2:	b094      	sub	sp, #80	; 0x50
 80805b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80805b6:	f107 0320 	add.w	r3, r7, #32
 80805ba:	2230      	movs	r2, #48	; 0x30
 80805bc:	2100      	movs	r1, #0
 80805be:	4618      	mov	r0, r3
 80805c0:	f002 f8d4 	bl	808276c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80805c4:	f107 030c 	add.w	r3, r7, #12
 80805c8:	2200      	movs	r2, #0
 80805ca:	601a      	str	r2, [r3, #0]
 80805cc:	605a      	str	r2, [r3, #4]
 80805ce:	609a      	str	r2, [r3, #8]
 80805d0:	60da      	str	r2, [r3, #12]
 80805d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80805d4:	2300      	movs	r3, #0
 80805d6:	60bb      	str	r3, [r7, #8]
 80805d8:	4b28      	ldr	r3, [pc, #160]	; (808067c <SystemClock_Config+0xcc>)
 80805da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80805dc:	4a27      	ldr	r2, [pc, #156]	; (808067c <SystemClock_Config+0xcc>)
 80805de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80805e2:	6413      	str	r3, [r2, #64]	; 0x40
 80805e4:	4b25      	ldr	r3, [pc, #148]	; (808067c <SystemClock_Config+0xcc>)
 80805e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80805e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80805ec:	60bb      	str	r3, [r7, #8]
 80805ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80805f0:	2300      	movs	r3, #0
 80805f2:	607b      	str	r3, [r7, #4]
 80805f4:	4b22      	ldr	r3, [pc, #136]	; (8080680 <SystemClock_Config+0xd0>)
 80805f6:	681b      	ldr	r3, [r3, #0]
 80805f8:	4a21      	ldr	r2, [pc, #132]	; (8080680 <SystemClock_Config+0xd0>)
 80805fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80805fe:	6013      	str	r3, [r2, #0]
 8080600:	4b1f      	ldr	r3, [pc, #124]	; (8080680 <SystemClock_Config+0xd0>)
 8080602:	681b      	ldr	r3, [r3, #0]
 8080604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8080608:	607b      	str	r3, [r7, #4]
 808060a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 808060c:	2302      	movs	r3, #2
 808060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8080610:	2301      	movs	r3, #1
 8080612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8080614:	2310      	movs	r3, #16
 8080616:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8080618:	2302      	movs	r3, #2
 808061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 808061c:	2300      	movs	r3, #0
 808061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8080620:	2308      	movs	r3, #8
 8080622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8080624:	23a8      	movs	r3, #168	; 0xa8
 8080626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8080628:	2302      	movs	r3, #2
 808062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 808062c:	2304      	movs	r3, #4
 808062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8080630:	f107 0320 	add.w	r3, r7, #32
 8080634:	4618      	mov	r0, r3
 8080636:	f000 fdf3 	bl	8081220 <HAL_RCC_OscConfig>
 808063a:	4603      	mov	r3, r0
 808063c:	2b00      	cmp	r3, #0
 808063e:	d001      	beq.n	8080644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8080640:	f000 f820 	bl	8080684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8080644:	230f      	movs	r3, #15
 8080646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8080648:	2302      	movs	r3, #2
 808064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 808064c:	2300      	movs	r3, #0
 808064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8080650:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8080654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8080656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 808065a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 808065c:	f107 030c 	add.w	r3, r7, #12
 8080660:	2105      	movs	r1, #5
 8080662:	4618      	mov	r0, r3
 8080664:	f001 f854 	bl	8081710 <HAL_RCC_ClockConfig>
 8080668:	4603      	mov	r3, r0
 808066a:	2b00      	cmp	r3, #0
 808066c:	d001      	beq.n	8080672 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 808066e:	f000 f809 	bl	8080684 <Error_Handler>
  }
}
 8080672:	bf00      	nop
 8080674:	3750      	adds	r7, #80	; 0x50
 8080676:	46bd      	mov	sp, r7
 8080678:	bd80      	pop	{r7, pc}
 808067a:	bf00      	nop
 808067c:	40023800 	.word	0x40023800
 8080680:	40007000 	.word	0x40007000

08080684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8080684:	b480      	push	{r7}
 8080686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8080688:	b672      	cpsid	i
}
 808068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 808068c:	e7fe      	b.n	808068c <Error_Handler+0x8>
	...

08080690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8080690:	b480      	push	{r7}
 8080692:	b083      	sub	sp, #12
 8080694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8080696:	2300      	movs	r3, #0
 8080698:	607b      	str	r3, [r7, #4]
 808069a:	4b10      	ldr	r3, [pc, #64]	; (80806dc <HAL_MspInit+0x4c>)
 808069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808069e:	4a0f      	ldr	r2, [pc, #60]	; (80806dc <HAL_MspInit+0x4c>)
 80806a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80806a4:	6453      	str	r3, [r2, #68]	; 0x44
 80806a6:	4b0d      	ldr	r3, [pc, #52]	; (80806dc <HAL_MspInit+0x4c>)
 80806a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80806aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80806ae:	607b      	str	r3, [r7, #4]
 80806b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80806b2:	2300      	movs	r3, #0
 80806b4:	603b      	str	r3, [r7, #0]
 80806b6:	4b09      	ldr	r3, [pc, #36]	; (80806dc <HAL_MspInit+0x4c>)
 80806b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80806ba:	4a08      	ldr	r2, [pc, #32]	; (80806dc <HAL_MspInit+0x4c>)
 80806bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80806c0:	6413      	str	r3, [r2, #64]	; 0x40
 80806c2:	4b06      	ldr	r3, [pc, #24]	; (80806dc <HAL_MspInit+0x4c>)
 80806c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80806c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80806ca:	603b      	str	r3, [r7, #0]
 80806cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80806ce:	bf00      	nop
 80806d0:	370c      	adds	r7, #12
 80806d2:	46bd      	mov	sp, r7
 80806d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80806d8:	4770      	bx	lr
 80806da:	bf00      	nop
 80806dc:	40023800 	.word	0x40023800

080806e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80806e0:	b480      	push	{r7}
 80806e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80806e4:	e7fe      	b.n	80806e4 <NMI_Handler+0x4>

080806e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80806e6:	b480      	push	{r7}
 80806e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80806ea:	e7fe      	b.n	80806ea <HardFault_Handler+0x4>

080806ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80806ec:	b480      	push	{r7}
 80806ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80806f0:	e7fe      	b.n	80806f0 <MemManage_Handler+0x4>

080806f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80806f2:	b480      	push	{r7}
 80806f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80806f6:	e7fe      	b.n	80806f6 <BusFault_Handler+0x4>

080806f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80806f8:	b480      	push	{r7}
 80806fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80806fc:	e7fe      	b.n	80806fc <UsageFault_Handler+0x4>

080806fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80806fe:	b480      	push	{r7}
 8080700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8080702:	bf00      	nop
 8080704:	46bd      	mov	sp, r7
 8080706:	f85d 7b04 	ldr.w	r7, [sp], #4
 808070a:	4770      	bx	lr

0808070c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 808070c:	b480      	push	{r7}
 808070e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8080710:	bf00      	nop
 8080712:	46bd      	mov	sp, r7
 8080714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080718:	4770      	bx	lr

0808071a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 808071a:	b480      	push	{r7}
 808071c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 808071e:	bf00      	nop
 8080720:	46bd      	mov	sp, r7
 8080722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080726:	4770      	bx	lr

08080728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8080728:	b580      	push	{r7, lr}
 808072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 808072c:	f000 f9da 	bl	8080ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8080730:	bf00      	nop
 8080732:	bd80      	pop	{r7, pc}

08080734 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8080734:	b580      	push	{r7, lr}
 8080736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8080738:	4802      	ldr	r0, [pc, #8]	; (8080744 <USART1_IRQHandler+0x10>)
 808073a:	f001 fac5 	bl	8081cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 808073e:	bf00      	nop
 8080740:	bd80      	pop	{r7, pc}
 8080742:	bf00      	nop
 8080744:	20000098 	.word	0x20000098

08080748 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8080748:	b580      	push	{r7, lr}
 808074a:	b086      	sub	sp, #24
 808074c:	af00      	add	r7, sp, #0
 808074e:	60f8      	str	r0, [r7, #12]
 8080750:	60b9      	str	r1, [r7, #8]
 8080752:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8080754:	2300      	movs	r3, #0
 8080756:	617b      	str	r3, [r7, #20]
 8080758:	e00a      	b.n	8080770 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 808075a:	f000 f93b 	bl	80809d4 <__io_getchar>
 808075e:	4601      	mov	r1, r0
 8080760:	68bb      	ldr	r3, [r7, #8]
 8080762:	1c5a      	adds	r2, r3, #1
 8080764:	60ba      	str	r2, [r7, #8]
 8080766:	b2ca      	uxtb	r2, r1
 8080768:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 808076a:	697b      	ldr	r3, [r7, #20]
 808076c:	3301      	adds	r3, #1
 808076e:	617b      	str	r3, [r7, #20]
 8080770:	697a      	ldr	r2, [r7, #20]
 8080772:	687b      	ldr	r3, [r7, #4]
 8080774:	429a      	cmp	r2, r3
 8080776:	dbf0      	blt.n	808075a <_read+0x12>
	}

return len;
 8080778:	687b      	ldr	r3, [r7, #4]
}
 808077a:	4618      	mov	r0, r3
 808077c:	3718      	adds	r7, #24
 808077e:	46bd      	mov	sp, r7
 8080780:	bd80      	pop	{r7, pc}

08080782 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8080782:	b580      	push	{r7, lr}
 8080784:	b086      	sub	sp, #24
 8080786:	af00      	add	r7, sp, #0
 8080788:	60f8      	str	r0, [r7, #12]
 808078a:	60b9      	str	r1, [r7, #8]
 808078c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 808078e:	2300      	movs	r3, #0
 8080790:	617b      	str	r3, [r7, #20]
 8080792:	e009      	b.n	80807a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8080794:	68bb      	ldr	r3, [r7, #8]
 8080796:	1c5a      	adds	r2, r3, #1
 8080798:	60ba      	str	r2, [r7, #8]
 808079a:	781b      	ldrb	r3, [r3, #0]
 808079c:	4618      	mov	r0, r3
 808079e:	f000 f907 	bl	80809b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80807a2:	697b      	ldr	r3, [r7, #20]
 80807a4:	3301      	adds	r3, #1
 80807a6:	617b      	str	r3, [r7, #20]
 80807a8:	697a      	ldr	r2, [r7, #20]
 80807aa:	687b      	ldr	r3, [r7, #4]
 80807ac:	429a      	cmp	r2, r3
 80807ae:	dbf1      	blt.n	8080794 <_write+0x12>
	}
	return len;
 80807b0:	687b      	ldr	r3, [r7, #4]
}
 80807b2:	4618      	mov	r0, r3
 80807b4:	3718      	adds	r7, #24
 80807b6:	46bd      	mov	sp, r7
 80807b8:	bd80      	pop	{r7, pc}

080807ba <_close>:

int _close(int file)
{
 80807ba:	b480      	push	{r7}
 80807bc:	b083      	sub	sp, #12
 80807be:	af00      	add	r7, sp, #0
 80807c0:	6078      	str	r0, [r7, #4]
	return -1;
 80807c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80807c6:	4618      	mov	r0, r3
 80807c8:	370c      	adds	r7, #12
 80807ca:	46bd      	mov	sp, r7
 80807cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80807d0:	4770      	bx	lr

080807d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80807d2:	b480      	push	{r7}
 80807d4:	b083      	sub	sp, #12
 80807d6:	af00      	add	r7, sp, #0
 80807d8:	6078      	str	r0, [r7, #4]
 80807da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80807dc:	683b      	ldr	r3, [r7, #0]
 80807de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80807e2:	605a      	str	r2, [r3, #4]
	return 0;
 80807e4:	2300      	movs	r3, #0
}
 80807e6:	4618      	mov	r0, r3
 80807e8:	370c      	adds	r7, #12
 80807ea:	46bd      	mov	sp, r7
 80807ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80807f0:	4770      	bx	lr

080807f2 <_isatty>:

int _isatty(int file)
{
 80807f2:	b480      	push	{r7}
 80807f4:	b083      	sub	sp, #12
 80807f6:	af00      	add	r7, sp, #0
 80807f8:	6078      	str	r0, [r7, #4]
	return 1;
 80807fa:	2301      	movs	r3, #1
}
 80807fc:	4618      	mov	r0, r3
 80807fe:	370c      	adds	r7, #12
 8080800:	46bd      	mov	sp, r7
 8080802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080806:	4770      	bx	lr

08080808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8080808:	b480      	push	{r7}
 808080a:	b085      	sub	sp, #20
 808080c:	af00      	add	r7, sp, #0
 808080e:	60f8      	str	r0, [r7, #12]
 8080810:	60b9      	str	r1, [r7, #8]
 8080812:	607a      	str	r2, [r7, #4]
	return 0;
 8080814:	2300      	movs	r3, #0
}
 8080816:	4618      	mov	r0, r3
 8080818:	3714      	adds	r7, #20
 808081a:	46bd      	mov	sp, r7
 808081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080820:	4770      	bx	lr
	...

08080824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8080824:	b580      	push	{r7, lr}
 8080826:	b086      	sub	sp, #24
 8080828:	af00      	add	r7, sp, #0
 808082a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 808082c:	4a14      	ldr	r2, [pc, #80]	; (8080880 <_sbrk+0x5c>)
 808082e:	4b15      	ldr	r3, [pc, #84]	; (8080884 <_sbrk+0x60>)
 8080830:	1ad3      	subs	r3, r2, r3
 8080832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8080834:	697b      	ldr	r3, [r7, #20]
 8080836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8080838:	4b13      	ldr	r3, [pc, #76]	; (8080888 <_sbrk+0x64>)
 808083a:	681b      	ldr	r3, [r3, #0]
 808083c:	2b00      	cmp	r3, #0
 808083e:	d102      	bne.n	8080846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8080840:	4b11      	ldr	r3, [pc, #68]	; (8080888 <_sbrk+0x64>)
 8080842:	4a12      	ldr	r2, [pc, #72]	; (808088c <_sbrk+0x68>)
 8080844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8080846:	4b10      	ldr	r3, [pc, #64]	; (8080888 <_sbrk+0x64>)
 8080848:	681a      	ldr	r2, [r3, #0]
 808084a:	687b      	ldr	r3, [r7, #4]
 808084c:	4413      	add	r3, r2
 808084e:	693a      	ldr	r2, [r7, #16]
 8080850:	429a      	cmp	r2, r3
 8080852:	d207      	bcs.n	8080864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8080854:	f001 ff60 	bl	8082718 <__errno>
 8080858:	4603      	mov	r3, r0
 808085a:	220c      	movs	r2, #12
 808085c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 808085e:	f04f 33ff 	mov.w	r3, #4294967295
 8080862:	e009      	b.n	8080878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8080864:	4b08      	ldr	r3, [pc, #32]	; (8080888 <_sbrk+0x64>)
 8080866:	681b      	ldr	r3, [r3, #0]
 8080868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 808086a:	4b07      	ldr	r3, [pc, #28]	; (8080888 <_sbrk+0x64>)
 808086c:	681a      	ldr	r2, [r3, #0]
 808086e:	687b      	ldr	r3, [r7, #4]
 8080870:	4413      	add	r3, r2
 8080872:	4a05      	ldr	r2, [pc, #20]	; (8080888 <_sbrk+0x64>)
 8080874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8080876:	68fb      	ldr	r3, [r7, #12]
}
 8080878:	4618      	mov	r0, r3
 808087a:	3718      	adds	r7, #24
 808087c:	46bd      	mov	sp, r7
 808087e:	bd80      	pop	{r7, pc}
 8080880:	20020000 	.word	0x20020000
 8080884:	00000400 	.word	0x00000400
 8080888:	2000008c 	.word	0x2000008c
 808088c:	200000f0 	.word	0x200000f0

08080890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8080890:	b480      	push	{r7}
 8080892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8080894:	4b07      	ldr	r3, [pc, #28]	; (80808b4 <SystemInit+0x24>)
 8080896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808089a:	4a06      	ldr	r2, [pc, #24]	; (80808b4 <SystemInit+0x24>)
 808089c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80808a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80808a4:	4b03      	ldr	r3, [pc, #12]	; (80808b4 <SystemInit+0x24>)
 80808a6:	4a04      	ldr	r2, [pc, #16]	; (80808b8 <SystemInit+0x28>)
 80808a8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80808aa:	bf00      	nop
 80808ac:	46bd      	mov	sp, r7
 80808ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80808b2:	4770      	bx	lr
 80808b4:	e000ed00 	.word	0xe000ed00
 80808b8:	08080000 	.word	0x08080000

080808bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80808bc:	b580      	push	{r7, lr}
 80808be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80808c0:	4b11      	ldr	r3, [pc, #68]	; (8080908 <MX_USART1_UART_Init+0x4c>)
 80808c2:	4a12      	ldr	r2, [pc, #72]	; (808090c <MX_USART1_UART_Init+0x50>)
 80808c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80808c6:	4b10      	ldr	r3, [pc, #64]	; (8080908 <MX_USART1_UART_Init+0x4c>)
 80808c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80808cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80808ce:	4b0e      	ldr	r3, [pc, #56]	; (8080908 <MX_USART1_UART_Init+0x4c>)
 80808d0:	2200      	movs	r2, #0
 80808d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80808d4:	4b0c      	ldr	r3, [pc, #48]	; (8080908 <MX_USART1_UART_Init+0x4c>)
 80808d6:	2200      	movs	r2, #0
 80808d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80808da:	4b0b      	ldr	r3, [pc, #44]	; (8080908 <MX_USART1_UART_Init+0x4c>)
 80808dc:	2200      	movs	r2, #0
 80808de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80808e0:	4b09      	ldr	r3, [pc, #36]	; (8080908 <MX_USART1_UART_Init+0x4c>)
 80808e2:	220c      	movs	r2, #12
 80808e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80808e6:	4b08      	ldr	r3, [pc, #32]	; (8080908 <MX_USART1_UART_Init+0x4c>)
 80808e8:	2200      	movs	r2, #0
 80808ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80808ec:	4b06      	ldr	r3, [pc, #24]	; (8080908 <MX_USART1_UART_Init+0x4c>)
 80808ee:	2200      	movs	r2, #0
 80808f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80808f2:	4805      	ldr	r0, [pc, #20]	; (8080908 <MX_USART1_UART_Init+0x4c>)
 80808f4:	f001 f908 	bl	8081b08 <HAL_UART_Init>
 80808f8:	4603      	mov	r3, r0
 80808fa:	2b00      	cmp	r3, #0
 80808fc:	d001      	beq.n	8080902 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80808fe:	f7ff fec1 	bl	8080684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8080902:	bf00      	nop
 8080904:	bd80      	pop	{r7, pc}
 8080906:	bf00      	nop
 8080908:	20000098 	.word	0x20000098
 808090c:	40011000 	.word	0x40011000

08080910 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8080910:	b580      	push	{r7, lr}
 8080912:	b08a      	sub	sp, #40	; 0x28
 8080914:	af00      	add	r7, sp, #0
 8080916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8080918:	f107 0314 	add.w	r3, r7, #20
 808091c:	2200      	movs	r2, #0
 808091e:	601a      	str	r2, [r3, #0]
 8080920:	605a      	str	r2, [r3, #4]
 8080922:	609a      	str	r2, [r3, #8]
 8080924:	60da      	str	r2, [r3, #12]
 8080926:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8080928:	687b      	ldr	r3, [r7, #4]
 808092a:	681b      	ldr	r3, [r3, #0]
 808092c:	4a1d      	ldr	r2, [pc, #116]	; (80809a4 <HAL_UART_MspInit+0x94>)
 808092e:	4293      	cmp	r3, r2
 8080930:	d134      	bne.n	808099c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8080932:	2300      	movs	r3, #0
 8080934:	613b      	str	r3, [r7, #16]
 8080936:	4b1c      	ldr	r3, [pc, #112]	; (80809a8 <HAL_UART_MspInit+0x98>)
 8080938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808093a:	4a1b      	ldr	r2, [pc, #108]	; (80809a8 <HAL_UART_MspInit+0x98>)
 808093c:	f043 0310 	orr.w	r3, r3, #16
 8080940:	6453      	str	r3, [r2, #68]	; 0x44
 8080942:	4b19      	ldr	r3, [pc, #100]	; (80809a8 <HAL_UART_MspInit+0x98>)
 8080944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080946:	f003 0310 	and.w	r3, r3, #16
 808094a:	613b      	str	r3, [r7, #16]
 808094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 808094e:	2300      	movs	r3, #0
 8080950:	60fb      	str	r3, [r7, #12]
 8080952:	4b15      	ldr	r3, [pc, #84]	; (80809a8 <HAL_UART_MspInit+0x98>)
 8080954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080956:	4a14      	ldr	r2, [pc, #80]	; (80809a8 <HAL_UART_MspInit+0x98>)
 8080958:	f043 0301 	orr.w	r3, r3, #1
 808095c:	6313      	str	r3, [r2, #48]	; 0x30
 808095e:	4b12      	ldr	r3, [pc, #72]	; (80809a8 <HAL_UART_MspInit+0x98>)
 8080960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080962:	f003 0301 	and.w	r3, r3, #1
 8080966:	60fb      	str	r3, [r7, #12]
 8080968:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 808096a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 808096e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8080970:	2302      	movs	r3, #2
 8080972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8080974:	2300      	movs	r3, #0
 8080976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8080978:	2303      	movs	r3, #3
 808097a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 808097c:	2307      	movs	r3, #7
 808097e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8080980:	f107 0314 	add.w	r3, r7, #20
 8080984:	4619      	mov	r1, r3
 8080986:	4809      	ldr	r0, [pc, #36]	; (80809ac <HAL_UART_MspInit+0x9c>)
 8080988:	f000 fa94 	bl	8080eb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 808098c:	2200      	movs	r2, #0
 808098e:	2100      	movs	r1, #0
 8080990:	2025      	movs	r0, #37	; 0x25
 8080992:	f000 f9c6 	bl	8080d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8080996:	2025      	movs	r0, #37	; 0x25
 8080998:	f000 f9df 	bl	8080d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 808099c:	bf00      	nop
 808099e:	3728      	adds	r7, #40	; 0x28
 80809a0:	46bd      	mov	sp, r7
 80809a2:	bd80      	pop	{r7, pc}
 80809a4:	40011000 	.word	0x40011000
 80809a8:	40023800 	.word	0x40023800
 80809ac:	40020000 	.word	0x40020000

080809b0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80809b0:	b580      	push	{r7, lr}
 80809b2:	b082      	sub	sp, #8
 80809b4:	af00      	add	r7, sp, #0
 80809b6:	6078      	str	r0, [r7, #4]
//此处用的是USART1
//你在使用时仅仅需要把’USART1‘改成你的串口就可以�??
    //while ((USART1->SR & 0X40) == 0);
    //USART1->DR = (uint8_t) ch;
    //return ch;
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);	//发�?�一个字�?
 80809b8:	1d39      	adds	r1, r7, #4
 80809ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80809be:	2201      	movs	r2, #1
 80809c0:	4803      	ldr	r0, [pc, #12]	; (80809d0 <__io_putchar+0x20>)
 80809c2:	f001 f8ee 	bl	8081ba2 <HAL_UART_Transmit>
    return ch;
 80809c6:	687b      	ldr	r3, [r7, #4]
}
 80809c8:	4618      	mov	r0, r3
 80809ca:	3708      	adds	r7, #8
 80809cc:	46bd      	mov	sp, r7
 80809ce:	bd80      	pop	{r7, pc}
 80809d0:	20000098 	.word	0x20000098

080809d4 <__io_getchar>:
GETCHAR_PROTOTYPE
{
 80809d4:	b480      	push	{r7}
 80809d6:	b085      	sub	sp, #20
 80809d8:	af00      	add	r7, sp, #0
 80809da:	6078      	str	r0, [r7, #4]
//			USART1_BUF_Init();
//			break;
//		}
//	}

	return  (int)ch;
 80809dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80809de:	4618      	mov	r0, r3
 80809e0:	3714      	adds	r7, #20
 80809e2:	46bd      	mov	sp, r7
 80809e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80809e8:	4770      	bx	lr
	...

080809ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80809ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8080a24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80809f0:	480d      	ldr	r0, [pc, #52]	; (8080a28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80809f2:	490e      	ldr	r1, [pc, #56]	; (8080a2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80809f4:	4a0e      	ldr	r2, [pc, #56]	; (8080a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80809f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80809f8:	e002      	b.n	8080a00 <LoopCopyDataInit>

080809fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80809fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80809fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80809fe:	3304      	adds	r3, #4

08080a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8080a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8080a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8080a04:	d3f9      	bcc.n	80809fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8080a06:	4a0b      	ldr	r2, [pc, #44]	; (8080a34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8080a08:	4c0b      	ldr	r4, [pc, #44]	; (8080a38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8080a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8080a0c:	e001      	b.n	8080a12 <LoopFillZerobss>

08080a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8080a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8080a10:	3204      	adds	r2, #4

08080a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8080a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8080a14:	d3fb      	bcc.n	8080a0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8080a16:	f7ff ff3b 	bl	8080890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8080a1a:	f001 fe83 	bl	8082724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8080a1e:	f7ff fd9f 	bl	8080560 <main>
  bx  lr    
 8080a22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8080a24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8080a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8080a2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8080a30:	080831c4 	.word	0x080831c4
  ldr r2, =_sbss
 8080a34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8080a38:	200000f0 	.word	0x200000f0

08080a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8080a3c:	e7fe      	b.n	8080a3c <ADC_IRQHandler>
	...

08080a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8080a40:	b580      	push	{r7, lr}
 8080a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8080a44:	4b0e      	ldr	r3, [pc, #56]	; (8080a80 <HAL_Init+0x40>)
 8080a46:	681b      	ldr	r3, [r3, #0]
 8080a48:	4a0d      	ldr	r2, [pc, #52]	; (8080a80 <HAL_Init+0x40>)
 8080a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8080a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8080a50:	4b0b      	ldr	r3, [pc, #44]	; (8080a80 <HAL_Init+0x40>)
 8080a52:	681b      	ldr	r3, [r3, #0]
 8080a54:	4a0a      	ldr	r2, [pc, #40]	; (8080a80 <HAL_Init+0x40>)
 8080a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8080a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8080a5c:	4b08      	ldr	r3, [pc, #32]	; (8080a80 <HAL_Init+0x40>)
 8080a5e:	681b      	ldr	r3, [r3, #0]
 8080a60:	4a07      	ldr	r2, [pc, #28]	; (8080a80 <HAL_Init+0x40>)
 8080a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8080a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8080a68:	2003      	movs	r0, #3
 8080a6a:	f000 f94f 	bl	8080d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8080a6e:	200f      	movs	r0, #15
 8080a70:	f000 f808 	bl	8080a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8080a74:	f7ff fe0c 	bl	8080690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8080a78:	2300      	movs	r3, #0
}
 8080a7a:	4618      	mov	r0, r3
 8080a7c:	bd80      	pop	{r7, pc}
 8080a7e:	bf00      	nop
 8080a80:	40023c00 	.word	0x40023c00

08080a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8080a84:	b580      	push	{r7, lr}
 8080a86:	b082      	sub	sp, #8
 8080a88:	af00      	add	r7, sp, #0
 8080a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8080a8c:	4b12      	ldr	r3, [pc, #72]	; (8080ad8 <HAL_InitTick+0x54>)
 8080a8e:	681a      	ldr	r2, [r3, #0]
 8080a90:	4b12      	ldr	r3, [pc, #72]	; (8080adc <HAL_InitTick+0x58>)
 8080a92:	781b      	ldrb	r3, [r3, #0]
 8080a94:	4619      	mov	r1, r3
 8080a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8080a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8080aa2:	4618      	mov	r0, r3
 8080aa4:	f000 f967 	bl	8080d76 <HAL_SYSTICK_Config>
 8080aa8:	4603      	mov	r3, r0
 8080aaa:	2b00      	cmp	r3, #0
 8080aac:	d001      	beq.n	8080ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8080aae:	2301      	movs	r3, #1
 8080ab0:	e00e      	b.n	8080ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8080ab2:	687b      	ldr	r3, [r7, #4]
 8080ab4:	2b0f      	cmp	r3, #15
 8080ab6:	d80a      	bhi.n	8080ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8080ab8:	2200      	movs	r2, #0
 8080aba:	6879      	ldr	r1, [r7, #4]
 8080abc:	f04f 30ff 	mov.w	r0, #4294967295
 8080ac0:	f000 f92f 	bl	8080d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8080ac4:	4a06      	ldr	r2, [pc, #24]	; (8080ae0 <HAL_InitTick+0x5c>)
 8080ac6:	687b      	ldr	r3, [r7, #4]
 8080ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8080aca:	2300      	movs	r3, #0
 8080acc:	e000      	b.n	8080ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8080ace:	2301      	movs	r3, #1
}
 8080ad0:	4618      	mov	r0, r3
 8080ad2:	3708      	adds	r7, #8
 8080ad4:	46bd      	mov	sp, r7
 8080ad6:	bd80      	pop	{r7, pc}
 8080ad8:	20000000 	.word	0x20000000
 8080adc:	20000008 	.word	0x20000008
 8080ae0:	20000004 	.word	0x20000004

08080ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8080ae4:	b480      	push	{r7}
 8080ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8080ae8:	4b06      	ldr	r3, [pc, #24]	; (8080b04 <HAL_IncTick+0x20>)
 8080aea:	781b      	ldrb	r3, [r3, #0]
 8080aec:	461a      	mov	r2, r3
 8080aee:	4b06      	ldr	r3, [pc, #24]	; (8080b08 <HAL_IncTick+0x24>)
 8080af0:	681b      	ldr	r3, [r3, #0]
 8080af2:	4413      	add	r3, r2
 8080af4:	4a04      	ldr	r2, [pc, #16]	; (8080b08 <HAL_IncTick+0x24>)
 8080af6:	6013      	str	r3, [r2, #0]
}
 8080af8:	bf00      	nop
 8080afa:	46bd      	mov	sp, r7
 8080afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080b00:	4770      	bx	lr
 8080b02:	bf00      	nop
 8080b04:	20000008 	.word	0x20000008
 8080b08:	200000dc 	.word	0x200000dc

08080b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8080b0c:	b480      	push	{r7}
 8080b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8080b10:	4b03      	ldr	r3, [pc, #12]	; (8080b20 <HAL_GetTick+0x14>)
 8080b12:	681b      	ldr	r3, [r3, #0]
}
 8080b14:	4618      	mov	r0, r3
 8080b16:	46bd      	mov	sp, r7
 8080b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080b1c:	4770      	bx	lr
 8080b1e:	bf00      	nop
 8080b20:	200000dc 	.word	0x200000dc

08080b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8080b24:	b580      	push	{r7, lr}
 8080b26:	b084      	sub	sp, #16
 8080b28:	af00      	add	r7, sp, #0
 8080b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8080b2c:	f7ff ffee 	bl	8080b0c <HAL_GetTick>
 8080b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8080b32:	687b      	ldr	r3, [r7, #4]
 8080b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8080b36:	68fb      	ldr	r3, [r7, #12]
 8080b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8080b3c:	d005      	beq.n	8080b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8080b3e:	4b0a      	ldr	r3, [pc, #40]	; (8080b68 <HAL_Delay+0x44>)
 8080b40:	781b      	ldrb	r3, [r3, #0]
 8080b42:	461a      	mov	r2, r3
 8080b44:	68fb      	ldr	r3, [r7, #12]
 8080b46:	4413      	add	r3, r2
 8080b48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8080b4a:	bf00      	nop
 8080b4c:	f7ff ffde 	bl	8080b0c <HAL_GetTick>
 8080b50:	4602      	mov	r2, r0
 8080b52:	68bb      	ldr	r3, [r7, #8]
 8080b54:	1ad3      	subs	r3, r2, r3
 8080b56:	68fa      	ldr	r2, [r7, #12]
 8080b58:	429a      	cmp	r2, r3
 8080b5a:	d8f7      	bhi.n	8080b4c <HAL_Delay+0x28>
  {
  }
}
 8080b5c:	bf00      	nop
 8080b5e:	bf00      	nop
 8080b60:	3710      	adds	r7, #16
 8080b62:	46bd      	mov	sp, r7
 8080b64:	bd80      	pop	{r7, pc}
 8080b66:	bf00      	nop
 8080b68:	20000008 	.word	0x20000008

08080b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8080b6c:	b480      	push	{r7}
 8080b6e:	b085      	sub	sp, #20
 8080b70:	af00      	add	r7, sp, #0
 8080b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8080b74:	687b      	ldr	r3, [r7, #4]
 8080b76:	f003 0307 	and.w	r3, r3, #7
 8080b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8080b7c:	4b0c      	ldr	r3, [pc, #48]	; (8080bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8080b7e:	68db      	ldr	r3, [r3, #12]
 8080b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8080b82:	68ba      	ldr	r2, [r7, #8]
 8080b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8080b88:	4013      	ands	r3, r2
 8080b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8080b8c:	68fb      	ldr	r3, [r7, #12]
 8080b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8080b90:	68bb      	ldr	r3, [r7, #8]
 8080b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8080b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8080b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8080b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8080b9e:	4a04      	ldr	r2, [pc, #16]	; (8080bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8080ba0:	68bb      	ldr	r3, [r7, #8]
 8080ba2:	60d3      	str	r3, [r2, #12]
}
 8080ba4:	bf00      	nop
 8080ba6:	3714      	adds	r7, #20
 8080ba8:	46bd      	mov	sp, r7
 8080baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080bae:	4770      	bx	lr
 8080bb0:	e000ed00 	.word	0xe000ed00

08080bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8080bb4:	b480      	push	{r7}
 8080bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8080bb8:	4b04      	ldr	r3, [pc, #16]	; (8080bcc <__NVIC_GetPriorityGrouping+0x18>)
 8080bba:	68db      	ldr	r3, [r3, #12]
 8080bbc:	0a1b      	lsrs	r3, r3, #8
 8080bbe:	f003 0307 	and.w	r3, r3, #7
}
 8080bc2:	4618      	mov	r0, r3
 8080bc4:	46bd      	mov	sp, r7
 8080bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080bca:	4770      	bx	lr
 8080bcc:	e000ed00 	.word	0xe000ed00

08080bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8080bd0:	b480      	push	{r7}
 8080bd2:	b083      	sub	sp, #12
 8080bd4:	af00      	add	r7, sp, #0
 8080bd6:	4603      	mov	r3, r0
 8080bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8080bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8080bde:	2b00      	cmp	r3, #0
 8080be0:	db0b      	blt.n	8080bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8080be2:	79fb      	ldrb	r3, [r7, #7]
 8080be4:	f003 021f 	and.w	r2, r3, #31
 8080be8:	4907      	ldr	r1, [pc, #28]	; (8080c08 <__NVIC_EnableIRQ+0x38>)
 8080bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8080bee:	095b      	lsrs	r3, r3, #5
 8080bf0:	2001      	movs	r0, #1
 8080bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8080bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8080bfa:	bf00      	nop
 8080bfc:	370c      	adds	r7, #12
 8080bfe:	46bd      	mov	sp, r7
 8080c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080c04:	4770      	bx	lr
 8080c06:	bf00      	nop
 8080c08:	e000e100 	.word	0xe000e100

08080c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8080c0c:	b480      	push	{r7}
 8080c0e:	b083      	sub	sp, #12
 8080c10:	af00      	add	r7, sp, #0
 8080c12:	4603      	mov	r3, r0
 8080c14:	6039      	str	r1, [r7, #0]
 8080c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8080c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8080c1c:	2b00      	cmp	r3, #0
 8080c1e:	db0a      	blt.n	8080c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8080c20:	683b      	ldr	r3, [r7, #0]
 8080c22:	b2da      	uxtb	r2, r3
 8080c24:	490c      	ldr	r1, [pc, #48]	; (8080c58 <__NVIC_SetPriority+0x4c>)
 8080c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8080c2a:	0112      	lsls	r2, r2, #4
 8080c2c:	b2d2      	uxtb	r2, r2
 8080c2e:	440b      	add	r3, r1
 8080c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8080c34:	e00a      	b.n	8080c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8080c36:	683b      	ldr	r3, [r7, #0]
 8080c38:	b2da      	uxtb	r2, r3
 8080c3a:	4908      	ldr	r1, [pc, #32]	; (8080c5c <__NVIC_SetPriority+0x50>)
 8080c3c:	79fb      	ldrb	r3, [r7, #7]
 8080c3e:	f003 030f 	and.w	r3, r3, #15
 8080c42:	3b04      	subs	r3, #4
 8080c44:	0112      	lsls	r2, r2, #4
 8080c46:	b2d2      	uxtb	r2, r2
 8080c48:	440b      	add	r3, r1
 8080c4a:	761a      	strb	r2, [r3, #24]
}
 8080c4c:	bf00      	nop
 8080c4e:	370c      	adds	r7, #12
 8080c50:	46bd      	mov	sp, r7
 8080c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080c56:	4770      	bx	lr
 8080c58:	e000e100 	.word	0xe000e100
 8080c5c:	e000ed00 	.word	0xe000ed00

08080c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8080c60:	b480      	push	{r7}
 8080c62:	b089      	sub	sp, #36	; 0x24
 8080c64:	af00      	add	r7, sp, #0
 8080c66:	60f8      	str	r0, [r7, #12]
 8080c68:	60b9      	str	r1, [r7, #8]
 8080c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8080c6c:	68fb      	ldr	r3, [r7, #12]
 8080c6e:	f003 0307 	and.w	r3, r3, #7
 8080c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8080c74:	69fb      	ldr	r3, [r7, #28]
 8080c76:	f1c3 0307 	rsb	r3, r3, #7
 8080c7a:	2b04      	cmp	r3, #4
 8080c7c:	bf28      	it	cs
 8080c7e:	2304      	movcs	r3, #4
 8080c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8080c82:	69fb      	ldr	r3, [r7, #28]
 8080c84:	3304      	adds	r3, #4
 8080c86:	2b06      	cmp	r3, #6
 8080c88:	d902      	bls.n	8080c90 <NVIC_EncodePriority+0x30>
 8080c8a:	69fb      	ldr	r3, [r7, #28]
 8080c8c:	3b03      	subs	r3, #3
 8080c8e:	e000      	b.n	8080c92 <NVIC_EncodePriority+0x32>
 8080c90:	2300      	movs	r3, #0
 8080c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8080c94:	f04f 32ff 	mov.w	r2, #4294967295
 8080c98:	69bb      	ldr	r3, [r7, #24]
 8080c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8080c9e:	43da      	mvns	r2, r3
 8080ca0:	68bb      	ldr	r3, [r7, #8]
 8080ca2:	401a      	ands	r2, r3
 8080ca4:	697b      	ldr	r3, [r7, #20]
 8080ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8080ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8080cac:	697b      	ldr	r3, [r7, #20]
 8080cae:	fa01 f303 	lsl.w	r3, r1, r3
 8080cb2:	43d9      	mvns	r1, r3
 8080cb4:	687b      	ldr	r3, [r7, #4]
 8080cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8080cb8:	4313      	orrs	r3, r2
         );
}
 8080cba:	4618      	mov	r0, r3
 8080cbc:	3724      	adds	r7, #36	; 0x24
 8080cbe:	46bd      	mov	sp, r7
 8080cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080cc4:	4770      	bx	lr
	...

08080cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8080cc8:	b580      	push	{r7, lr}
 8080cca:	b082      	sub	sp, #8
 8080ccc:	af00      	add	r7, sp, #0
 8080cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8080cd0:	687b      	ldr	r3, [r7, #4]
 8080cd2:	3b01      	subs	r3, #1
 8080cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8080cd8:	d301      	bcc.n	8080cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8080cda:	2301      	movs	r3, #1
 8080cdc:	e00f      	b.n	8080cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8080cde:	4a0a      	ldr	r2, [pc, #40]	; (8080d08 <SysTick_Config+0x40>)
 8080ce0:	687b      	ldr	r3, [r7, #4]
 8080ce2:	3b01      	subs	r3, #1
 8080ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8080ce6:	210f      	movs	r1, #15
 8080ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8080cec:	f7ff ff8e 	bl	8080c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8080cf0:	4b05      	ldr	r3, [pc, #20]	; (8080d08 <SysTick_Config+0x40>)
 8080cf2:	2200      	movs	r2, #0
 8080cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8080cf6:	4b04      	ldr	r3, [pc, #16]	; (8080d08 <SysTick_Config+0x40>)
 8080cf8:	2207      	movs	r2, #7
 8080cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8080cfc:	2300      	movs	r3, #0
}
 8080cfe:	4618      	mov	r0, r3
 8080d00:	3708      	adds	r7, #8
 8080d02:	46bd      	mov	sp, r7
 8080d04:	bd80      	pop	{r7, pc}
 8080d06:	bf00      	nop
 8080d08:	e000e010 	.word	0xe000e010

08080d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8080d0c:	b580      	push	{r7, lr}
 8080d0e:	b082      	sub	sp, #8
 8080d10:	af00      	add	r7, sp, #0
 8080d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8080d14:	6878      	ldr	r0, [r7, #4]
 8080d16:	f7ff ff29 	bl	8080b6c <__NVIC_SetPriorityGrouping>
}
 8080d1a:	bf00      	nop
 8080d1c:	3708      	adds	r7, #8
 8080d1e:	46bd      	mov	sp, r7
 8080d20:	bd80      	pop	{r7, pc}

08080d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8080d22:	b580      	push	{r7, lr}
 8080d24:	b086      	sub	sp, #24
 8080d26:	af00      	add	r7, sp, #0
 8080d28:	4603      	mov	r3, r0
 8080d2a:	60b9      	str	r1, [r7, #8]
 8080d2c:	607a      	str	r2, [r7, #4]
 8080d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8080d30:	2300      	movs	r3, #0
 8080d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8080d34:	f7ff ff3e 	bl	8080bb4 <__NVIC_GetPriorityGrouping>
 8080d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8080d3a:	687a      	ldr	r2, [r7, #4]
 8080d3c:	68b9      	ldr	r1, [r7, #8]
 8080d3e:	6978      	ldr	r0, [r7, #20]
 8080d40:	f7ff ff8e 	bl	8080c60 <NVIC_EncodePriority>
 8080d44:	4602      	mov	r2, r0
 8080d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8080d4a:	4611      	mov	r1, r2
 8080d4c:	4618      	mov	r0, r3
 8080d4e:	f7ff ff5d 	bl	8080c0c <__NVIC_SetPriority>
}
 8080d52:	bf00      	nop
 8080d54:	3718      	adds	r7, #24
 8080d56:	46bd      	mov	sp, r7
 8080d58:	bd80      	pop	{r7, pc}

08080d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8080d5a:	b580      	push	{r7, lr}
 8080d5c:	b082      	sub	sp, #8
 8080d5e:	af00      	add	r7, sp, #0
 8080d60:	4603      	mov	r3, r0
 8080d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8080d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8080d68:	4618      	mov	r0, r3
 8080d6a:	f7ff ff31 	bl	8080bd0 <__NVIC_EnableIRQ>
}
 8080d6e:	bf00      	nop
 8080d70:	3708      	adds	r7, #8
 8080d72:	46bd      	mov	sp, r7
 8080d74:	bd80      	pop	{r7, pc}

08080d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8080d76:	b580      	push	{r7, lr}
 8080d78:	b082      	sub	sp, #8
 8080d7a:	af00      	add	r7, sp, #0
 8080d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8080d7e:	6878      	ldr	r0, [r7, #4]
 8080d80:	f7ff ffa2 	bl	8080cc8 <SysTick_Config>
 8080d84:	4603      	mov	r3, r0
}
 8080d86:	4618      	mov	r0, r3
 8080d88:	3708      	adds	r7, #8
 8080d8a:	46bd      	mov	sp, r7
 8080d8c:	bd80      	pop	{r7, pc}

08080d8e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8080d8e:	b580      	push	{r7, lr}
 8080d90:	b084      	sub	sp, #16
 8080d92:	af00      	add	r7, sp, #0
 8080d94:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8080d96:	687b      	ldr	r3, [r7, #4]
 8080d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080d9a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8080d9c:	f7ff feb6 	bl	8080b0c <HAL_GetTick>
 8080da0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8080da2:	687b      	ldr	r3, [r7, #4]
 8080da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8080da8:	b2db      	uxtb	r3, r3
 8080daa:	2b02      	cmp	r3, #2
 8080dac:	d008      	beq.n	8080dc0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8080dae:	687b      	ldr	r3, [r7, #4]
 8080db0:	2280      	movs	r2, #128	; 0x80
 8080db2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8080db4:	687b      	ldr	r3, [r7, #4]
 8080db6:	2200      	movs	r2, #0
 8080db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8080dbc:	2301      	movs	r3, #1
 8080dbe:	e052      	b.n	8080e66 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8080dc0:	687b      	ldr	r3, [r7, #4]
 8080dc2:	681b      	ldr	r3, [r3, #0]
 8080dc4:	681a      	ldr	r2, [r3, #0]
 8080dc6:	687b      	ldr	r3, [r7, #4]
 8080dc8:	681b      	ldr	r3, [r3, #0]
 8080dca:	f022 0216 	bic.w	r2, r2, #22
 8080dce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8080dd0:	687b      	ldr	r3, [r7, #4]
 8080dd2:	681b      	ldr	r3, [r3, #0]
 8080dd4:	695a      	ldr	r2, [r3, #20]
 8080dd6:	687b      	ldr	r3, [r7, #4]
 8080dd8:	681b      	ldr	r3, [r3, #0]
 8080dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8080dde:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8080de0:	687b      	ldr	r3, [r7, #4]
 8080de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080de4:	2b00      	cmp	r3, #0
 8080de6:	d103      	bne.n	8080df0 <HAL_DMA_Abort+0x62>
 8080de8:	687b      	ldr	r3, [r7, #4]
 8080dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8080dec:	2b00      	cmp	r3, #0
 8080dee:	d007      	beq.n	8080e00 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8080df0:	687b      	ldr	r3, [r7, #4]
 8080df2:	681b      	ldr	r3, [r3, #0]
 8080df4:	681a      	ldr	r2, [r3, #0]
 8080df6:	687b      	ldr	r3, [r7, #4]
 8080df8:	681b      	ldr	r3, [r3, #0]
 8080dfa:	f022 0208 	bic.w	r2, r2, #8
 8080dfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8080e00:	687b      	ldr	r3, [r7, #4]
 8080e02:	681b      	ldr	r3, [r3, #0]
 8080e04:	681a      	ldr	r2, [r3, #0]
 8080e06:	687b      	ldr	r3, [r7, #4]
 8080e08:	681b      	ldr	r3, [r3, #0]
 8080e0a:	f022 0201 	bic.w	r2, r2, #1
 8080e0e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8080e10:	e013      	b.n	8080e3a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8080e12:	f7ff fe7b 	bl	8080b0c <HAL_GetTick>
 8080e16:	4602      	mov	r2, r0
 8080e18:	68bb      	ldr	r3, [r7, #8]
 8080e1a:	1ad3      	subs	r3, r2, r3
 8080e1c:	2b05      	cmp	r3, #5
 8080e1e:	d90c      	bls.n	8080e3a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8080e20:	687b      	ldr	r3, [r7, #4]
 8080e22:	2220      	movs	r2, #32
 8080e24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8080e26:	687b      	ldr	r3, [r7, #4]
 8080e28:	2200      	movs	r2, #0
 8080e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8080e2e:	687b      	ldr	r3, [r7, #4]
 8080e30:	2203      	movs	r2, #3
 8080e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8080e36:	2303      	movs	r3, #3
 8080e38:	e015      	b.n	8080e66 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8080e3a:	687b      	ldr	r3, [r7, #4]
 8080e3c:	681b      	ldr	r3, [r3, #0]
 8080e3e:	681b      	ldr	r3, [r3, #0]
 8080e40:	f003 0301 	and.w	r3, r3, #1
 8080e44:	2b00      	cmp	r3, #0
 8080e46:	d1e4      	bne.n	8080e12 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8080e48:	687b      	ldr	r3, [r7, #4]
 8080e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8080e4c:	223f      	movs	r2, #63	; 0x3f
 8080e4e:	409a      	lsls	r2, r3
 8080e50:	68fb      	ldr	r3, [r7, #12]
 8080e52:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8080e54:	687b      	ldr	r3, [r7, #4]
 8080e56:	2200      	movs	r2, #0
 8080e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8080e5c:	687b      	ldr	r3, [r7, #4]
 8080e5e:	2201      	movs	r2, #1
 8080e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8080e64:	2300      	movs	r3, #0
}
 8080e66:	4618      	mov	r0, r3
 8080e68:	3710      	adds	r7, #16
 8080e6a:	46bd      	mov	sp, r7
 8080e6c:	bd80      	pop	{r7, pc}

08080e6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8080e6e:	b480      	push	{r7}
 8080e70:	b083      	sub	sp, #12
 8080e72:	af00      	add	r7, sp, #0
 8080e74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8080e76:	687b      	ldr	r3, [r7, #4]
 8080e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8080e7c:	b2db      	uxtb	r3, r3
 8080e7e:	2b02      	cmp	r3, #2
 8080e80:	d004      	beq.n	8080e8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8080e82:	687b      	ldr	r3, [r7, #4]
 8080e84:	2280      	movs	r2, #128	; 0x80
 8080e86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8080e88:	2301      	movs	r3, #1
 8080e8a:	e00c      	b.n	8080ea6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8080e8c:	687b      	ldr	r3, [r7, #4]
 8080e8e:	2205      	movs	r2, #5
 8080e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8080e94:	687b      	ldr	r3, [r7, #4]
 8080e96:	681b      	ldr	r3, [r3, #0]
 8080e98:	681a      	ldr	r2, [r3, #0]
 8080e9a:	687b      	ldr	r3, [r7, #4]
 8080e9c:	681b      	ldr	r3, [r3, #0]
 8080e9e:	f022 0201 	bic.w	r2, r2, #1
 8080ea2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8080ea4:	2300      	movs	r3, #0
}
 8080ea6:	4618      	mov	r0, r3
 8080ea8:	370c      	adds	r7, #12
 8080eaa:	46bd      	mov	sp, r7
 8080eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080eb0:	4770      	bx	lr
	...

08080eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8080eb4:	b480      	push	{r7}
 8080eb6:	b089      	sub	sp, #36	; 0x24
 8080eb8:	af00      	add	r7, sp, #0
 8080eba:	6078      	str	r0, [r7, #4]
 8080ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8080ebe:	2300      	movs	r3, #0
 8080ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8080ec2:	2300      	movs	r3, #0
 8080ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8080ec6:	2300      	movs	r3, #0
 8080ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8080eca:	2300      	movs	r3, #0
 8080ecc:	61fb      	str	r3, [r7, #28]
 8080ece:	e16b      	b.n	80811a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8080ed0:	2201      	movs	r2, #1
 8080ed2:	69fb      	ldr	r3, [r7, #28]
 8080ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8080ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8080eda:	683b      	ldr	r3, [r7, #0]
 8080edc:	681b      	ldr	r3, [r3, #0]
 8080ede:	697a      	ldr	r2, [r7, #20]
 8080ee0:	4013      	ands	r3, r2
 8080ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8080ee4:	693a      	ldr	r2, [r7, #16]
 8080ee6:	697b      	ldr	r3, [r7, #20]
 8080ee8:	429a      	cmp	r2, r3
 8080eea:	f040 815a 	bne.w	80811a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8080eee:	683b      	ldr	r3, [r7, #0]
 8080ef0:	685b      	ldr	r3, [r3, #4]
 8080ef2:	f003 0303 	and.w	r3, r3, #3
 8080ef6:	2b01      	cmp	r3, #1
 8080ef8:	d005      	beq.n	8080f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8080efa:	683b      	ldr	r3, [r7, #0]
 8080efc:	685b      	ldr	r3, [r3, #4]
 8080efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8080f02:	2b02      	cmp	r3, #2
 8080f04:	d130      	bne.n	8080f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8080f06:	687b      	ldr	r3, [r7, #4]
 8080f08:	689b      	ldr	r3, [r3, #8]
 8080f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8080f0c:	69fb      	ldr	r3, [r7, #28]
 8080f0e:	005b      	lsls	r3, r3, #1
 8080f10:	2203      	movs	r2, #3
 8080f12:	fa02 f303 	lsl.w	r3, r2, r3
 8080f16:	43db      	mvns	r3, r3
 8080f18:	69ba      	ldr	r2, [r7, #24]
 8080f1a:	4013      	ands	r3, r2
 8080f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8080f1e:	683b      	ldr	r3, [r7, #0]
 8080f20:	68da      	ldr	r2, [r3, #12]
 8080f22:	69fb      	ldr	r3, [r7, #28]
 8080f24:	005b      	lsls	r3, r3, #1
 8080f26:	fa02 f303 	lsl.w	r3, r2, r3
 8080f2a:	69ba      	ldr	r2, [r7, #24]
 8080f2c:	4313      	orrs	r3, r2
 8080f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8080f30:	687b      	ldr	r3, [r7, #4]
 8080f32:	69ba      	ldr	r2, [r7, #24]
 8080f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8080f36:	687b      	ldr	r3, [r7, #4]
 8080f38:	685b      	ldr	r3, [r3, #4]
 8080f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8080f3c:	2201      	movs	r2, #1
 8080f3e:	69fb      	ldr	r3, [r7, #28]
 8080f40:	fa02 f303 	lsl.w	r3, r2, r3
 8080f44:	43db      	mvns	r3, r3
 8080f46:	69ba      	ldr	r2, [r7, #24]
 8080f48:	4013      	ands	r3, r2
 8080f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8080f4c:	683b      	ldr	r3, [r7, #0]
 8080f4e:	685b      	ldr	r3, [r3, #4]
 8080f50:	091b      	lsrs	r3, r3, #4
 8080f52:	f003 0201 	and.w	r2, r3, #1
 8080f56:	69fb      	ldr	r3, [r7, #28]
 8080f58:	fa02 f303 	lsl.w	r3, r2, r3
 8080f5c:	69ba      	ldr	r2, [r7, #24]
 8080f5e:	4313      	orrs	r3, r2
 8080f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8080f62:	687b      	ldr	r3, [r7, #4]
 8080f64:	69ba      	ldr	r2, [r7, #24]
 8080f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8080f68:	683b      	ldr	r3, [r7, #0]
 8080f6a:	685b      	ldr	r3, [r3, #4]
 8080f6c:	f003 0303 	and.w	r3, r3, #3
 8080f70:	2b03      	cmp	r3, #3
 8080f72:	d017      	beq.n	8080fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8080f74:	687b      	ldr	r3, [r7, #4]
 8080f76:	68db      	ldr	r3, [r3, #12]
 8080f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8080f7a:	69fb      	ldr	r3, [r7, #28]
 8080f7c:	005b      	lsls	r3, r3, #1
 8080f7e:	2203      	movs	r2, #3
 8080f80:	fa02 f303 	lsl.w	r3, r2, r3
 8080f84:	43db      	mvns	r3, r3
 8080f86:	69ba      	ldr	r2, [r7, #24]
 8080f88:	4013      	ands	r3, r2
 8080f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8080f8c:	683b      	ldr	r3, [r7, #0]
 8080f8e:	689a      	ldr	r2, [r3, #8]
 8080f90:	69fb      	ldr	r3, [r7, #28]
 8080f92:	005b      	lsls	r3, r3, #1
 8080f94:	fa02 f303 	lsl.w	r3, r2, r3
 8080f98:	69ba      	ldr	r2, [r7, #24]
 8080f9a:	4313      	orrs	r3, r2
 8080f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8080f9e:	687b      	ldr	r3, [r7, #4]
 8080fa0:	69ba      	ldr	r2, [r7, #24]
 8080fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8080fa4:	683b      	ldr	r3, [r7, #0]
 8080fa6:	685b      	ldr	r3, [r3, #4]
 8080fa8:	f003 0303 	and.w	r3, r3, #3
 8080fac:	2b02      	cmp	r3, #2
 8080fae:	d123      	bne.n	8080ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8080fb0:	69fb      	ldr	r3, [r7, #28]
 8080fb2:	08da      	lsrs	r2, r3, #3
 8080fb4:	687b      	ldr	r3, [r7, #4]
 8080fb6:	3208      	adds	r2, #8
 8080fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8080fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8080fbe:	69fb      	ldr	r3, [r7, #28]
 8080fc0:	f003 0307 	and.w	r3, r3, #7
 8080fc4:	009b      	lsls	r3, r3, #2
 8080fc6:	220f      	movs	r2, #15
 8080fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8080fcc:	43db      	mvns	r3, r3
 8080fce:	69ba      	ldr	r2, [r7, #24]
 8080fd0:	4013      	ands	r3, r2
 8080fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8080fd4:	683b      	ldr	r3, [r7, #0]
 8080fd6:	691a      	ldr	r2, [r3, #16]
 8080fd8:	69fb      	ldr	r3, [r7, #28]
 8080fda:	f003 0307 	and.w	r3, r3, #7
 8080fde:	009b      	lsls	r3, r3, #2
 8080fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8080fe4:	69ba      	ldr	r2, [r7, #24]
 8080fe6:	4313      	orrs	r3, r2
 8080fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8080fea:	69fb      	ldr	r3, [r7, #28]
 8080fec:	08da      	lsrs	r2, r3, #3
 8080fee:	687b      	ldr	r3, [r7, #4]
 8080ff0:	3208      	adds	r2, #8
 8080ff2:	69b9      	ldr	r1, [r7, #24]
 8080ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8080ff8:	687b      	ldr	r3, [r7, #4]
 8080ffa:	681b      	ldr	r3, [r3, #0]
 8080ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8080ffe:	69fb      	ldr	r3, [r7, #28]
 8081000:	005b      	lsls	r3, r3, #1
 8081002:	2203      	movs	r2, #3
 8081004:	fa02 f303 	lsl.w	r3, r2, r3
 8081008:	43db      	mvns	r3, r3
 808100a:	69ba      	ldr	r2, [r7, #24]
 808100c:	4013      	ands	r3, r2
 808100e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8081010:	683b      	ldr	r3, [r7, #0]
 8081012:	685b      	ldr	r3, [r3, #4]
 8081014:	f003 0203 	and.w	r2, r3, #3
 8081018:	69fb      	ldr	r3, [r7, #28]
 808101a:	005b      	lsls	r3, r3, #1
 808101c:	fa02 f303 	lsl.w	r3, r2, r3
 8081020:	69ba      	ldr	r2, [r7, #24]
 8081022:	4313      	orrs	r3, r2
 8081024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8081026:	687b      	ldr	r3, [r7, #4]
 8081028:	69ba      	ldr	r2, [r7, #24]
 808102a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 808102c:	683b      	ldr	r3, [r7, #0]
 808102e:	685b      	ldr	r3, [r3, #4]
 8081030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8081034:	2b00      	cmp	r3, #0
 8081036:	f000 80b4 	beq.w	80811a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 808103a:	2300      	movs	r3, #0
 808103c:	60fb      	str	r3, [r7, #12]
 808103e:	4b60      	ldr	r3, [pc, #384]	; (80811c0 <HAL_GPIO_Init+0x30c>)
 8081040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081042:	4a5f      	ldr	r2, [pc, #380]	; (80811c0 <HAL_GPIO_Init+0x30c>)
 8081044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8081048:	6453      	str	r3, [r2, #68]	; 0x44
 808104a:	4b5d      	ldr	r3, [pc, #372]	; (80811c0 <HAL_GPIO_Init+0x30c>)
 808104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8081052:	60fb      	str	r3, [r7, #12]
 8081054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8081056:	4a5b      	ldr	r2, [pc, #364]	; (80811c4 <HAL_GPIO_Init+0x310>)
 8081058:	69fb      	ldr	r3, [r7, #28]
 808105a:	089b      	lsrs	r3, r3, #2
 808105c:	3302      	adds	r3, #2
 808105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8081062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8081064:	69fb      	ldr	r3, [r7, #28]
 8081066:	f003 0303 	and.w	r3, r3, #3
 808106a:	009b      	lsls	r3, r3, #2
 808106c:	220f      	movs	r2, #15
 808106e:	fa02 f303 	lsl.w	r3, r2, r3
 8081072:	43db      	mvns	r3, r3
 8081074:	69ba      	ldr	r2, [r7, #24]
 8081076:	4013      	ands	r3, r2
 8081078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 808107a:	687b      	ldr	r3, [r7, #4]
 808107c:	4a52      	ldr	r2, [pc, #328]	; (80811c8 <HAL_GPIO_Init+0x314>)
 808107e:	4293      	cmp	r3, r2
 8081080:	d02b      	beq.n	80810da <HAL_GPIO_Init+0x226>
 8081082:	687b      	ldr	r3, [r7, #4]
 8081084:	4a51      	ldr	r2, [pc, #324]	; (80811cc <HAL_GPIO_Init+0x318>)
 8081086:	4293      	cmp	r3, r2
 8081088:	d025      	beq.n	80810d6 <HAL_GPIO_Init+0x222>
 808108a:	687b      	ldr	r3, [r7, #4]
 808108c:	4a50      	ldr	r2, [pc, #320]	; (80811d0 <HAL_GPIO_Init+0x31c>)
 808108e:	4293      	cmp	r3, r2
 8081090:	d01f      	beq.n	80810d2 <HAL_GPIO_Init+0x21e>
 8081092:	687b      	ldr	r3, [r7, #4]
 8081094:	4a4f      	ldr	r2, [pc, #316]	; (80811d4 <HAL_GPIO_Init+0x320>)
 8081096:	4293      	cmp	r3, r2
 8081098:	d019      	beq.n	80810ce <HAL_GPIO_Init+0x21a>
 808109a:	687b      	ldr	r3, [r7, #4]
 808109c:	4a4e      	ldr	r2, [pc, #312]	; (80811d8 <HAL_GPIO_Init+0x324>)
 808109e:	4293      	cmp	r3, r2
 80810a0:	d013      	beq.n	80810ca <HAL_GPIO_Init+0x216>
 80810a2:	687b      	ldr	r3, [r7, #4]
 80810a4:	4a4d      	ldr	r2, [pc, #308]	; (80811dc <HAL_GPIO_Init+0x328>)
 80810a6:	4293      	cmp	r3, r2
 80810a8:	d00d      	beq.n	80810c6 <HAL_GPIO_Init+0x212>
 80810aa:	687b      	ldr	r3, [r7, #4]
 80810ac:	4a4c      	ldr	r2, [pc, #304]	; (80811e0 <HAL_GPIO_Init+0x32c>)
 80810ae:	4293      	cmp	r3, r2
 80810b0:	d007      	beq.n	80810c2 <HAL_GPIO_Init+0x20e>
 80810b2:	687b      	ldr	r3, [r7, #4]
 80810b4:	4a4b      	ldr	r2, [pc, #300]	; (80811e4 <HAL_GPIO_Init+0x330>)
 80810b6:	4293      	cmp	r3, r2
 80810b8:	d101      	bne.n	80810be <HAL_GPIO_Init+0x20a>
 80810ba:	2307      	movs	r3, #7
 80810bc:	e00e      	b.n	80810dc <HAL_GPIO_Init+0x228>
 80810be:	2308      	movs	r3, #8
 80810c0:	e00c      	b.n	80810dc <HAL_GPIO_Init+0x228>
 80810c2:	2306      	movs	r3, #6
 80810c4:	e00a      	b.n	80810dc <HAL_GPIO_Init+0x228>
 80810c6:	2305      	movs	r3, #5
 80810c8:	e008      	b.n	80810dc <HAL_GPIO_Init+0x228>
 80810ca:	2304      	movs	r3, #4
 80810cc:	e006      	b.n	80810dc <HAL_GPIO_Init+0x228>
 80810ce:	2303      	movs	r3, #3
 80810d0:	e004      	b.n	80810dc <HAL_GPIO_Init+0x228>
 80810d2:	2302      	movs	r3, #2
 80810d4:	e002      	b.n	80810dc <HAL_GPIO_Init+0x228>
 80810d6:	2301      	movs	r3, #1
 80810d8:	e000      	b.n	80810dc <HAL_GPIO_Init+0x228>
 80810da:	2300      	movs	r3, #0
 80810dc:	69fa      	ldr	r2, [r7, #28]
 80810de:	f002 0203 	and.w	r2, r2, #3
 80810e2:	0092      	lsls	r2, r2, #2
 80810e4:	4093      	lsls	r3, r2
 80810e6:	69ba      	ldr	r2, [r7, #24]
 80810e8:	4313      	orrs	r3, r2
 80810ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80810ec:	4935      	ldr	r1, [pc, #212]	; (80811c4 <HAL_GPIO_Init+0x310>)
 80810ee:	69fb      	ldr	r3, [r7, #28]
 80810f0:	089b      	lsrs	r3, r3, #2
 80810f2:	3302      	adds	r3, #2
 80810f4:	69ba      	ldr	r2, [r7, #24]
 80810f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80810fa:	4b3b      	ldr	r3, [pc, #236]	; (80811e8 <HAL_GPIO_Init+0x334>)
 80810fc:	681b      	ldr	r3, [r3, #0]
 80810fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8081100:	693b      	ldr	r3, [r7, #16]
 8081102:	43db      	mvns	r3, r3
 8081104:	69ba      	ldr	r2, [r7, #24]
 8081106:	4013      	ands	r3, r2
 8081108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 808110a:	683b      	ldr	r3, [r7, #0]
 808110c:	685b      	ldr	r3, [r3, #4]
 808110e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8081112:	2b00      	cmp	r3, #0
 8081114:	d003      	beq.n	808111e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8081116:	69ba      	ldr	r2, [r7, #24]
 8081118:	693b      	ldr	r3, [r7, #16]
 808111a:	4313      	orrs	r3, r2
 808111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 808111e:	4a32      	ldr	r2, [pc, #200]	; (80811e8 <HAL_GPIO_Init+0x334>)
 8081120:	69bb      	ldr	r3, [r7, #24]
 8081122:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8081124:	4b30      	ldr	r3, [pc, #192]	; (80811e8 <HAL_GPIO_Init+0x334>)
 8081126:	685b      	ldr	r3, [r3, #4]
 8081128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 808112a:	693b      	ldr	r3, [r7, #16]
 808112c:	43db      	mvns	r3, r3
 808112e:	69ba      	ldr	r2, [r7, #24]
 8081130:	4013      	ands	r3, r2
 8081132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8081134:	683b      	ldr	r3, [r7, #0]
 8081136:	685b      	ldr	r3, [r3, #4]
 8081138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 808113c:	2b00      	cmp	r3, #0
 808113e:	d003      	beq.n	8081148 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8081140:	69ba      	ldr	r2, [r7, #24]
 8081142:	693b      	ldr	r3, [r7, #16]
 8081144:	4313      	orrs	r3, r2
 8081146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8081148:	4a27      	ldr	r2, [pc, #156]	; (80811e8 <HAL_GPIO_Init+0x334>)
 808114a:	69bb      	ldr	r3, [r7, #24]
 808114c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 808114e:	4b26      	ldr	r3, [pc, #152]	; (80811e8 <HAL_GPIO_Init+0x334>)
 8081150:	689b      	ldr	r3, [r3, #8]
 8081152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8081154:	693b      	ldr	r3, [r7, #16]
 8081156:	43db      	mvns	r3, r3
 8081158:	69ba      	ldr	r2, [r7, #24]
 808115a:	4013      	ands	r3, r2
 808115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 808115e:	683b      	ldr	r3, [r7, #0]
 8081160:	685b      	ldr	r3, [r3, #4]
 8081162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8081166:	2b00      	cmp	r3, #0
 8081168:	d003      	beq.n	8081172 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 808116a:	69ba      	ldr	r2, [r7, #24]
 808116c:	693b      	ldr	r3, [r7, #16]
 808116e:	4313      	orrs	r3, r2
 8081170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8081172:	4a1d      	ldr	r2, [pc, #116]	; (80811e8 <HAL_GPIO_Init+0x334>)
 8081174:	69bb      	ldr	r3, [r7, #24]
 8081176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8081178:	4b1b      	ldr	r3, [pc, #108]	; (80811e8 <HAL_GPIO_Init+0x334>)
 808117a:	68db      	ldr	r3, [r3, #12]
 808117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 808117e:	693b      	ldr	r3, [r7, #16]
 8081180:	43db      	mvns	r3, r3
 8081182:	69ba      	ldr	r2, [r7, #24]
 8081184:	4013      	ands	r3, r2
 8081186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8081188:	683b      	ldr	r3, [r7, #0]
 808118a:	685b      	ldr	r3, [r3, #4]
 808118c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8081190:	2b00      	cmp	r3, #0
 8081192:	d003      	beq.n	808119c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8081194:	69ba      	ldr	r2, [r7, #24]
 8081196:	693b      	ldr	r3, [r7, #16]
 8081198:	4313      	orrs	r3, r2
 808119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 808119c:	4a12      	ldr	r2, [pc, #72]	; (80811e8 <HAL_GPIO_Init+0x334>)
 808119e:	69bb      	ldr	r3, [r7, #24]
 80811a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80811a2:	69fb      	ldr	r3, [r7, #28]
 80811a4:	3301      	adds	r3, #1
 80811a6:	61fb      	str	r3, [r7, #28]
 80811a8:	69fb      	ldr	r3, [r7, #28]
 80811aa:	2b0f      	cmp	r3, #15
 80811ac:	f67f ae90 	bls.w	8080ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80811b0:	bf00      	nop
 80811b2:	bf00      	nop
 80811b4:	3724      	adds	r7, #36	; 0x24
 80811b6:	46bd      	mov	sp, r7
 80811b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80811bc:	4770      	bx	lr
 80811be:	bf00      	nop
 80811c0:	40023800 	.word	0x40023800
 80811c4:	40013800 	.word	0x40013800
 80811c8:	40020000 	.word	0x40020000
 80811cc:	40020400 	.word	0x40020400
 80811d0:	40020800 	.word	0x40020800
 80811d4:	40020c00 	.word	0x40020c00
 80811d8:	40021000 	.word	0x40021000
 80811dc:	40021400 	.word	0x40021400
 80811e0:	40021800 	.word	0x40021800
 80811e4:	40021c00 	.word	0x40021c00
 80811e8:	40013c00 	.word	0x40013c00

080811ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80811ec:	b480      	push	{r7}
 80811ee:	b083      	sub	sp, #12
 80811f0:	af00      	add	r7, sp, #0
 80811f2:	6078      	str	r0, [r7, #4]
 80811f4:	460b      	mov	r3, r1
 80811f6:	807b      	strh	r3, [r7, #2]
 80811f8:	4613      	mov	r3, r2
 80811fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80811fc:	787b      	ldrb	r3, [r7, #1]
 80811fe:	2b00      	cmp	r3, #0
 8081200:	d003      	beq.n	808120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8081202:	887a      	ldrh	r2, [r7, #2]
 8081204:	687b      	ldr	r3, [r7, #4]
 8081206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8081208:	e003      	b.n	8081212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 808120a:	887b      	ldrh	r3, [r7, #2]
 808120c:	041a      	lsls	r2, r3, #16
 808120e:	687b      	ldr	r3, [r7, #4]
 8081210:	619a      	str	r2, [r3, #24]
}
 8081212:	bf00      	nop
 8081214:	370c      	adds	r7, #12
 8081216:	46bd      	mov	sp, r7
 8081218:	f85d 7b04 	ldr.w	r7, [sp], #4
 808121c:	4770      	bx	lr
	...

08081220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8081220:	b580      	push	{r7, lr}
 8081222:	b086      	sub	sp, #24
 8081224:	af00      	add	r7, sp, #0
 8081226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8081228:	687b      	ldr	r3, [r7, #4]
 808122a:	2b00      	cmp	r3, #0
 808122c:	d101      	bne.n	8081232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 808122e:	2301      	movs	r3, #1
 8081230:	e264      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8081232:	687b      	ldr	r3, [r7, #4]
 8081234:	681b      	ldr	r3, [r3, #0]
 8081236:	f003 0301 	and.w	r3, r3, #1
 808123a:	2b00      	cmp	r3, #0
 808123c:	d075      	beq.n	808132a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 808123e:	4ba3      	ldr	r3, [pc, #652]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081240:	689b      	ldr	r3, [r3, #8]
 8081242:	f003 030c 	and.w	r3, r3, #12
 8081246:	2b04      	cmp	r3, #4
 8081248:	d00c      	beq.n	8081264 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 808124a:	4ba0      	ldr	r3, [pc, #640]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 808124c:	689b      	ldr	r3, [r3, #8]
 808124e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8081252:	2b08      	cmp	r3, #8
 8081254:	d112      	bne.n	808127c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8081256:	4b9d      	ldr	r3, [pc, #628]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081258:	685b      	ldr	r3, [r3, #4]
 808125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808125e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8081262:	d10b      	bne.n	808127c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8081264:	4b99      	ldr	r3, [pc, #612]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081266:	681b      	ldr	r3, [r3, #0]
 8081268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 808126c:	2b00      	cmp	r3, #0
 808126e:	d05b      	beq.n	8081328 <HAL_RCC_OscConfig+0x108>
 8081270:	687b      	ldr	r3, [r7, #4]
 8081272:	685b      	ldr	r3, [r3, #4]
 8081274:	2b00      	cmp	r3, #0
 8081276:	d157      	bne.n	8081328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8081278:	2301      	movs	r3, #1
 808127a:	e23f      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 808127c:	687b      	ldr	r3, [r7, #4]
 808127e:	685b      	ldr	r3, [r3, #4]
 8081280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8081284:	d106      	bne.n	8081294 <HAL_RCC_OscConfig+0x74>
 8081286:	4b91      	ldr	r3, [pc, #580]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081288:	681b      	ldr	r3, [r3, #0]
 808128a:	4a90      	ldr	r2, [pc, #576]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 808128c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8081290:	6013      	str	r3, [r2, #0]
 8081292:	e01d      	b.n	80812d0 <HAL_RCC_OscConfig+0xb0>
 8081294:	687b      	ldr	r3, [r7, #4]
 8081296:	685b      	ldr	r3, [r3, #4]
 8081298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 808129c:	d10c      	bne.n	80812b8 <HAL_RCC_OscConfig+0x98>
 808129e:	4b8b      	ldr	r3, [pc, #556]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 80812a0:	681b      	ldr	r3, [r3, #0]
 80812a2:	4a8a      	ldr	r2, [pc, #552]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 80812a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80812a8:	6013      	str	r3, [r2, #0]
 80812aa:	4b88      	ldr	r3, [pc, #544]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 80812ac:	681b      	ldr	r3, [r3, #0]
 80812ae:	4a87      	ldr	r2, [pc, #540]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 80812b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80812b4:	6013      	str	r3, [r2, #0]
 80812b6:	e00b      	b.n	80812d0 <HAL_RCC_OscConfig+0xb0>
 80812b8:	4b84      	ldr	r3, [pc, #528]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 80812ba:	681b      	ldr	r3, [r3, #0]
 80812bc:	4a83      	ldr	r2, [pc, #524]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 80812be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80812c2:	6013      	str	r3, [r2, #0]
 80812c4:	4b81      	ldr	r3, [pc, #516]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 80812c6:	681b      	ldr	r3, [r3, #0]
 80812c8:	4a80      	ldr	r2, [pc, #512]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 80812ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80812ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80812d0:	687b      	ldr	r3, [r7, #4]
 80812d2:	685b      	ldr	r3, [r3, #4]
 80812d4:	2b00      	cmp	r3, #0
 80812d6:	d013      	beq.n	8081300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80812d8:	f7ff fc18 	bl	8080b0c <HAL_GetTick>
 80812dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80812de:	e008      	b.n	80812f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80812e0:	f7ff fc14 	bl	8080b0c <HAL_GetTick>
 80812e4:	4602      	mov	r2, r0
 80812e6:	693b      	ldr	r3, [r7, #16]
 80812e8:	1ad3      	subs	r3, r2, r3
 80812ea:	2b64      	cmp	r3, #100	; 0x64
 80812ec:	d901      	bls.n	80812f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80812ee:	2303      	movs	r3, #3
 80812f0:	e204      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80812f2:	4b76      	ldr	r3, [pc, #472]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 80812f4:	681b      	ldr	r3, [r3, #0]
 80812f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80812fa:	2b00      	cmp	r3, #0
 80812fc:	d0f0      	beq.n	80812e0 <HAL_RCC_OscConfig+0xc0>
 80812fe:	e014      	b.n	808132a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8081300:	f7ff fc04 	bl	8080b0c <HAL_GetTick>
 8081304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8081306:	e008      	b.n	808131a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8081308:	f7ff fc00 	bl	8080b0c <HAL_GetTick>
 808130c:	4602      	mov	r2, r0
 808130e:	693b      	ldr	r3, [r7, #16]
 8081310:	1ad3      	subs	r3, r2, r3
 8081312:	2b64      	cmp	r3, #100	; 0x64
 8081314:	d901      	bls.n	808131a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8081316:	2303      	movs	r3, #3
 8081318:	e1f0      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 808131a:	4b6c      	ldr	r3, [pc, #432]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 808131c:	681b      	ldr	r3, [r3, #0]
 808131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8081322:	2b00      	cmp	r3, #0
 8081324:	d1f0      	bne.n	8081308 <HAL_RCC_OscConfig+0xe8>
 8081326:	e000      	b.n	808132a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8081328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 808132a:	687b      	ldr	r3, [r7, #4]
 808132c:	681b      	ldr	r3, [r3, #0]
 808132e:	f003 0302 	and.w	r3, r3, #2
 8081332:	2b00      	cmp	r3, #0
 8081334:	d063      	beq.n	80813fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8081336:	4b65      	ldr	r3, [pc, #404]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081338:	689b      	ldr	r3, [r3, #8]
 808133a:	f003 030c 	and.w	r3, r3, #12
 808133e:	2b00      	cmp	r3, #0
 8081340:	d00b      	beq.n	808135a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8081342:	4b62      	ldr	r3, [pc, #392]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081344:	689b      	ldr	r3, [r3, #8]
 8081346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 808134a:	2b08      	cmp	r3, #8
 808134c:	d11c      	bne.n	8081388 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 808134e:	4b5f      	ldr	r3, [pc, #380]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081350:	685b      	ldr	r3, [r3, #4]
 8081352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8081356:	2b00      	cmp	r3, #0
 8081358:	d116      	bne.n	8081388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 808135a:	4b5c      	ldr	r3, [pc, #368]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 808135c:	681b      	ldr	r3, [r3, #0]
 808135e:	f003 0302 	and.w	r3, r3, #2
 8081362:	2b00      	cmp	r3, #0
 8081364:	d005      	beq.n	8081372 <HAL_RCC_OscConfig+0x152>
 8081366:	687b      	ldr	r3, [r7, #4]
 8081368:	68db      	ldr	r3, [r3, #12]
 808136a:	2b01      	cmp	r3, #1
 808136c:	d001      	beq.n	8081372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 808136e:	2301      	movs	r3, #1
 8081370:	e1c4      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8081372:	4b56      	ldr	r3, [pc, #344]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081374:	681b      	ldr	r3, [r3, #0]
 8081376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 808137a:	687b      	ldr	r3, [r7, #4]
 808137c:	691b      	ldr	r3, [r3, #16]
 808137e:	00db      	lsls	r3, r3, #3
 8081380:	4952      	ldr	r1, [pc, #328]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081382:	4313      	orrs	r3, r2
 8081384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8081386:	e03a      	b.n	80813fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8081388:	687b      	ldr	r3, [r7, #4]
 808138a:	68db      	ldr	r3, [r3, #12]
 808138c:	2b00      	cmp	r3, #0
 808138e:	d020      	beq.n	80813d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8081390:	4b4f      	ldr	r3, [pc, #316]	; (80814d0 <HAL_RCC_OscConfig+0x2b0>)
 8081392:	2201      	movs	r2, #1
 8081394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8081396:	f7ff fbb9 	bl	8080b0c <HAL_GetTick>
 808139a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 808139c:	e008      	b.n	80813b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 808139e:	f7ff fbb5 	bl	8080b0c <HAL_GetTick>
 80813a2:	4602      	mov	r2, r0
 80813a4:	693b      	ldr	r3, [r7, #16]
 80813a6:	1ad3      	subs	r3, r2, r3
 80813a8:	2b02      	cmp	r3, #2
 80813aa:	d901      	bls.n	80813b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80813ac:	2303      	movs	r3, #3
 80813ae:	e1a5      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80813b0:	4b46      	ldr	r3, [pc, #280]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 80813b2:	681b      	ldr	r3, [r3, #0]
 80813b4:	f003 0302 	and.w	r3, r3, #2
 80813b8:	2b00      	cmp	r3, #0
 80813ba:	d0f0      	beq.n	808139e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80813bc:	4b43      	ldr	r3, [pc, #268]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 80813be:	681b      	ldr	r3, [r3, #0]
 80813c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80813c4:	687b      	ldr	r3, [r7, #4]
 80813c6:	691b      	ldr	r3, [r3, #16]
 80813c8:	00db      	lsls	r3, r3, #3
 80813ca:	4940      	ldr	r1, [pc, #256]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 80813cc:	4313      	orrs	r3, r2
 80813ce:	600b      	str	r3, [r1, #0]
 80813d0:	e015      	b.n	80813fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80813d2:	4b3f      	ldr	r3, [pc, #252]	; (80814d0 <HAL_RCC_OscConfig+0x2b0>)
 80813d4:	2200      	movs	r2, #0
 80813d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80813d8:	f7ff fb98 	bl	8080b0c <HAL_GetTick>
 80813dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80813de:	e008      	b.n	80813f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80813e0:	f7ff fb94 	bl	8080b0c <HAL_GetTick>
 80813e4:	4602      	mov	r2, r0
 80813e6:	693b      	ldr	r3, [r7, #16]
 80813e8:	1ad3      	subs	r3, r2, r3
 80813ea:	2b02      	cmp	r3, #2
 80813ec:	d901      	bls.n	80813f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80813ee:	2303      	movs	r3, #3
 80813f0:	e184      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80813f2:	4b36      	ldr	r3, [pc, #216]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 80813f4:	681b      	ldr	r3, [r3, #0]
 80813f6:	f003 0302 	and.w	r3, r3, #2
 80813fa:	2b00      	cmp	r3, #0
 80813fc:	d1f0      	bne.n	80813e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80813fe:	687b      	ldr	r3, [r7, #4]
 8081400:	681b      	ldr	r3, [r3, #0]
 8081402:	f003 0308 	and.w	r3, r3, #8
 8081406:	2b00      	cmp	r3, #0
 8081408:	d030      	beq.n	808146c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 808140a:	687b      	ldr	r3, [r7, #4]
 808140c:	695b      	ldr	r3, [r3, #20]
 808140e:	2b00      	cmp	r3, #0
 8081410:	d016      	beq.n	8081440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8081412:	4b30      	ldr	r3, [pc, #192]	; (80814d4 <HAL_RCC_OscConfig+0x2b4>)
 8081414:	2201      	movs	r2, #1
 8081416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8081418:	f7ff fb78 	bl	8080b0c <HAL_GetTick>
 808141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 808141e:	e008      	b.n	8081432 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8081420:	f7ff fb74 	bl	8080b0c <HAL_GetTick>
 8081424:	4602      	mov	r2, r0
 8081426:	693b      	ldr	r3, [r7, #16]
 8081428:	1ad3      	subs	r3, r2, r3
 808142a:	2b02      	cmp	r3, #2
 808142c:	d901      	bls.n	8081432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 808142e:	2303      	movs	r3, #3
 8081430:	e164      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8081432:	4b26      	ldr	r3, [pc, #152]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8081436:	f003 0302 	and.w	r3, r3, #2
 808143a:	2b00      	cmp	r3, #0
 808143c:	d0f0      	beq.n	8081420 <HAL_RCC_OscConfig+0x200>
 808143e:	e015      	b.n	808146c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8081440:	4b24      	ldr	r3, [pc, #144]	; (80814d4 <HAL_RCC_OscConfig+0x2b4>)
 8081442:	2200      	movs	r2, #0
 8081444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8081446:	f7ff fb61 	bl	8080b0c <HAL_GetTick>
 808144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 808144c:	e008      	b.n	8081460 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 808144e:	f7ff fb5d 	bl	8080b0c <HAL_GetTick>
 8081452:	4602      	mov	r2, r0
 8081454:	693b      	ldr	r3, [r7, #16]
 8081456:	1ad3      	subs	r3, r2, r3
 8081458:	2b02      	cmp	r3, #2
 808145a:	d901      	bls.n	8081460 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 808145c:	2303      	movs	r3, #3
 808145e:	e14d      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8081460:	4b1a      	ldr	r3, [pc, #104]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8081464:	f003 0302 	and.w	r3, r3, #2
 8081468:	2b00      	cmp	r3, #0
 808146a:	d1f0      	bne.n	808144e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 808146c:	687b      	ldr	r3, [r7, #4]
 808146e:	681b      	ldr	r3, [r3, #0]
 8081470:	f003 0304 	and.w	r3, r3, #4
 8081474:	2b00      	cmp	r3, #0
 8081476:	f000 80a0 	beq.w	80815ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 808147a:	2300      	movs	r3, #0
 808147c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 808147e:	4b13      	ldr	r3, [pc, #76]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8081486:	2b00      	cmp	r3, #0
 8081488:	d10f      	bne.n	80814aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 808148a:	2300      	movs	r3, #0
 808148c:	60bb      	str	r3, [r7, #8]
 808148e:	4b0f      	ldr	r3, [pc, #60]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081492:	4a0e      	ldr	r2, [pc, #56]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 8081494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8081498:	6413      	str	r3, [r2, #64]	; 0x40
 808149a:	4b0c      	ldr	r3, [pc, #48]	; (80814cc <HAL_RCC_OscConfig+0x2ac>)
 808149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80814a2:	60bb      	str	r3, [r7, #8]
 80814a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80814a6:	2301      	movs	r3, #1
 80814a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80814aa:	4b0b      	ldr	r3, [pc, #44]	; (80814d8 <HAL_RCC_OscConfig+0x2b8>)
 80814ac:	681b      	ldr	r3, [r3, #0]
 80814ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80814b2:	2b00      	cmp	r3, #0
 80814b4:	d121      	bne.n	80814fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80814b6:	4b08      	ldr	r3, [pc, #32]	; (80814d8 <HAL_RCC_OscConfig+0x2b8>)
 80814b8:	681b      	ldr	r3, [r3, #0]
 80814ba:	4a07      	ldr	r2, [pc, #28]	; (80814d8 <HAL_RCC_OscConfig+0x2b8>)
 80814bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80814c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80814c2:	f7ff fb23 	bl	8080b0c <HAL_GetTick>
 80814c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80814c8:	e011      	b.n	80814ee <HAL_RCC_OscConfig+0x2ce>
 80814ca:	bf00      	nop
 80814cc:	40023800 	.word	0x40023800
 80814d0:	42470000 	.word	0x42470000
 80814d4:	42470e80 	.word	0x42470e80
 80814d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80814dc:	f7ff fb16 	bl	8080b0c <HAL_GetTick>
 80814e0:	4602      	mov	r2, r0
 80814e2:	693b      	ldr	r3, [r7, #16]
 80814e4:	1ad3      	subs	r3, r2, r3
 80814e6:	2b02      	cmp	r3, #2
 80814e8:	d901      	bls.n	80814ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80814ea:	2303      	movs	r3, #3
 80814ec:	e106      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80814ee:	4b85      	ldr	r3, [pc, #532]	; (8081704 <HAL_RCC_OscConfig+0x4e4>)
 80814f0:	681b      	ldr	r3, [r3, #0]
 80814f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80814f6:	2b00      	cmp	r3, #0
 80814f8:	d0f0      	beq.n	80814dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80814fa:	687b      	ldr	r3, [r7, #4]
 80814fc:	689b      	ldr	r3, [r3, #8]
 80814fe:	2b01      	cmp	r3, #1
 8081500:	d106      	bne.n	8081510 <HAL_RCC_OscConfig+0x2f0>
 8081502:	4b81      	ldr	r3, [pc, #516]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 8081504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8081506:	4a80      	ldr	r2, [pc, #512]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 8081508:	f043 0301 	orr.w	r3, r3, #1
 808150c:	6713      	str	r3, [r2, #112]	; 0x70
 808150e:	e01c      	b.n	808154a <HAL_RCC_OscConfig+0x32a>
 8081510:	687b      	ldr	r3, [r7, #4]
 8081512:	689b      	ldr	r3, [r3, #8]
 8081514:	2b05      	cmp	r3, #5
 8081516:	d10c      	bne.n	8081532 <HAL_RCC_OscConfig+0x312>
 8081518:	4b7b      	ldr	r3, [pc, #492]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 808151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808151c:	4a7a      	ldr	r2, [pc, #488]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 808151e:	f043 0304 	orr.w	r3, r3, #4
 8081522:	6713      	str	r3, [r2, #112]	; 0x70
 8081524:	4b78      	ldr	r3, [pc, #480]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 8081526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8081528:	4a77      	ldr	r2, [pc, #476]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 808152a:	f043 0301 	orr.w	r3, r3, #1
 808152e:	6713      	str	r3, [r2, #112]	; 0x70
 8081530:	e00b      	b.n	808154a <HAL_RCC_OscConfig+0x32a>
 8081532:	4b75      	ldr	r3, [pc, #468]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 8081534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8081536:	4a74      	ldr	r2, [pc, #464]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 8081538:	f023 0301 	bic.w	r3, r3, #1
 808153c:	6713      	str	r3, [r2, #112]	; 0x70
 808153e:	4b72      	ldr	r3, [pc, #456]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 8081540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8081542:	4a71      	ldr	r2, [pc, #452]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 8081544:	f023 0304 	bic.w	r3, r3, #4
 8081548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 808154a:	687b      	ldr	r3, [r7, #4]
 808154c:	689b      	ldr	r3, [r3, #8]
 808154e:	2b00      	cmp	r3, #0
 8081550:	d015      	beq.n	808157e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8081552:	f7ff fadb 	bl	8080b0c <HAL_GetTick>
 8081556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8081558:	e00a      	b.n	8081570 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 808155a:	f7ff fad7 	bl	8080b0c <HAL_GetTick>
 808155e:	4602      	mov	r2, r0
 8081560:	693b      	ldr	r3, [r7, #16]
 8081562:	1ad3      	subs	r3, r2, r3
 8081564:	f241 3288 	movw	r2, #5000	; 0x1388
 8081568:	4293      	cmp	r3, r2
 808156a:	d901      	bls.n	8081570 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 808156c:	2303      	movs	r3, #3
 808156e:	e0c5      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8081570:	4b65      	ldr	r3, [pc, #404]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 8081572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8081574:	f003 0302 	and.w	r3, r3, #2
 8081578:	2b00      	cmp	r3, #0
 808157a:	d0ee      	beq.n	808155a <HAL_RCC_OscConfig+0x33a>
 808157c:	e014      	b.n	80815a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 808157e:	f7ff fac5 	bl	8080b0c <HAL_GetTick>
 8081582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8081584:	e00a      	b.n	808159c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8081586:	f7ff fac1 	bl	8080b0c <HAL_GetTick>
 808158a:	4602      	mov	r2, r0
 808158c:	693b      	ldr	r3, [r7, #16]
 808158e:	1ad3      	subs	r3, r2, r3
 8081590:	f241 3288 	movw	r2, #5000	; 0x1388
 8081594:	4293      	cmp	r3, r2
 8081596:	d901      	bls.n	808159c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8081598:	2303      	movs	r3, #3
 808159a:	e0af      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 808159c:	4b5a      	ldr	r3, [pc, #360]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 808159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80815a0:	f003 0302 	and.w	r3, r3, #2
 80815a4:	2b00      	cmp	r3, #0
 80815a6:	d1ee      	bne.n	8081586 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80815a8:	7dfb      	ldrb	r3, [r7, #23]
 80815aa:	2b01      	cmp	r3, #1
 80815ac:	d105      	bne.n	80815ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80815ae:	4b56      	ldr	r3, [pc, #344]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 80815b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80815b2:	4a55      	ldr	r2, [pc, #340]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 80815b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80815b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80815ba:	687b      	ldr	r3, [r7, #4]
 80815bc:	699b      	ldr	r3, [r3, #24]
 80815be:	2b00      	cmp	r3, #0
 80815c0:	f000 809b 	beq.w	80816fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80815c4:	4b50      	ldr	r3, [pc, #320]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 80815c6:	689b      	ldr	r3, [r3, #8]
 80815c8:	f003 030c 	and.w	r3, r3, #12
 80815cc:	2b08      	cmp	r3, #8
 80815ce:	d05c      	beq.n	808168a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80815d0:	687b      	ldr	r3, [r7, #4]
 80815d2:	699b      	ldr	r3, [r3, #24]
 80815d4:	2b02      	cmp	r3, #2
 80815d6:	d141      	bne.n	808165c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80815d8:	4b4c      	ldr	r3, [pc, #304]	; (808170c <HAL_RCC_OscConfig+0x4ec>)
 80815da:	2200      	movs	r2, #0
 80815dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80815de:	f7ff fa95 	bl	8080b0c <HAL_GetTick>
 80815e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80815e4:	e008      	b.n	80815f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80815e6:	f7ff fa91 	bl	8080b0c <HAL_GetTick>
 80815ea:	4602      	mov	r2, r0
 80815ec:	693b      	ldr	r3, [r7, #16]
 80815ee:	1ad3      	subs	r3, r2, r3
 80815f0:	2b02      	cmp	r3, #2
 80815f2:	d901      	bls.n	80815f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80815f4:	2303      	movs	r3, #3
 80815f6:	e081      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80815f8:	4b43      	ldr	r3, [pc, #268]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 80815fa:	681b      	ldr	r3, [r3, #0]
 80815fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8081600:	2b00      	cmp	r3, #0
 8081602:	d1f0      	bne.n	80815e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8081604:	687b      	ldr	r3, [r7, #4]
 8081606:	69da      	ldr	r2, [r3, #28]
 8081608:	687b      	ldr	r3, [r7, #4]
 808160a:	6a1b      	ldr	r3, [r3, #32]
 808160c:	431a      	orrs	r2, r3
 808160e:	687b      	ldr	r3, [r7, #4]
 8081610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081612:	019b      	lsls	r3, r3, #6
 8081614:	431a      	orrs	r2, r3
 8081616:	687b      	ldr	r3, [r7, #4]
 8081618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808161a:	085b      	lsrs	r3, r3, #1
 808161c:	3b01      	subs	r3, #1
 808161e:	041b      	lsls	r3, r3, #16
 8081620:	431a      	orrs	r2, r3
 8081622:	687b      	ldr	r3, [r7, #4]
 8081624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081626:	061b      	lsls	r3, r3, #24
 8081628:	4937      	ldr	r1, [pc, #220]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 808162a:	4313      	orrs	r3, r2
 808162c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 808162e:	4b37      	ldr	r3, [pc, #220]	; (808170c <HAL_RCC_OscConfig+0x4ec>)
 8081630:	2201      	movs	r2, #1
 8081632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8081634:	f7ff fa6a 	bl	8080b0c <HAL_GetTick>
 8081638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 808163a:	e008      	b.n	808164e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 808163c:	f7ff fa66 	bl	8080b0c <HAL_GetTick>
 8081640:	4602      	mov	r2, r0
 8081642:	693b      	ldr	r3, [r7, #16]
 8081644:	1ad3      	subs	r3, r2, r3
 8081646:	2b02      	cmp	r3, #2
 8081648:	d901      	bls.n	808164e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 808164a:	2303      	movs	r3, #3
 808164c:	e056      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 808164e:	4b2e      	ldr	r3, [pc, #184]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 8081650:	681b      	ldr	r3, [r3, #0]
 8081652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8081656:	2b00      	cmp	r3, #0
 8081658:	d0f0      	beq.n	808163c <HAL_RCC_OscConfig+0x41c>
 808165a:	e04e      	b.n	80816fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 808165c:	4b2b      	ldr	r3, [pc, #172]	; (808170c <HAL_RCC_OscConfig+0x4ec>)
 808165e:	2200      	movs	r2, #0
 8081660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8081662:	f7ff fa53 	bl	8080b0c <HAL_GetTick>
 8081666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8081668:	e008      	b.n	808167c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 808166a:	f7ff fa4f 	bl	8080b0c <HAL_GetTick>
 808166e:	4602      	mov	r2, r0
 8081670:	693b      	ldr	r3, [r7, #16]
 8081672:	1ad3      	subs	r3, r2, r3
 8081674:	2b02      	cmp	r3, #2
 8081676:	d901      	bls.n	808167c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8081678:	2303      	movs	r3, #3
 808167a:	e03f      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 808167c:	4b22      	ldr	r3, [pc, #136]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 808167e:	681b      	ldr	r3, [r3, #0]
 8081680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8081684:	2b00      	cmp	r3, #0
 8081686:	d1f0      	bne.n	808166a <HAL_RCC_OscConfig+0x44a>
 8081688:	e037      	b.n	80816fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 808168a:	687b      	ldr	r3, [r7, #4]
 808168c:	699b      	ldr	r3, [r3, #24]
 808168e:	2b01      	cmp	r3, #1
 8081690:	d101      	bne.n	8081696 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8081692:	2301      	movs	r3, #1
 8081694:	e032      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8081696:	4b1c      	ldr	r3, [pc, #112]	; (8081708 <HAL_RCC_OscConfig+0x4e8>)
 8081698:	685b      	ldr	r3, [r3, #4]
 808169a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 808169c:	687b      	ldr	r3, [r7, #4]
 808169e:	699b      	ldr	r3, [r3, #24]
 80816a0:	2b01      	cmp	r3, #1
 80816a2:	d028      	beq.n	80816f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80816a4:	68fb      	ldr	r3, [r7, #12]
 80816a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80816aa:	687b      	ldr	r3, [r7, #4]
 80816ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80816ae:	429a      	cmp	r2, r3
 80816b0:	d121      	bne.n	80816f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80816b2:	68fb      	ldr	r3, [r7, #12]
 80816b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80816b8:	687b      	ldr	r3, [r7, #4]
 80816ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80816bc:	429a      	cmp	r2, r3
 80816be:	d11a      	bne.n	80816f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80816c0:	68fa      	ldr	r2, [r7, #12]
 80816c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80816c6:	4013      	ands	r3, r2
 80816c8:	687a      	ldr	r2, [r7, #4]
 80816ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80816cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80816ce:	4293      	cmp	r3, r2
 80816d0:	d111      	bne.n	80816f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80816d2:	68fb      	ldr	r3, [r7, #12]
 80816d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80816d8:	687b      	ldr	r3, [r7, #4]
 80816da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80816dc:	085b      	lsrs	r3, r3, #1
 80816de:	3b01      	subs	r3, #1
 80816e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80816e2:	429a      	cmp	r2, r3
 80816e4:	d107      	bne.n	80816f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80816e6:	68fb      	ldr	r3, [r7, #12]
 80816e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80816ec:	687b      	ldr	r3, [r7, #4]
 80816ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80816f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80816f2:	429a      	cmp	r2, r3
 80816f4:	d001      	beq.n	80816fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80816f6:	2301      	movs	r3, #1
 80816f8:	e000      	b.n	80816fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80816fa:	2300      	movs	r3, #0
}
 80816fc:	4618      	mov	r0, r3
 80816fe:	3718      	adds	r7, #24
 8081700:	46bd      	mov	sp, r7
 8081702:	bd80      	pop	{r7, pc}
 8081704:	40007000 	.word	0x40007000
 8081708:	40023800 	.word	0x40023800
 808170c:	42470060 	.word	0x42470060

08081710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8081710:	b580      	push	{r7, lr}
 8081712:	b084      	sub	sp, #16
 8081714:	af00      	add	r7, sp, #0
 8081716:	6078      	str	r0, [r7, #4]
 8081718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 808171a:	687b      	ldr	r3, [r7, #4]
 808171c:	2b00      	cmp	r3, #0
 808171e:	d101      	bne.n	8081724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8081720:	2301      	movs	r3, #1
 8081722:	e0cc      	b.n	80818be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8081724:	4b68      	ldr	r3, [pc, #416]	; (80818c8 <HAL_RCC_ClockConfig+0x1b8>)
 8081726:	681b      	ldr	r3, [r3, #0]
 8081728:	f003 0307 	and.w	r3, r3, #7
 808172c:	683a      	ldr	r2, [r7, #0]
 808172e:	429a      	cmp	r2, r3
 8081730:	d90c      	bls.n	808174c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8081732:	4b65      	ldr	r3, [pc, #404]	; (80818c8 <HAL_RCC_ClockConfig+0x1b8>)
 8081734:	683a      	ldr	r2, [r7, #0]
 8081736:	b2d2      	uxtb	r2, r2
 8081738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 808173a:	4b63      	ldr	r3, [pc, #396]	; (80818c8 <HAL_RCC_ClockConfig+0x1b8>)
 808173c:	681b      	ldr	r3, [r3, #0]
 808173e:	f003 0307 	and.w	r3, r3, #7
 8081742:	683a      	ldr	r2, [r7, #0]
 8081744:	429a      	cmp	r2, r3
 8081746:	d001      	beq.n	808174c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8081748:	2301      	movs	r3, #1
 808174a:	e0b8      	b.n	80818be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 808174c:	687b      	ldr	r3, [r7, #4]
 808174e:	681b      	ldr	r3, [r3, #0]
 8081750:	f003 0302 	and.w	r3, r3, #2
 8081754:	2b00      	cmp	r3, #0
 8081756:	d020      	beq.n	808179a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8081758:	687b      	ldr	r3, [r7, #4]
 808175a:	681b      	ldr	r3, [r3, #0]
 808175c:	f003 0304 	and.w	r3, r3, #4
 8081760:	2b00      	cmp	r3, #0
 8081762:	d005      	beq.n	8081770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8081764:	4b59      	ldr	r3, [pc, #356]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 8081766:	689b      	ldr	r3, [r3, #8]
 8081768:	4a58      	ldr	r2, [pc, #352]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 808176a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 808176e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8081770:	687b      	ldr	r3, [r7, #4]
 8081772:	681b      	ldr	r3, [r3, #0]
 8081774:	f003 0308 	and.w	r3, r3, #8
 8081778:	2b00      	cmp	r3, #0
 808177a:	d005      	beq.n	8081788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 808177c:	4b53      	ldr	r3, [pc, #332]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 808177e:	689b      	ldr	r3, [r3, #8]
 8081780:	4a52      	ldr	r2, [pc, #328]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 8081782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8081786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8081788:	4b50      	ldr	r3, [pc, #320]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 808178a:	689b      	ldr	r3, [r3, #8]
 808178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8081790:	687b      	ldr	r3, [r7, #4]
 8081792:	689b      	ldr	r3, [r3, #8]
 8081794:	494d      	ldr	r1, [pc, #308]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 8081796:	4313      	orrs	r3, r2
 8081798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 808179a:	687b      	ldr	r3, [r7, #4]
 808179c:	681b      	ldr	r3, [r3, #0]
 808179e:	f003 0301 	and.w	r3, r3, #1
 80817a2:	2b00      	cmp	r3, #0
 80817a4:	d044      	beq.n	8081830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80817a6:	687b      	ldr	r3, [r7, #4]
 80817a8:	685b      	ldr	r3, [r3, #4]
 80817aa:	2b01      	cmp	r3, #1
 80817ac:	d107      	bne.n	80817be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80817ae:	4b47      	ldr	r3, [pc, #284]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 80817b0:	681b      	ldr	r3, [r3, #0]
 80817b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80817b6:	2b00      	cmp	r3, #0
 80817b8:	d119      	bne.n	80817ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80817ba:	2301      	movs	r3, #1
 80817bc:	e07f      	b.n	80818be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80817be:	687b      	ldr	r3, [r7, #4]
 80817c0:	685b      	ldr	r3, [r3, #4]
 80817c2:	2b02      	cmp	r3, #2
 80817c4:	d003      	beq.n	80817ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80817c6:	687b      	ldr	r3, [r7, #4]
 80817c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80817ca:	2b03      	cmp	r3, #3
 80817cc:	d107      	bne.n	80817de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80817ce:	4b3f      	ldr	r3, [pc, #252]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 80817d0:	681b      	ldr	r3, [r3, #0]
 80817d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80817d6:	2b00      	cmp	r3, #0
 80817d8:	d109      	bne.n	80817ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80817da:	2301      	movs	r3, #1
 80817dc:	e06f      	b.n	80818be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80817de:	4b3b      	ldr	r3, [pc, #236]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 80817e0:	681b      	ldr	r3, [r3, #0]
 80817e2:	f003 0302 	and.w	r3, r3, #2
 80817e6:	2b00      	cmp	r3, #0
 80817e8:	d101      	bne.n	80817ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80817ea:	2301      	movs	r3, #1
 80817ec:	e067      	b.n	80818be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80817ee:	4b37      	ldr	r3, [pc, #220]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 80817f0:	689b      	ldr	r3, [r3, #8]
 80817f2:	f023 0203 	bic.w	r2, r3, #3
 80817f6:	687b      	ldr	r3, [r7, #4]
 80817f8:	685b      	ldr	r3, [r3, #4]
 80817fa:	4934      	ldr	r1, [pc, #208]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 80817fc:	4313      	orrs	r3, r2
 80817fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8081800:	f7ff f984 	bl	8080b0c <HAL_GetTick>
 8081804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8081806:	e00a      	b.n	808181e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8081808:	f7ff f980 	bl	8080b0c <HAL_GetTick>
 808180c:	4602      	mov	r2, r0
 808180e:	68fb      	ldr	r3, [r7, #12]
 8081810:	1ad3      	subs	r3, r2, r3
 8081812:	f241 3288 	movw	r2, #5000	; 0x1388
 8081816:	4293      	cmp	r3, r2
 8081818:	d901      	bls.n	808181e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 808181a:	2303      	movs	r3, #3
 808181c:	e04f      	b.n	80818be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 808181e:	4b2b      	ldr	r3, [pc, #172]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 8081820:	689b      	ldr	r3, [r3, #8]
 8081822:	f003 020c 	and.w	r2, r3, #12
 8081826:	687b      	ldr	r3, [r7, #4]
 8081828:	685b      	ldr	r3, [r3, #4]
 808182a:	009b      	lsls	r3, r3, #2
 808182c:	429a      	cmp	r2, r3
 808182e:	d1eb      	bne.n	8081808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8081830:	4b25      	ldr	r3, [pc, #148]	; (80818c8 <HAL_RCC_ClockConfig+0x1b8>)
 8081832:	681b      	ldr	r3, [r3, #0]
 8081834:	f003 0307 	and.w	r3, r3, #7
 8081838:	683a      	ldr	r2, [r7, #0]
 808183a:	429a      	cmp	r2, r3
 808183c:	d20c      	bcs.n	8081858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 808183e:	4b22      	ldr	r3, [pc, #136]	; (80818c8 <HAL_RCC_ClockConfig+0x1b8>)
 8081840:	683a      	ldr	r2, [r7, #0]
 8081842:	b2d2      	uxtb	r2, r2
 8081844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8081846:	4b20      	ldr	r3, [pc, #128]	; (80818c8 <HAL_RCC_ClockConfig+0x1b8>)
 8081848:	681b      	ldr	r3, [r3, #0]
 808184a:	f003 0307 	and.w	r3, r3, #7
 808184e:	683a      	ldr	r2, [r7, #0]
 8081850:	429a      	cmp	r2, r3
 8081852:	d001      	beq.n	8081858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8081854:	2301      	movs	r3, #1
 8081856:	e032      	b.n	80818be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8081858:	687b      	ldr	r3, [r7, #4]
 808185a:	681b      	ldr	r3, [r3, #0]
 808185c:	f003 0304 	and.w	r3, r3, #4
 8081860:	2b00      	cmp	r3, #0
 8081862:	d008      	beq.n	8081876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8081864:	4b19      	ldr	r3, [pc, #100]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 8081866:	689b      	ldr	r3, [r3, #8]
 8081868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 808186c:	687b      	ldr	r3, [r7, #4]
 808186e:	68db      	ldr	r3, [r3, #12]
 8081870:	4916      	ldr	r1, [pc, #88]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 8081872:	4313      	orrs	r3, r2
 8081874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8081876:	687b      	ldr	r3, [r7, #4]
 8081878:	681b      	ldr	r3, [r3, #0]
 808187a:	f003 0308 	and.w	r3, r3, #8
 808187e:	2b00      	cmp	r3, #0
 8081880:	d009      	beq.n	8081896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8081882:	4b12      	ldr	r3, [pc, #72]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 8081884:	689b      	ldr	r3, [r3, #8]
 8081886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 808188a:	687b      	ldr	r3, [r7, #4]
 808188c:	691b      	ldr	r3, [r3, #16]
 808188e:	00db      	lsls	r3, r3, #3
 8081890:	490e      	ldr	r1, [pc, #56]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 8081892:	4313      	orrs	r3, r2
 8081894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8081896:	f000 f821 	bl	80818dc <HAL_RCC_GetSysClockFreq>
 808189a:	4602      	mov	r2, r0
 808189c:	4b0b      	ldr	r3, [pc, #44]	; (80818cc <HAL_RCC_ClockConfig+0x1bc>)
 808189e:	689b      	ldr	r3, [r3, #8]
 80818a0:	091b      	lsrs	r3, r3, #4
 80818a2:	f003 030f 	and.w	r3, r3, #15
 80818a6:	490a      	ldr	r1, [pc, #40]	; (80818d0 <HAL_RCC_ClockConfig+0x1c0>)
 80818a8:	5ccb      	ldrb	r3, [r1, r3]
 80818aa:	fa22 f303 	lsr.w	r3, r2, r3
 80818ae:	4a09      	ldr	r2, [pc, #36]	; (80818d4 <HAL_RCC_ClockConfig+0x1c4>)
 80818b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80818b2:	4b09      	ldr	r3, [pc, #36]	; (80818d8 <HAL_RCC_ClockConfig+0x1c8>)
 80818b4:	681b      	ldr	r3, [r3, #0]
 80818b6:	4618      	mov	r0, r3
 80818b8:	f7ff f8e4 	bl	8080a84 <HAL_InitTick>

  return HAL_OK;
 80818bc:	2300      	movs	r3, #0
}
 80818be:	4618      	mov	r0, r3
 80818c0:	3710      	adds	r7, #16
 80818c2:	46bd      	mov	sp, r7
 80818c4:	bd80      	pop	{r7, pc}
 80818c6:	bf00      	nop
 80818c8:	40023c00 	.word	0x40023c00
 80818cc:	40023800 	.word	0x40023800
 80818d0:	08083138 	.word	0x08083138
 80818d4:	20000000 	.word	0x20000000
 80818d8:	20000004 	.word	0x20000004

080818dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80818dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80818e0:	b084      	sub	sp, #16
 80818e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80818e4:	2300      	movs	r3, #0
 80818e6:	607b      	str	r3, [r7, #4]
 80818e8:	2300      	movs	r3, #0
 80818ea:	60fb      	str	r3, [r7, #12]
 80818ec:	2300      	movs	r3, #0
 80818ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80818f0:	2300      	movs	r3, #0
 80818f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80818f4:	4b67      	ldr	r3, [pc, #412]	; (8081a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80818f6:	689b      	ldr	r3, [r3, #8]
 80818f8:	f003 030c 	and.w	r3, r3, #12
 80818fc:	2b08      	cmp	r3, #8
 80818fe:	d00d      	beq.n	808191c <HAL_RCC_GetSysClockFreq+0x40>
 8081900:	2b08      	cmp	r3, #8
 8081902:	f200 80bd 	bhi.w	8081a80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8081906:	2b00      	cmp	r3, #0
 8081908:	d002      	beq.n	8081910 <HAL_RCC_GetSysClockFreq+0x34>
 808190a:	2b04      	cmp	r3, #4
 808190c:	d003      	beq.n	8081916 <HAL_RCC_GetSysClockFreq+0x3a>
 808190e:	e0b7      	b.n	8081a80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8081910:	4b61      	ldr	r3, [pc, #388]	; (8081a98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8081912:	60bb      	str	r3, [r7, #8]
       break;
 8081914:	e0b7      	b.n	8081a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8081916:	4b61      	ldr	r3, [pc, #388]	; (8081a9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8081918:	60bb      	str	r3, [r7, #8]
      break;
 808191a:	e0b4      	b.n	8081a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 808191c:	4b5d      	ldr	r3, [pc, #372]	; (8081a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 808191e:	685b      	ldr	r3, [r3, #4]
 8081920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8081924:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8081926:	4b5b      	ldr	r3, [pc, #364]	; (8081a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8081928:	685b      	ldr	r3, [r3, #4]
 808192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808192e:	2b00      	cmp	r3, #0
 8081930:	d04d      	beq.n	80819ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8081932:	4b58      	ldr	r3, [pc, #352]	; (8081a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8081934:	685b      	ldr	r3, [r3, #4]
 8081936:	099b      	lsrs	r3, r3, #6
 8081938:	461a      	mov	r2, r3
 808193a:	f04f 0300 	mov.w	r3, #0
 808193e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8081942:	f04f 0100 	mov.w	r1, #0
 8081946:	ea02 0800 	and.w	r8, r2, r0
 808194a:	ea03 0901 	and.w	r9, r3, r1
 808194e:	4640      	mov	r0, r8
 8081950:	4649      	mov	r1, r9
 8081952:	f04f 0200 	mov.w	r2, #0
 8081956:	f04f 0300 	mov.w	r3, #0
 808195a:	014b      	lsls	r3, r1, #5
 808195c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8081960:	0142      	lsls	r2, r0, #5
 8081962:	4610      	mov	r0, r2
 8081964:	4619      	mov	r1, r3
 8081966:	ebb0 0008 	subs.w	r0, r0, r8
 808196a:	eb61 0109 	sbc.w	r1, r1, r9
 808196e:	f04f 0200 	mov.w	r2, #0
 8081972:	f04f 0300 	mov.w	r3, #0
 8081976:	018b      	lsls	r3, r1, #6
 8081978:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 808197c:	0182      	lsls	r2, r0, #6
 808197e:	1a12      	subs	r2, r2, r0
 8081980:	eb63 0301 	sbc.w	r3, r3, r1
 8081984:	f04f 0000 	mov.w	r0, #0
 8081988:	f04f 0100 	mov.w	r1, #0
 808198c:	00d9      	lsls	r1, r3, #3
 808198e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8081992:	00d0      	lsls	r0, r2, #3
 8081994:	4602      	mov	r2, r0
 8081996:	460b      	mov	r3, r1
 8081998:	eb12 0208 	adds.w	r2, r2, r8
 808199c:	eb43 0309 	adc.w	r3, r3, r9
 80819a0:	f04f 0000 	mov.w	r0, #0
 80819a4:	f04f 0100 	mov.w	r1, #0
 80819a8:	0259      	lsls	r1, r3, #9
 80819aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80819ae:	0250      	lsls	r0, r2, #9
 80819b0:	4602      	mov	r2, r0
 80819b2:	460b      	mov	r3, r1
 80819b4:	4610      	mov	r0, r2
 80819b6:	4619      	mov	r1, r3
 80819b8:	687b      	ldr	r3, [r7, #4]
 80819ba:	461a      	mov	r2, r3
 80819bc:	f04f 0300 	mov.w	r3, #0
 80819c0:	f7fe fc02 	bl	80801c8 <__aeabi_uldivmod>
 80819c4:	4602      	mov	r2, r0
 80819c6:	460b      	mov	r3, r1
 80819c8:	4613      	mov	r3, r2
 80819ca:	60fb      	str	r3, [r7, #12]
 80819cc:	e04a      	b.n	8081a64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80819ce:	4b31      	ldr	r3, [pc, #196]	; (8081a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80819d0:	685b      	ldr	r3, [r3, #4]
 80819d2:	099b      	lsrs	r3, r3, #6
 80819d4:	461a      	mov	r2, r3
 80819d6:	f04f 0300 	mov.w	r3, #0
 80819da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80819de:	f04f 0100 	mov.w	r1, #0
 80819e2:	ea02 0400 	and.w	r4, r2, r0
 80819e6:	ea03 0501 	and.w	r5, r3, r1
 80819ea:	4620      	mov	r0, r4
 80819ec:	4629      	mov	r1, r5
 80819ee:	f04f 0200 	mov.w	r2, #0
 80819f2:	f04f 0300 	mov.w	r3, #0
 80819f6:	014b      	lsls	r3, r1, #5
 80819f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80819fc:	0142      	lsls	r2, r0, #5
 80819fe:	4610      	mov	r0, r2
 8081a00:	4619      	mov	r1, r3
 8081a02:	1b00      	subs	r0, r0, r4
 8081a04:	eb61 0105 	sbc.w	r1, r1, r5
 8081a08:	f04f 0200 	mov.w	r2, #0
 8081a0c:	f04f 0300 	mov.w	r3, #0
 8081a10:	018b      	lsls	r3, r1, #6
 8081a12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8081a16:	0182      	lsls	r2, r0, #6
 8081a18:	1a12      	subs	r2, r2, r0
 8081a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8081a1e:	f04f 0000 	mov.w	r0, #0
 8081a22:	f04f 0100 	mov.w	r1, #0
 8081a26:	00d9      	lsls	r1, r3, #3
 8081a28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8081a2c:	00d0      	lsls	r0, r2, #3
 8081a2e:	4602      	mov	r2, r0
 8081a30:	460b      	mov	r3, r1
 8081a32:	1912      	adds	r2, r2, r4
 8081a34:	eb45 0303 	adc.w	r3, r5, r3
 8081a38:	f04f 0000 	mov.w	r0, #0
 8081a3c:	f04f 0100 	mov.w	r1, #0
 8081a40:	0299      	lsls	r1, r3, #10
 8081a42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8081a46:	0290      	lsls	r0, r2, #10
 8081a48:	4602      	mov	r2, r0
 8081a4a:	460b      	mov	r3, r1
 8081a4c:	4610      	mov	r0, r2
 8081a4e:	4619      	mov	r1, r3
 8081a50:	687b      	ldr	r3, [r7, #4]
 8081a52:	461a      	mov	r2, r3
 8081a54:	f04f 0300 	mov.w	r3, #0
 8081a58:	f7fe fbb6 	bl	80801c8 <__aeabi_uldivmod>
 8081a5c:	4602      	mov	r2, r0
 8081a5e:	460b      	mov	r3, r1
 8081a60:	4613      	mov	r3, r2
 8081a62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8081a64:	4b0b      	ldr	r3, [pc, #44]	; (8081a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8081a66:	685b      	ldr	r3, [r3, #4]
 8081a68:	0c1b      	lsrs	r3, r3, #16
 8081a6a:	f003 0303 	and.w	r3, r3, #3
 8081a6e:	3301      	adds	r3, #1
 8081a70:	005b      	lsls	r3, r3, #1
 8081a72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8081a74:	68fa      	ldr	r2, [r7, #12]
 8081a76:	683b      	ldr	r3, [r7, #0]
 8081a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8081a7c:	60bb      	str	r3, [r7, #8]
      break;
 8081a7e:	e002      	b.n	8081a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8081a80:	4b05      	ldr	r3, [pc, #20]	; (8081a98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8081a82:	60bb      	str	r3, [r7, #8]
      break;
 8081a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8081a86:	68bb      	ldr	r3, [r7, #8]
}
 8081a88:	4618      	mov	r0, r3
 8081a8a:	3710      	adds	r7, #16
 8081a8c:	46bd      	mov	sp, r7
 8081a8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8081a92:	bf00      	nop
 8081a94:	40023800 	.word	0x40023800
 8081a98:	00f42400 	.word	0x00f42400
 8081a9c:	007a1200 	.word	0x007a1200

08081aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8081aa0:	b480      	push	{r7}
 8081aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8081aa4:	4b03      	ldr	r3, [pc, #12]	; (8081ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8081aa6:	681b      	ldr	r3, [r3, #0]
}
 8081aa8:	4618      	mov	r0, r3
 8081aaa:	46bd      	mov	sp, r7
 8081aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081ab0:	4770      	bx	lr
 8081ab2:	bf00      	nop
 8081ab4:	20000000 	.word	0x20000000

08081ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8081ab8:	b580      	push	{r7, lr}
 8081aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8081abc:	f7ff fff0 	bl	8081aa0 <HAL_RCC_GetHCLKFreq>
 8081ac0:	4602      	mov	r2, r0
 8081ac2:	4b05      	ldr	r3, [pc, #20]	; (8081ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8081ac4:	689b      	ldr	r3, [r3, #8]
 8081ac6:	0a9b      	lsrs	r3, r3, #10
 8081ac8:	f003 0307 	and.w	r3, r3, #7
 8081acc:	4903      	ldr	r1, [pc, #12]	; (8081adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8081ace:	5ccb      	ldrb	r3, [r1, r3]
 8081ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8081ad4:	4618      	mov	r0, r3
 8081ad6:	bd80      	pop	{r7, pc}
 8081ad8:	40023800 	.word	0x40023800
 8081adc:	08083148 	.word	0x08083148

08081ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8081ae0:	b580      	push	{r7, lr}
 8081ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8081ae4:	f7ff ffdc 	bl	8081aa0 <HAL_RCC_GetHCLKFreq>
 8081ae8:	4602      	mov	r2, r0
 8081aea:	4b05      	ldr	r3, [pc, #20]	; (8081b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8081aec:	689b      	ldr	r3, [r3, #8]
 8081aee:	0b5b      	lsrs	r3, r3, #13
 8081af0:	f003 0307 	and.w	r3, r3, #7
 8081af4:	4903      	ldr	r1, [pc, #12]	; (8081b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8081af6:	5ccb      	ldrb	r3, [r1, r3]
 8081af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8081afc:	4618      	mov	r0, r3
 8081afe:	bd80      	pop	{r7, pc}
 8081b00:	40023800 	.word	0x40023800
 8081b04:	08083148 	.word	0x08083148

08081b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8081b08:	b580      	push	{r7, lr}
 8081b0a:	b082      	sub	sp, #8
 8081b0c:	af00      	add	r7, sp, #0
 8081b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8081b10:	687b      	ldr	r3, [r7, #4]
 8081b12:	2b00      	cmp	r3, #0
 8081b14:	d101      	bne.n	8081b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8081b16:	2301      	movs	r3, #1
 8081b18:	e03f      	b.n	8081b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8081b1a:	687b      	ldr	r3, [r7, #4]
 8081b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8081b20:	b2db      	uxtb	r3, r3
 8081b22:	2b00      	cmp	r3, #0
 8081b24:	d106      	bne.n	8081b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8081b26:	687b      	ldr	r3, [r7, #4]
 8081b28:	2200      	movs	r2, #0
 8081b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8081b2e:	6878      	ldr	r0, [r7, #4]
 8081b30:	f7fe feee 	bl	8080910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8081b34:	687b      	ldr	r3, [r7, #4]
 8081b36:	2224      	movs	r2, #36	; 0x24
 8081b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8081b3c:	687b      	ldr	r3, [r7, #4]
 8081b3e:	681b      	ldr	r3, [r3, #0]
 8081b40:	68da      	ldr	r2, [r3, #12]
 8081b42:	687b      	ldr	r3, [r7, #4]
 8081b44:	681b      	ldr	r3, [r3, #0]
 8081b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8081b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8081b4c:	6878      	ldr	r0, [r7, #4]
 8081b4e:	f000 fc1b 	bl	8082388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8081b52:	687b      	ldr	r3, [r7, #4]
 8081b54:	681b      	ldr	r3, [r3, #0]
 8081b56:	691a      	ldr	r2, [r3, #16]
 8081b58:	687b      	ldr	r3, [r7, #4]
 8081b5a:	681b      	ldr	r3, [r3, #0]
 8081b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8081b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8081b62:	687b      	ldr	r3, [r7, #4]
 8081b64:	681b      	ldr	r3, [r3, #0]
 8081b66:	695a      	ldr	r2, [r3, #20]
 8081b68:	687b      	ldr	r3, [r7, #4]
 8081b6a:	681b      	ldr	r3, [r3, #0]
 8081b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8081b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8081b72:	687b      	ldr	r3, [r7, #4]
 8081b74:	681b      	ldr	r3, [r3, #0]
 8081b76:	68da      	ldr	r2, [r3, #12]
 8081b78:	687b      	ldr	r3, [r7, #4]
 8081b7a:	681b      	ldr	r3, [r3, #0]
 8081b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8081b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8081b82:	687b      	ldr	r3, [r7, #4]
 8081b84:	2200      	movs	r2, #0
 8081b86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8081b88:	687b      	ldr	r3, [r7, #4]
 8081b8a:	2220      	movs	r2, #32
 8081b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8081b90:	687b      	ldr	r3, [r7, #4]
 8081b92:	2220      	movs	r2, #32
 8081b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8081b98:	2300      	movs	r3, #0
}
 8081b9a:	4618      	mov	r0, r3
 8081b9c:	3708      	adds	r7, #8
 8081b9e:	46bd      	mov	sp, r7
 8081ba0:	bd80      	pop	{r7, pc}

08081ba2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8081ba2:	b580      	push	{r7, lr}
 8081ba4:	b08a      	sub	sp, #40	; 0x28
 8081ba6:	af02      	add	r7, sp, #8
 8081ba8:	60f8      	str	r0, [r7, #12]
 8081baa:	60b9      	str	r1, [r7, #8]
 8081bac:	603b      	str	r3, [r7, #0]
 8081bae:	4613      	mov	r3, r2
 8081bb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8081bb2:	2300      	movs	r3, #0
 8081bb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8081bb6:	68fb      	ldr	r3, [r7, #12]
 8081bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8081bbc:	b2db      	uxtb	r3, r3
 8081bbe:	2b20      	cmp	r3, #32
 8081bc0:	d17c      	bne.n	8081cbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8081bc2:	68bb      	ldr	r3, [r7, #8]
 8081bc4:	2b00      	cmp	r3, #0
 8081bc6:	d002      	beq.n	8081bce <HAL_UART_Transmit+0x2c>
 8081bc8:	88fb      	ldrh	r3, [r7, #6]
 8081bca:	2b00      	cmp	r3, #0
 8081bcc:	d101      	bne.n	8081bd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8081bce:	2301      	movs	r3, #1
 8081bd0:	e075      	b.n	8081cbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8081bd2:	68fb      	ldr	r3, [r7, #12]
 8081bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8081bd8:	2b01      	cmp	r3, #1
 8081bda:	d101      	bne.n	8081be0 <HAL_UART_Transmit+0x3e>
 8081bdc:	2302      	movs	r3, #2
 8081bde:	e06e      	b.n	8081cbe <HAL_UART_Transmit+0x11c>
 8081be0:	68fb      	ldr	r3, [r7, #12]
 8081be2:	2201      	movs	r2, #1
 8081be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8081be8:	68fb      	ldr	r3, [r7, #12]
 8081bea:	2200      	movs	r2, #0
 8081bec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8081bee:	68fb      	ldr	r3, [r7, #12]
 8081bf0:	2221      	movs	r2, #33	; 0x21
 8081bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8081bf6:	f7fe ff89 	bl	8080b0c <HAL_GetTick>
 8081bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8081bfc:	68fb      	ldr	r3, [r7, #12]
 8081bfe:	88fa      	ldrh	r2, [r7, #6]
 8081c00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8081c02:	68fb      	ldr	r3, [r7, #12]
 8081c04:	88fa      	ldrh	r2, [r7, #6]
 8081c06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8081c08:	68fb      	ldr	r3, [r7, #12]
 8081c0a:	689b      	ldr	r3, [r3, #8]
 8081c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8081c10:	d108      	bne.n	8081c24 <HAL_UART_Transmit+0x82>
 8081c12:	68fb      	ldr	r3, [r7, #12]
 8081c14:	691b      	ldr	r3, [r3, #16]
 8081c16:	2b00      	cmp	r3, #0
 8081c18:	d104      	bne.n	8081c24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8081c1a:	2300      	movs	r3, #0
 8081c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8081c1e:	68bb      	ldr	r3, [r7, #8]
 8081c20:	61bb      	str	r3, [r7, #24]
 8081c22:	e003      	b.n	8081c2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8081c24:	68bb      	ldr	r3, [r7, #8]
 8081c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8081c28:	2300      	movs	r3, #0
 8081c2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8081c2c:	68fb      	ldr	r3, [r7, #12]
 8081c2e:	2200      	movs	r2, #0
 8081c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8081c34:	e02a      	b.n	8081c8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8081c36:	683b      	ldr	r3, [r7, #0]
 8081c38:	9300      	str	r3, [sp, #0]
 8081c3a:	697b      	ldr	r3, [r7, #20]
 8081c3c:	2200      	movs	r2, #0
 8081c3e:	2180      	movs	r1, #128	; 0x80
 8081c40:	68f8      	ldr	r0, [r7, #12]
 8081c42:	f000 fa17 	bl	8082074 <UART_WaitOnFlagUntilTimeout>
 8081c46:	4603      	mov	r3, r0
 8081c48:	2b00      	cmp	r3, #0
 8081c4a:	d001      	beq.n	8081c50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8081c4c:	2303      	movs	r3, #3
 8081c4e:	e036      	b.n	8081cbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8081c50:	69fb      	ldr	r3, [r7, #28]
 8081c52:	2b00      	cmp	r3, #0
 8081c54:	d10b      	bne.n	8081c6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8081c56:	69bb      	ldr	r3, [r7, #24]
 8081c58:	881b      	ldrh	r3, [r3, #0]
 8081c5a:	461a      	mov	r2, r3
 8081c5c:	68fb      	ldr	r3, [r7, #12]
 8081c5e:	681b      	ldr	r3, [r3, #0]
 8081c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8081c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8081c66:	69bb      	ldr	r3, [r7, #24]
 8081c68:	3302      	adds	r3, #2
 8081c6a:	61bb      	str	r3, [r7, #24]
 8081c6c:	e007      	b.n	8081c7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8081c6e:	69fb      	ldr	r3, [r7, #28]
 8081c70:	781a      	ldrb	r2, [r3, #0]
 8081c72:	68fb      	ldr	r3, [r7, #12]
 8081c74:	681b      	ldr	r3, [r3, #0]
 8081c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8081c78:	69fb      	ldr	r3, [r7, #28]
 8081c7a:	3301      	adds	r3, #1
 8081c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8081c7e:	68fb      	ldr	r3, [r7, #12]
 8081c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8081c82:	b29b      	uxth	r3, r3
 8081c84:	3b01      	subs	r3, #1
 8081c86:	b29a      	uxth	r2, r3
 8081c88:	68fb      	ldr	r3, [r7, #12]
 8081c8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8081c8c:	68fb      	ldr	r3, [r7, #12]
 8081c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8081c90:	b29b      	uxth	r3, r3
 8081c92:	2b00      	cmp	r3, #0
 8081c94:	d1cf      	bne.n	8081c36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8081c96:	683b      	ldr	r3, [r7, #0]
 8081c98:	9300      	str	r3, [sp, #0]
 8081c9a:	697b      	ldr	r3, [r7, #20]
 8081c9c:	2200      	movs	r2, #0
 8081c9e:	2140      	movs	r1, #64	; 0x40
 8081ca0:	68f8      	ldr	r0, [r7, #12]
 8081ca2:	f000 f9e7 	bl	8082074 <UART_WaitOnFlagUntilTimeout>
 8081ca6:	4603      	mov	r3, r0
 8081ca8:	2b00      	cmp	r3, #0
 8081caa:	d001      	beq.n	8081cb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8081cac:	2303      	movs	r3, #3
 8081cae:	e006      	b.n	8081cbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8081cb0:	68fb      	ldr	r3, [r7, #12]
 8081cb2:	2220      	movs	r2, #32
 8081cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8081cb8:	2300      	movs	r3, #0
 8081cba:	e000      	b.n	8081cbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8081cbc:	2302      	movs	r3, #2
  }
}
 8081cbe:	4618      	mov	r0, r3
 8081cc0:	3720      	adds	r7, #32
 8081cc2:	46bd      	mov	sp, r7
 8081cc4:	bd80      	pop	{r7, pc}
	...

08081cc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8081cc8:	b580      	push	{r7, lr}
 8081cca:	b08a      	sub	sp, #40	; 0x28
 8081ccc:	af00      	add	r7, sp, #0
 8081cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8081cd0:	687b      	ldr	r3, [r7, #4]
 8081cd2:	681b      	ldr	r3, [r3, #0]
 8081cd4:	681b      	ldr	r3, [r3, #0]
 8081cd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8081cd8:	687b      	ldr	r3, [r7, #4]
 8081cda:	681b      	ldr	r3, [r3, #0]
 8081cdc:	68db      	ldr	r3, [r3, #12]
 8081cde:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8081ce0:	687b      	ldr	r3, [r7, #4]
 8081ce2:	681b      	ldr	r3, [r3, #0]
 8081ce4:	695b      	ldr	r3, [r3, #20]
 8081ce6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8081ce8:	2300      	movs	r3, #0
 8081cea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8081cec:	2300      	movs	r3, #0
 8081cee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8081cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081cf2:	f003 030f 	and.w	r3, r3, #15
 8081cf6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8081cf8:	69bb      	ldr	r3, [r7, #24]
 8081cfa:	2b00      	cmp	r3, #0
 8081cfc:	d10d      	bne.n	8081d1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8081cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081d00:	f003 0320 	and.w	r3, r3, #32
 8081d04:	2b00      	cmp	r3, #0
 8081d06:	d008      	beq.n	8081d1a <HAL_UART_IRQHandler+0x52>
 8081d08:	6a3b      	ldr	r3, [r7, #32]
 8081d0a:	f003 0320 	and.w	r3, r3, #32
 8081d0e:	2b00      	cmp	r3, #0
 8081d10:	d003      	beq.n	8081d1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8081d12:	6878      	ldr	r0, [r7, #4]
 8081d14:	f000 faa1 	bl	808225a <UART_Receive_IT>
      return;
 8081d18:	e17c      	b.n	8082014 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8081d1a:	69bb      	ldr	r3, [r7, #24]
 8081d1c:	2b00      	cmp	r3, #0
 8081d1e:	f000 80b1 	beq.w	8081e84 <HAL_UART_IRQHandler+0x1bc>
 8081d22:	69fb      	ldr	r3, [r7, #28]
 8081d24:	f003 0301 	and.w	r3, r3, #1
 8081d28:	2b00      	cmp	r3, #0
 8081d2a:	d105      	bne.n	8081d38 <HAL_UART_IRQHandler+0x70>
 8081d2c:	6a3b      	ldr	r3, [r7, #32]
 8081d2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8081d32:	2b00      	cmp	r3, #0
 8081d34:	f000 80a6 	beq.w	8081e84 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8081d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081d3a:	f003 0301 	and.w	r3, r3, #1
 8081d3e:	2b00      	cmp	r3, #0
 8081d40:	d00a      	beq.n	8081d58 <HAL_UART_IRQHandler+0x90>
 8081d42:	6a3b      	ldr	r3, [r7, #32]
 8081d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8081d48:	2b00      	cmp	r3, #0
 8081d4a:	d005      	beq.n	8081d58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8081d4c:	687b      	ldr	r3, [r7, #4]
 8081d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081d50:	f043 0201 	orr.w	r2, r3, #1
 8081d54:	687b      	ldr	r3, [r7, #4]
 8081d56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8081d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081d5a:	f003 0304 	and.w	r3, r3, #4
 8081d5e:	2b00      	cmp	r3, #0
 8081d60:	d00a      	beq.n	8081d78 <HAL_UART_IRQHandler+0xb0>
 8081d62:	69fb      	ldr	r3, [r7, #28]
 8081d64:	f003 0301 	and.w	r3, r3, #1
 8081d68:	2b00      	cmp	r3, #0
 8081d6a:	d005      	beq.n	8081d78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8081d6c:	687b      	ldr	r3, [r7, #4]
 8081d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081d70:	f043 0202 	orr.w	r2, r3, #2
 8081d74:	687b      	ldr	r3, [r7, #4]
 8081d76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8081d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081d7a:	f003 0302 	and.w	r3, r3, #2
 8081d7e:	2b00      	cmp	r3, #0
 8081d80:	d00a      	beq.n	8081d98 <HAL_UART_IRQHandler+0xd0>
 8081d82:	69fb      	ldr	r3, [r7, #28]
 8081d84:	f003 0301 	and.w	r3, r3, #1
 8081d88:	2b00      	cmp	r3, #0
 8081d8a:	d005      	beq.n	8081d98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8081d8c:	687b      	ldr	r3, [r7, #4]
 8081d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081d90:	f043 0204 	orr.w	r2, r3, #4
 8081d94:	687b      	ldr	r3, [r7, #4]
 8081d96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8081d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081d9a:	f003 0308 	and.w	r3, r3, #8
 8081d9e:	2b00      	cmp	r3, #0
 8081da0:	d00f      	beq.n	8081dc2 <HAL_UART_IRQHandler+0xfa>
 8081da2:	6a3b      	ldr	r3, [r7, #32]
 8081da4:	f003 0320 	and.w	r3, r3, #32
 8081da8:	2b00      	cmp	r3, #0
 8081daa:	d104      	bne.n	8081db6 <HAL_UART_IRQHandler+0xee>
 8081dac:	69fb      	ldr	r3, [r7, #28]
 8081dae:	f003 0301 	and.w	r3, r3, #1
 8081db2:	2b00      	cmp	r3, #0
 8081db4:	d005      	beq.n	8081dc2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8081db6:	687b      	ldr	r3, [r7, #4]
 8081db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081dba:	f043 0208 	orr.w	r2, r3, #8
 8081dbe:	687b      	ldr	r3, [r7, #4]
 8081dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8081dc2:	687b      	ldr	r3, [r7, #4]
 8081dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081dc6:	2b00      	cmp	r3, #0
 8081dc8:	f000 811f 	beq.w	808200a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8081dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081dce:	f003 0320 	and.w	r3, r3, #32
 8081dd2:	2b00      	cmp	r3, #0
 8081dd4:	d007      	beq.n	8081de6 <HAL_UART_IRQHandler+0x11e>
 8081dd6:	6a3b      	ldr	r3, [r7, #32]
 8081dd8:	f003 0320 	and.w	r3, r3, #32
 8081ddc:	2b00      	cmp	r3, #0
 8081dde:	d002      	beq.n	8081de6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8081de0:	6878      	ldr	r0, [r7, #4]
 8081de2:	f000 fa3a 	bl	808225a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8081de6:	687b      	ldr	r3, [r7, #4]
 8081de8:	681b      	ldr	r3, [r3, #0]
 8081dea:	695b      	ldr	r3, [r3, #20]
 8081dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8081df0:	2b40      	cmp	r3, #64	; 0x40
 8081df2:	bf0c      	ite	eq
 8081df4:	2301      	moveq	r3, #1
 8081df6:	2300      	movne	r3, #0
 8081df8:	b2db      	uxtb	r3, r3
 8081dfa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8081dfc:	687b      	ldr	r3, [r7, #4]
 8081dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081e00:	f003 0308 	and.w	r3, r3, #8
 8081e04:	2b00      	cmp	r3, #0
 8081e06:	d102      	bne.n	8081e0e <HAL_UART_IRQHandler+0x146>
 8081e08:	697b      	ldr	r3, [r7, #20]
 8081e0a:	2b00      	cmp	r3, #0
 8081e0c:	d031      	beq.n	8081e72 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8081e0e:	6878      	ldr	r0, [r7, #4]
 8081e10:	f000 f97a 	bl	8082108 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8081e14:	687b      	ldr	r3, [r7, #4]
 8081e16:	681b      	ldr	r3, [r3, #0]
 8081e18:	695b      	ldr	r3, [r3, #20]
 8081e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8081e1e:	2b40      	cmp	r3, #64	; 0x40
 8081e20:	d123      	bne.n	8081e6a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8081e22:	687b      	ldr	r3, [r7, #4]
 8081e24:	681b      	ldr	r3, [r3, #0]
 8081e26:	695a      	ldr	r2, [r3, #20]
 8081e28:	687b      	ldr	r3, [r7, #4]
 8081e2a:	681b      	ldr	r3, [r3, #0]
 8081e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8081e30:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8081e32:	687b      	ldr	r3, [r7, #4]
 8081e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081e36:	2b00      	cmp	r3, #0
 8081e38:	d013      	beq.n	8081e62 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8081e3a:	687b      	ldr	r3, [r7, #4]
 8081e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081e3e:	4a77      	ldr	r2, [pc, #476]	; (808201c <HAL_UART_IRQHandler+0x354>)
 8081e40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8081e42:	687b      	ldr	r3, [r7, #4]
 8081e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081e46:	4618      	mov	r0, r3
 8081e48:	f7ff f811 	bl	8080e6e <HAL_DMA_Abort_IT>
 8081e4c:	4603      	mov	r3, r0
 8081e4e:	2b00      	cmp	r3, #0
 8081e50:	d016      	beq.n	8081e80 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8081e52:	687b      	ldr	r3, [r7, #4]
 8081e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8081e58:	687a      	ldr	r2, [r7, #4]
 8081e5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8081e5c:	4610      	mov	r0, r2
 8081e5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8081e60:	e00e      	b.n	8081e80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8081e62:	6878      	ldr	r0, [r7, #4]
 8081e64:	f000 f8f0 	bl	8082048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8081e68:	e00a      	b.n	8081e80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8081e6a:	6878      	ldr	r0, [r7, #4]
 8081e6c:	f000 f8ec 	bl	8082048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8081e70:	e006      	b.n	8081e80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8081e72:	6878      	ldr	r0, [r7, #4]
 8081e74:	f000 f8e8 	bl	8082048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8081e78:	687b      	ldr	r3, [r7, #4]
 8081e7a:	2200      	movs	r2, #0
 8081e7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8081e7e:	e0c4      	b.n	808200a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8081e80:	bf00      	nop
    return;
 8081e82:	e0c2      	b.n	808200a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8081e84:	687b      	ldr	r3, [r7, #4]
 8081e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081e88:	2b01      	cmp	r3, #1
 8081e8a:	f040 80a2 	bne.w	8081fd2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8081e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081e90:	f003 0310 	and.w	r3, r3, #16
 8081e94:	2b00      	cmp	r3, #0
 8081e96:	f000 809c 	beq.w	8081fd2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8081e9a:	6a3b      	ldr	r3, [r7, #32]
 8081e9c:	f003 0310 	and.w	r3, r3, #16
 8081ea0:	2b00      	cmp	r3, #0
 8081ea2:	f000 8096 	beq.w	8081fd2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8081ea6:	2300      	movs	r3, #0
 8081ea8:	60fb      	str	r3, [r7, #12]
 8081eaa:	687b      	ldr	r3, [r7, #4]
 8081eac:	681b      	ldr	r3, [r3, #0]
 8081eae:	681b      	ldr	r3, [r3, #0]
 8081eb0:	60fb      	str	r3, [r7, #12]
 8081eb2:	687b      	ldr	r3, [r7, #4]
 8081eb4:	681b      	ldr	r3, [r3, #0]
 8081eb6:	685b      	ldr	r3, [r3, #4]
 8081eb8:	60fb      	str	r3, [r7, #12]
 8081eba:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8081ebc:	687b      	ldr	r3, [r7, #4]
 8081ebe:	681b      	ldr	r3, [r3, #0]
 8081ec0:	695b      	ldr	r3, [r3, #20]
 8081ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8081ec6:	2b40      	cmp	r3, #64	; 0x40
 8081ec8:	d14f      	bne.n	8081f6a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8081eca:	687b      	ldr	r3, [r7, #4]
 8081ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081ece:	681b      	ldr	r3, [r3, #0]
 8081ed0:	685b      	ldr	r3, [r3, #4]
 8081ed2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8081ed4:	8a3b      	ldrh	r3, [r7, #16]
 8081ed6:	2b00      	cmp	r3, #0
 8081ed8:	f000 8099 	beq.w	808200e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8081edc:	687b      	ldr	r3, [r7, #4]
 8081ede:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8081ee0:	8a3a      	ldrh	r2, [r7, #16]
 8081ee2:	429a      	cmp	r2, r3
 8081ee4:	f080 8093 	bcs.w	808200e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8081ee8:	687b      	ldr	r3, [r7, #4]
 8081eea:	8a3a      	ldrh	r2, [r7, #16]
 8081eec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8081eee:	687b      	ldr	r3, [r7, #4]
 8081ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081ef2:	69db      	ldr	r3, [r3, #28]
 8081ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8081ef8:	d02b      	beq.n	8081f52 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8081efa:	687b      	ldr	r3, [r7, #4]
 8081efc:	681b      	ldr	r3, [r3, #0]
 8081efe:	68da      	ldr	r2, [r3, #12]
 8081f00:	687b      	ldr	r3, [r7, #4]
 8081f02:	681b      	ldr	r3, [r3, #0]
 8081f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8081f08:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8081f0a:	687b      	ldr	r3, [r7, #4]
 8081f0c:	681b      	ldr	r3, [r3, #0]
 8081f0e:	695a      	ldr	r2, [r3, #20]
 8081f10:	687b      	ldr	r3, [r7, #4]
 8081f12:	681b      	ldr	r3, [r3, #0]
 8081f14:	f022 0201 	bic.w	r2, r2, #1
 8081f18:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8081f1a:	687b      	ldr	r3, [r7, #4]
 8081f1c:	681b      	ldr	r3, [r3, #0]
 8081f1e:	695a      	ldr	r2, [r3, #20]
 8081f20:	687b      	ldr	r3, [r7, #4]
 8081f22:	681b      	ldr	r3, [r3, #0]
 8081f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8081f28:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8081f2a:	687b      	ldr	r3, [r7, #4]
 8081f2c:	2220      	movs	r2, #32
 8081f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8081f32:	687b      	ldr	r3, [r7, #4]
 8081f34:	2200      	movs	r2, #0
 8081f36:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8081f38:	687b      	ldr	r3, [r7, #4]
 8081f3a:	681b      	ldr	r3, [r3, #0]
 8081f3c:	68da      	ldr	r2, [r3, #12]
 8081f3e:	687b      	ldr	r3, [r7, #4]
 8081f40:	681b      	ldr	r3, [r3, #0]
 8081f42:	f022 0210 	bic.w	r2, r2, #16
 8081f46:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8081f48:	687b      	ldr	r3, [r7, #4]
 8081f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081f4c:	4618      	mov	r0, r3
 8081f4e:	f7fe ff1e 	bl	8080d8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8081f52:	687b      	ldr	r3, [r7, #4]
 8081f54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8081f56:	687b      	ldr	r3, [r7, #4]
 8081f58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8081f5a:	b29b      	uxth	r3, r3
 8081f5c:	1ad3      	subs	r3, r2, r3
 8081f5e:	b29b      	uxth	r3, r3
 8081f60:	4619      	mov	r1, r3
 8081f62:	6878      	ldr	r0, [r7, #4]
 8081f64:	f000 f87a 	bl	808205c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8081f68:	e051      	b.n	808200e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8081f6a:	687b      	ldr	r3, [r7, #4]
 8081f6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8081f6e:	687b      	ldr	r3, [r7, #4]
 8081f70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8081f72:	b29b      	uxth	r3, r3
 8081f74:	1ad3      	subs	r3, r2, r3
 8081f76:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8081f78:	687b      	ldr	r3, [r7, #4]
 8081f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8081f7c:	b29b      	uxth	r3, r3
 8081f7e:	2b00      	cmp	r3, #0
 8081f80:	d047      	beq.n	8082012 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8081f82:	8a7b      	ldrh	r3, [r7, #18]
 8081f84:	2b00      	cmp	r3, #0
 8081f86:	d044      	beq.n	8082012 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8081f88:	687b      	ldr	r3, [r7, #4]
 8081f8a:	681b      	ldr	r3, [r3, #0]
 8081f8c:	68da      	ldr	r2, [r3, #12]
 8081f8e:	687b      	ldr	r3, [r7, #4]
 8081f90:	681b      	ldr	r3, [r3, #0]
 8081f92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8081f96:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8081f98:	687b      	ldr	r3, [r7, #4]
 8081f9a:	681b      	ldr	r3, [r3, #0]
 8081f9c:	695a      	ldr	r2, [r3, #20]
 8081f9e:	687b      	ldr	r3, [r7, #4]
 8081fa0:	681b      	ldr	r3, [r3, #0]
 8081fa2:	f022 0201 	bic.w	r2, r2, #1
 8081fa6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8081fa8:	687b      	ldr	r3, [r7, #4]
 8081faa:	2220      	movs	r2, #32
 8081fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8081fb0:	687b      	ldr	r3, [r7, #4]
 8081fb2:	2200      	movs	r2, #0
 8081fb4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8081fb6:	687b      	ldr	r3, [r7, #4]
 8081fb8:	681b      	ldr	r3, [r3, #0]
 8081fba:	68da      	ldr	r2, [r3, #12]
 8081fbc:	687b      	ldr	r3, [r7, #4]
 8081fbe:	681b      	ldr	r3, [r3, #0]
 8081fc0:	f022 0210 	bic.w	r2, r2, #16
 8081fc4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8081fc6:	8a7b      	ldrh	r3, [r7, #18]
 8081fc8:	4619      	mov	r1, r3
 8081fca:	6878      	ldr	r0, [r7, #4]
 8081fcc:	f000 f846 	bl	808205c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8081fd0:	e01f      	b.n	8082012 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8081fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8081fd8:	2b00      	cmp	r3, #0
 8081fda:	d008      	beq.n	8081fee <HAL_UART_IRQHandler+0x326>
 8081fdc:	6a3b      	ldr	r3, [r7, #32]
 8081fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8081fe2:	2b00      	cmp	r3, #0
 8081fe4:	d003      	beq.n	8081fee <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8081fe6:	6878      	ldr	r0, [r7, #4]
 8081fe8:	f000 f8cf 	bl	808218a <UART_Transmit_IT>
    return;
 8081fec:	e012      	b.n	8082014 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8081fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8081ff4:	2b00      	cmp	r3, #0
 8081ff6:	d00d      	beq.n	8082014 <HAL_UART_IRQHandler+0x34c>
 8081ff8:	6a3b      	ldr	r3, [r7, #32]
 8081ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8081ffe:	2b00      	cmp	r3, #0
 8082000:	d008      	beq.n	8082014 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8082002:	6878      	ldr	r0, [r7, #4]
 8082004:	f000 f911 	bl	808222a <UART_EndTransmit_IT>
    return;
 8082008:	e004      	b.n	8082014 <HAL_UART_IRQHandler+0x34c>
    return;
 808200a:	bf00      	nop
 808200c:	e002      	b.n	8082014 <HAL_UART_IRQHandler+0x34c>
      return;
 808200e:	bf00      	nop
 8082010:	e000      	b.n	8082014 <HAL_UART_IRQHandler+0x34c>
      return;
 8082012:	bf00      	nop
  }
}
 8082014:	3728      	adds	r7, #40	; 0x28
 8082016:	46bd      	mov	sp, r7
 8082018:	bd80      	pop	{r7, pc}
 808201a:	bf00      	nop
 808201c:	08082163 	.word	0x08082163

08082020 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8082020:	b480      	push	{r7}
 8082022:	b083      	sub	sp, #12
 8082024:	af00      	add	r7, sp, #0
 8082026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8082028:	bf00      	nop
 808202a:	370c      	adds	r7, #12
 808202c:	46bd      	mov	sp, r7
 808202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082032:	4770      	bx	lr

08082034 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8082034:	b480      	push	{r7}
 8082036:	b083      	sub	sp, #12
 8082038:	af00      	add	r7, sp, #0
 808203a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 808203c:	bf00      	nop
 808203e:	370c      	adds	r7, #12
 8082040:	46bd      	mov	sp, r7
 8082042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082046:	4770      	bx	lr

08082048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8082048:	b480      	push	{r7}
 808204a:	b083      	sub	sp, #12
 808204c:	af00      	add	r7, sp, #0
 808204e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8082050:	bf00      	nop
 8082052:	370c      	adds	r7, #12
 8082054:	46bd      	mov	sp, r7
 8082056:	f85d 7b04 	ldr.w	r7, [sp], #4
 808205a:	4770      	bx	lr

0808205c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 808205c:	b480      	push	{r7}
 808205e:	b083      	sub	sp, #12
 8082060:	af00      	add	r7, sp, #0
 8082062:	6078      	str	r0, [r7, #4]
 8082064:	460b      	mov	r3, r1
 8082066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8082068:	bf00      	nop
 808206a:	370c      	adds	r7, #12
 808206c:	46bd      	mov	sp, r7
 808206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082072:	4770      	bx	lr

08082074 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8082074:	b580      	push	{r7, lr}
 8082076:	b084      	sub	sp, #16
 8082078:	af00      	add	r7, sp, #0
 808207a:	60f8      	str	r0, [r7, #12]
 808207c:	60b9      	str	r1, [r7, #8]
 808207e:	603b      	str	r3, [r7, #0]
 8082080:	4613      	mov	r3, r2
 8082082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8082084:	e02c      	b.n	80820e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8082086:	69bb      	ldr	r3, [r7, #24]
 8082088:	f1b3 3fff 	cmp.w	r3, #4294967295
 808208c:	d028      	beq.n	80820e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 808208e:	69bb      	ldr	r3, [r7, #24]
 8082090:	2b00      	cmp	r3, #0
 8082092:	d007      	beq.n	80820a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8082094:	f7fe fd3a 	bl	8080b0c <HAL_GetTick>
 8082098:	4602      	mov	r2, r0
 808209a:	683b      	ldr	r3, [r7, #0]
 808209c:	1ad3      	subs	r3, r2, r3
 808209e:	69ba      	ldr	r2, [r7, #24]
 80820a0:	429a      	cmp	r2, r3
 80820a2:	d21d      	bcs.n	80820e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80820a4:	68fb      	ldr	r3, [r7, #12]
 80820a6:	681b      	ldr	r3, [r3, #0]
 80820a8:	68da      	ldr	r2, [r3, #12]
 80820aa:	68fb      	ldr	r3, [r7, #12]
 80820ac:	681b      	ldr	r3, [r3, #0]
 80820ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80820b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80820b4:	68fb      	ldr	r3, [r7, #12]
 80820b6:	681b      	ldr	r3, [r3, #0]
 80820b8:	695a      	ldr	r2, [r3, #20]
 80820ba:	68fb      	ldr	r3, [r7, #12]
 80820bc:	681b      	ldr	r3, [r3, #0]
 80820be:	f022 0201 	bic.w	r2, r2, #1
 80820c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80820c4:	68fb      	ldr	r3, [r7, #12]
 80820c6:	2220      	movs	r2, #32
 80820c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80820cc:	68fb      	ldr	r3, [r7, #12]
 80820ce:	2220      	movs	r2, #32
 80820d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80820d4:	68fb      	ldr	r3, [r7, #12]
 80820d6:	2200      	movs	r2, #0
 80820d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80820dc:	2303      	movs	r3, #3
 80820de:	e00f      	b.n	8082100 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80820e0:	68fb      	ldr	r3, [r7, #12]
 80820e2:	681b      	ldr	r3, [r3, #0]
 80820e4:	681a      	ldr	r2, [r3, #0]
 80820e6:	68bb      	ldr	r3, [r7, #8]
 80820e8:	4013      	ands	r3, r2
 80820ea:	68ba      	ldr	r2, [r7, #8]
 80820ec:	429a      	cmp	r2, r3
 80820ee:	bf0c      	ite	eq
 80820f0:	2301      	moveq	r3, #1
 80820f2:	2300      	movne	r3, #0
 80820f4:	b2db      	uxtb	r3, r3
 80820f6:	461a      	mov	r2, r3
 80820f8:	79fb      	ldrb	r3, [r7, #7]
 80820fa:	429a      	cmp	r2, r3
 80820fc:	d0c3      	beq.n	8082086 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80820fe:	2300      	movs	r3, #0
}
 8082100:	4618      	mov	r0, r3
 8082102:	3710      	adds	r7, #16
 8082104:	46bd      	mov	sp, r7
 8082106:	bd80      	pop	{r7, pc}

08082108 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8082108:	b480      	push	{r7}
 808210a:	b083      	sub	sp, #12
 808210c:	af00      	add	r7, sp, #0
 808210e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8082110:	687b      	ldr	r3, [r7, #4]
 8082112:	681b      	ldr	r3, [r3, #0]
 8082114:	68da      	ldr	r2, [r3, #12]
 8082116:	687b      	ldr	r3, [r7, #4]
 8082118:	681b      	ldr	r3, [r3, #0]
 808211a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 808211e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8082120:	687b      	ldr	r3, [r7, #4]
 8082122:	681b      	ldr	r3, [r3, #0]
 8082124:	695a      	ldr	r2, [r3, #20]
 8082126:	687b      	ldr	r3, [r7, #4]
 8082128:	681b      	ldr	r3, [r3, #0]
 808212a:	f022 0201 	bic.w	r2, r2, #1
 808212e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8082130:	687b      	ldr	r3, [r7, #4]
 8082132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082134:	2b01      	cmp	r3, #1
 8082136:	d107      	bne.n	8082148 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8082138:	687b      	ldr	r3, [r7, #4]
 808213a:	681b      	ldr	r3, [r3, #0]
 808213c:	68da      	ldr	r2, [r3, #12]
 808213e:	687b      	ldr	r3, [r7, #4]
 8082140:	681b      	ldr	r3, [r3, #0]
 8082142:	f022 0210 	bic.w	r2, r2, #16
 8082146:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8082148:	687b      	ldr	r3, [r7, #4]
 808214a:	2220      	movs	r2, #32
 808214c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8082150:	687b      	ldr	r3, [r7, #4]
 8082152:	2200      	movs	r2, #0
 8082154:	631a      	str	r2, [r3, #48]	; 0x30
}
 8082156:	bf00      	nop
 8082158:	370c      	adds	r7, #12
 808215a:	46bd      	mov	sp, r7
 808215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082160:	4770      	bx	lr

08082162 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8082162:	b580      	push	{r7, lr}
 8082164:	b084      	sub	sp, #16
 8082166:	af00      	add	r7, sp, #0
 8082168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 808216a:	687b      	ldr	r3, [r7, #4]
 808216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808216e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8082170:	68fb      	ldr	r3, [r7, #12]
 8082172:	2200      	movs	r2, #0
 8082174:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8082176:	68fb      	ldr	r3, [r7, #12]
 8082178:	2200      	movs	r2, #0
 808217a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 808217c:	68f8      	ldr	r0, [r7, #12]
 808217e:	f7ff ff63 	bl	8082048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8082182:	bf00      	nop
 8082184:	3710      	adds	r7, #16
 8082186:	46bd      	mov	sp, r7
 8082188:	bd80      	pop	{r7, pc}

0808218a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 808218a:	b480      	push	{r7}
 808218c:	b085      	sub	sp, #20
 808218e:	af00      	add	r7, sp, #0
 8082190:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8082192:	687b      	ldr	r3, [r7, #4]
 8082194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8082198:	b2db      	uxtb	r3, r3
 808219a:	2b21      	cmp	r3, #33	; 0x21
 808219c:	d13e      	bne.n	808221c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 808219e:	687b      	ldr	r3, [r7, #4]
 80821a0:	689b      	ldr	r3, [r3, #8]
 80821a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80821a6:	d114      	bne.n	80821d2 <UART_Transmit_IT+0x48>
 80821a8:	687b      	ldr	r3, [r7, #4]
 80821aa:	691b      	ldr	r3, [r3, #16]
 80821ac:	2b00      	cmp	r3, #0
 80821ae:	d110      	bne.n	80821d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80821b0:	687b      	ldr	r3, [r7, #4]
 80821b2:	6a1b      	ldr	r3, [r3, #32]
 80821b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80821b6:	68fb      	ldr	r3, [r7, #12]
 80821b8:	881b      	ldrh	r3, [r3, #0]
 80821ba:	461a      	mov	r2, r3
 80821bc:	687b      	ldr	r3, [r7, #4]
 80821be:	681b      	ldr	r3, [r3, #0]
 80821c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80821c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80821c6:	687b      	ldr	r3, [r7, #4]
 80821c8:	6a1b      	ldr	r3, [r3, #32]
 80821ca:	1c9a      	adds	r2, r3, #2
 80821cc:	687b      	ldr	r3, [r7, #4]
 80821ce:	621a      	str	r2, [r3, #32]
 80821d0:	e008      	b.n	80821e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80821d2:	687b      	ldr	r3, [r7, #4]
 80821d4:	6a1b      	ldr	r3, [r3, #32]
 80821d6:	1c59      	adds	r1, r3, #1
 80821d8:	687a      	ldr	r2, [r7, #4]
 80821da:	6211      	str	r1, [r2, #32]
 80821dc:	781a      	ldrb	r2, [r3, #0]
 80821de:	687b      	ldr	r3, [r7, #4]
 80821e0:	681b      	ldr	r3, [r3, #0]
 80821e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80821e4:	687b      	ldr	r3, [r7, #4]
 80821e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80821e8:	b29b      	uxth	r3, r3
 80821ea:	3b01      	subs	r3, #1
 80821ec:	b29b      	uxth	r3, r3
 80821ee:	687a      	ldr	r2, [r7, #4]
 80821f0:	4619      	mov	r1, r3
 80821f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80821f4:	2b00      	cmp	r3, #0
 80821f6:	d10f      	bne.n	8082218 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80821f8:	687b      	ldr	r3, [r7, #4]
 80821fa:	681b      	ldr	r3, [r3, #0]
 80821fc:	68da      	ldr	r2, [r3, #12]
 80821fe:	687b      	ldr	r3, [r7, #4]
 8082200:	681b      	ldr	r3, [r3, #0]
 8082202:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8082206:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8082208:	687b      	ldr	r3, [r7, #4]
 808220a:	681b      	ldr	r3, [r3, #0]
 808220c:	68da      	ldr	r2, [r3, #12]
 808220e:	687b      	ldr	r3, [r7, #4]
 8082210:	681b      	ldr	r3, [r3, #0]
 8082212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8082216:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8082218:	2300      	movs	r3, #0
 808221a:	e000      	b.n	808221e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 808221c:	2302      	movs	r3, #2
  }
}
 808221e:	4618      	mov	r0, r3
 8082220:	3714      	adds	r7, #20
 8082222:	46bd      	mov	sp, r7
 8082224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082228:	4770      	bx	lr

0808222a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 808222a:	b580      	push	{r7, lr}
 808222c:	b082      	sub	sp, #8
 808222e:	af00      	add	r7, sp, #0
 8082230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8082232:	687b      	ldr	r3, [r7, #4]
 8082234:	681b      	ldr	r3, [r3, #0]
 8082236:	68da      	ldr	r2, [r3, #12]
 8082238:	687b      	ldr	r3, [r7, #4]
 808223a:	681b      	ldr	r3, [r3, #0]
 808223c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8082240:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8082242:	687b      	ldr	r3, [r7, #4]
 8082244:	2220      	movs	r2, #32
 8082246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 808224a:	6878      	ldr	r0, [r7, #4]
 808224c:	f7ff fee8 	bl	8082020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8082250:	2300      	movs	r3, #0
}
 8082252:	4618      	mov	r0, r3
 8082254:	3708      	adds	r7, #8
 8082256:	46bd      	mov	sp, r7
 8082258:	bd80      	pop	{r7, pc}

0808225a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 808225a:	b580      	push	{r7, lr}
 808225c:	b084      	sub	sp, #16
 808225e:	af00      	add	r7, sp, #0
 8082260:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8082262:	687b      	ldr	r3, [r7, #4]
 8082264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8082268:	b2db      	uxtb	r3, r3
 808226a:	2b22      	cmp	r3, #34	; 0x22
 808226c:	f040 8087 	bne.w	808237e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8082270:	687b      	ldr	r3, [r7, #4]
 8082272:	689b      	ldr	r3, [r3, #8]
 8082274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8082278:	d117      	bne.n	80822aa <UART_Receive_IT+0x50>
 808227a:	687b      	ldr	r3, [r7, #4]
 808227c:	691b      	ldr	r3, [r3, #16]
 808227e:	2b00      	cmp	r3, #0
 8082280:	d113      	bne.n	80822aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8082282:	2300      	movs	r3, #0
 8082284:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8082286:	687b      	ldr	r3, [r7, #4]
 8082288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808228a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 808228c:	687b      	ldr	r3, [r7, #4]
 808228e:	681b      	ldr	r3, [r3, #0]
 8082290:	685b      	ldr	r3, [r3, #4]
 8082292:	b29b      	uxth	r3, r3
 8082294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8082298:	b29a      	uxth	r2, r3
 808229a:	68bb      	ldr	r3, [r7, #8]
 808229c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 808229e:	687b      	ldr	r3, [r7, #4]
 80822a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80822a2:	1c9a      	adds	r2, r3, #2
 80822a4:	687b      	ldr	r3, [r7, #4]
 80822a6:	629a      	str	r2, [r3, #40]	; 0x28
 80822a8:	e026      	b.n	80822f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80822aa:	687b      	ldr	r3, [r7, #4]
 80822ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80822ae:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80822b0:	2300      	movs	r3, #0
 80822b2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80822b4:	687b      	ldr	r3, [r7, #4]
 80822b6:	689b      	ldr	r3, [r3, #8]
 80822b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80822bc:	d007      	beq.n	80822ce <UART_Receive_IT+0x74>
 80822be:	687b      	ldr	r3, [r7, #4]
 80822c0:	689b      	ldr	r3, [r3, #8]
 80822c2:	2b00      	cmp	r3, #0
 80822c4:	d10a      	bne.n	80822dc <UART_Receive_IT+0x82>
 80822c6:	687b      	ldr	r3, [r7, #4]
 80822c8:	691b      	ldr	r3, [r3, #16]
 80822ca:	2b00      	cmp	r3, #0
 80822cc:	d106      	bne.n	80822dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80822ce:	687b      	ldr	r3, [r7, #4]
 80822d0:	681b      	ldr	r3, [r3, #0]
 80822d2:	685b      	ldr	r3, [r3, #4]
 80822d4:	b2da      	uxtb	r2, r3
 80822d6:	68fb      	ldr	r3, [r7, #12]
 80822d8:	701a      	strb	r2, [r3, #0]
 80822da:	e008      	b.n	80822ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80822dc:	687b      	ldr	r3, [r7, #4]
 80822de:	681b      	ldr	r3, [r3, #0]
 80822e0:	685b      	ldr	r3, [r3, #4]
 80822e2:	b2db      	uxtb	r3, r3
 80822e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80822e8:	b2da      	uxtb	r2, r3
 80822ea:	68fb      	ldr	r3, [r7, #12]
 80822ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80822ee:	687b      	ldr	r3, [r7, #4]
 80822f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80822f2:	1c5a      	adds	r2, r3, #1
 80822f4:	687b      	ldr	r3, [r7, #4]
 80822f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80822f8:	687b      	ldr	r3, [r7, #4]
 80822fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80822fc:	b29b      	uxth	r3, r3
 80822fe:	3b01      	subs	r3, #1
 8082300:	b29b      	uxth	r3, r3
 8082302:	687a      	ldr	r2, [r7, #4]
 8082304:	4619      	mov	r1, r3
 8082306:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8082308:	2b00      	cmp	r3, #0
 808230a:	d136      	bne.n	808237a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 808230c:	687b      	ldr	r3, [r7, #4]
 808230e:	681b      	ldr	r3, [r3, #0]
 8082310:	68da      	ldr	r2, [r3, #12]
 8082312:	687b      	ldr	r3, [r7, #4]
 8082314:	681b      	ldr	r3, [r3, #0]
 8082316:	f022 0220 	bic.w	r2, r2, #32
 808231a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 808231c:	687b      	ldr	r3, [r7, #4]
 808231e:	681b      	ldr	r3, [r3, #0]
 8082320:	68da      	ldr	r2, [r3, #12]
 8082322:	687b      	ldr	r3, [r7, #4]
 8082324:	681b      	ldr	r3, [r3, #0]
 8082326:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 808232a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 808232c:	687b      	ldr	r3, [r7, #4]
 808232e:	681b      	ldr	r3, [r3, #0]
 8082330:	695a      	ldr	r2, [r3, #20]
 8082332:	687b      	ldr	r3, [r7, #4]
 8082334:	681b      	ldr	r3, [r3, #0]
 8082336:	f022 0201 	bic.w	r2, r2, #1
 808233a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 808233c:	687b      	ldr	r3, [r7, #4]
 808233e:	2220      	movs	r2, #32
 8082340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8082344:	687b      	ldr	r3, [r7, #4]
 8082346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082348:	2b01      	cmp	r3, #1
 808234a:	d10e      	bne.n	808236a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 808234c:	687b      	ldr	r3, [r7, #4]
 808234e:	681b      	ldr	r3, [r3, #0]
 8082350:	68da      	ldr	r2, [r3, #12]
 8082352:	687b      	ldr	r3, [r7, #4]
 8082354:	681b      	ldr	r3, [r3, #0]
 8082356:	f022 0210 	bic.w	r2, r2, #16
 808235a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 808235c:	687b      	ldr	r3, [r7, #4]
 808235e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8082360:	4619      	mov	r1, r3
 8082362:	6878      	ldr	r0, [r7, #4]
 8082364:	f7ff fe7a 	bl	808205c <HAL_UARTEx_RxEventCallback>
 8082368:	e002      	b.n	8082370 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 808236a:	6878      	ldr	r0, [r7, #4]
 808236c:	f7ff fe62 	bl	8082034 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8082370:	687b      	ldr	r3, [r7, #4]
 8082372:	2200      	movs	r2, #0
 8082374:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8082376:	2300      	movs	r3, #0
 8082378:	e002      	b.n	8082380 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 808237a:	2300      	movs	r3, #0
 808237c:	e000      	b.n	8082380 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 808237e:	2302      	movs	r3, #2
  }
}
 8082380:	4618      	mov	r0, r3
 8082382:	3710      	adds	r7, #16
 8082384:	46bd      	mov	sp, r7
 8082386:	bd80      	pop	{r7, pc}

08082388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8082388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808238c:	b09f      	sub	sp, #124	; 0x7c
 808238e:	af00      	add	r7, sp, #0
 8082390:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8082392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8082394:	681b      	ldr	r3, [r3, #0]
 8082396:	691b      	ldr	r3, [r3, #16]
 8082398:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 808239c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 808239e:	68d9      	ldr	r1, [r3, #12]
 80823a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80823a2:	681a      	ldr	r2, [r3, #0]
 80823a4:	ea40 0301 	orr.w	r3, r0, r1
 80823a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80823aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80823ac:	689a      	ldr	r2, [r3, #8]
 80823ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80823b0:	691b      	ldr	r3, [r3, #16]
 80823b2:	431a      	orrs	r2, r3
 80823b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80823b6:	695b      	ldr	r3, [r3, #20]
 80823b8:	431a      	orrs	r2, r3
 80823ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80823bc:	69db      	ldr	r3, [r3, #28]
 80823be:	4313      	orrs	r3, r2
 80823c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80823c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80823c4:	681b      	ldr	r3, [r3, #0]
 80823c6:	68db      	ldr	r3, [r3, #12]
 80823c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80823cc:	f021 010c 	bic.w	r1, r1, #12
 80823d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80823d2:	681a      	ldr	r2, [r3, #0]
 80823d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80823d6:	430b      	orrs	r3, r1
 80823d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80823da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80823dc:	681b      	ldr	r3, [r3, #0]
 80823de:	695b      	ldr	r3, [r3, #20]
 80823e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80823e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80823e6:	6999      	ldr	r1, [r3, #24]
 80823e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80823ea:	681a      	ldr	r2, [r3, #0]
 80823ec:	ea40 0301 	orr.w	r3, r0, r1
 80823f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80823f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80823f4:	681a      	ldr	r2, [r3, #0]
 80823f6:	4bc5      	ldr	r3, [pc, #788]	; (808270c <UART_SetConfig+0x384>)
 80823f8:	429a      	cmp	r2, r3
 80823fa:	d004      	beq.n	8082406 <UART_SetConfig+0x7e>
 80823fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80823fe:	681a      	ldr	r2, [r3, #0]
 8082400:	4bc3      	ldr	r3, [pc, #780]	; (8082710 <UART_SetConfig+0x388>)
 8082402:	429a      	cmp	r2, r3
 8082404:	d103      	bne.n	808240e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8082406:	f7ff fb6b 	bl	8081ae0 <HAL_RCC_GetPCLK2Freq>
 808240a:	6778      	str	r0, [r7, #116]	; 0x74
 808240c:	e002      	b.n	8082414 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 808240e:	f7ff fb53 	bl	8081ab8 <HAL_RCC_GetPCLK1Freq>
 8082412:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8082414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8082416:	69db      	ldr	r3, [r3, #28]
 8082418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 808241c:	f040 80b6 	bne.w	808258c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8082420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8082422:	461c      	mov	r4, r3
 8082424:	f04f 0500 	mov.w	r5, #0
 8082428:	4622      	mov	r2, r4
 808242a:	462b      	mov	r3, r5
 808242c:	1891      	adds	r1, r2, r2
 808242e:	6439      	str	r1, [r7, #64]	; 0x40
 8082430:	415b      	adcs	r3, r3
 8082432:	647b      	str	r3, [r7, #68]	; 0x44
 8082434:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8082438:	1912      	adds	r2, r2, r4
 808243a:	eb45 0303 	adc.w	r3, r5, r3
 808243e:	f04f 0000 	mov.w	r0, #0
 8082442:	f04f 0100 	mov.w	r1, #0
 8082446:	00d9      	lsls	r1, r3, #3
 8082448:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 808244c:	00d0      	lsls	r0, r2, #3
 808244e:	4602      	mov	r2, r0
 8082450:	460b      	mov	r3, r1
 8082452:	1911      	adds	r1, r2, r4
 8082454:	6639      	str	r1, [r7, #96]	; 0x60
 8082456:	416b      	adcs	r3, r5
 8082458:	667b      	str	r3, [r7, #100]	; 0x64
 808245a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 808245c:	685b      	ldr	r3, [r3, #4]
 808245e:	461a      	mov	r2, r3
 8082460:	f04f 0300 	mov.w	r3, #0
 8082464:	1891      	adds	r1, r2, r2
 8082466:	63b9      	str	r1, [r7, #56]	; 0x38
 8082468:	415b      	adcs	r3, r3
 808246a:	63fb      	str	r3, [r7, #60]	; 0x3c
 808246c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8082470:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8082474:	f7fd fea8 	bl	80801c8 <__aeabi_uldivmod>
 8082478:	4602      	mov	r2, r0
 808247a:	460b      	mov	r3, r1
 808247c:	4ba5      	ldr	r3, [pc, #660]	; (8082714 <UART_SetConfig+0x38c>)
 808247e:	fba3 2302 	umull	r2, r3, r3, r2
 8082482:	095b      	lsrs	r3, r3, #5
 8082484:	011e      	lsls	r6, r3, #4
 8082486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8082488:	461c      	mov	r4, r3
 808248a:	f04f 0500 	mov.w	r5, #0
 808248e:	4622      	mov	r2, r4
 8082490:	462b      	mov	r3, r5
 8082492:	1891      	adds	r1, r2, r2
 8082494:	6339      	str	r1, [r7, #48]	; 0x30
 8082496:	415b      	adcs	r3, r3
 8082498:	637b      	str	r3, [r7, #52]	; 0x34
 808249a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 808249e:	1912      	adds	r2, r2, r4
 80824a0:	eb45 0303 	adc.w	r3, r5, r3
 80824a4:	f04f 0000 	mov.w	r0, #0
 80824a8:	f04f 0100 	mov.w	r1, #0
 80824ac:	00d9      	lsls	r1, r3, #3
 80824ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80824b2:	00d0      	lsls	r0, r2, #3
 80824b4:	4602      	mov	r2, r0
 80824b6:	460b      	mov	r3, r1
 80824b8:	1911      	adds	r1, r2, r4
 80824ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80824bc:	416b      	adcs	r3, r5
 80824be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80824c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80824c2:	685b      	ldr	r3, [r3, #4]
 80824c4:	461a      	mov	r2, r3
 80824c6:	f04f 0300 	mov.w	r3, #0
 80824ca:	1891      	adds	r1, r2, r2
 80824cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80824ce:	415b      	adcs	r3, r3
 80824d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80824d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80824d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80824da:	f7fd fe75 	bl	80801c8 <__aeabi_uldivmod>
 80824de:	4602      	mov	r2, r0
 80824e0:	460b      	mov	r3, r1
 80824e2:	4b8c      	ldr	r3, [pc, #560]	; (8082714 <UART_SetConfig+0x38c>)
 80824e4:	fba3 1302 	umull	r1, r3, r3, r2
 80824e8:	095b      	lsrs	r3, r3, #5
 80824ea:	2164      	movs	r1, #100	; 0x64
 80824ec:	fb01 f303 	mul.w	r3, r1, r3
 80824f0:	1ad3      	subs	r3, r2, r3
 80824f2:	00db      	lsls	r3, r3, #3
 80824f4:	3332      	adds	r3, #50	; 0x32
 80824f6:	4a87      	ldr	r2, [pc, #540]	; (8082714 <UART_SetConfig+0x38c>)
 80824f8:	fba2 2303 	umull	r2, r3, r2, r3
 80824fc:	095b      	lsrs	r3, r3, #5
 80824fe:	005b      	lsls	r3, r3, #1
 8082500:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8082504:	441e      	add	r6, r3
 8082506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8082508:	4618      	mov	r0, r3
 808250a:	f04f 0100 	mov.w	r1, #0
 808250e:	4602      	mov	r2, r0
 8082510:	460b      	mov	r3, r1
 8082512:	1894      	adds	r4, r2, r2
 8082514:	623c      	str	r4, [r7, #32]
 8082516:	415b      	adcs	r3, r3
 8082518:	627b      	str	r3, [r7, #36]	; 0x24
 808251a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 808251e:	1812      	adds	r2, r2, r0
 8082520:	eb41 0303 	adc.w	r3, r1, r3
 8082524:	f04f 0400 	mov.w	r4, #0
 8082528:	f04f 0500 	mov.w	r5, #0
 808252c:	00dd      	lsls	r5, r3, #3
 808252e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8082532:	00d4      	lsls	r4, r2, #3
 8082534:	4622      	mov	r2, r4
 8082536:	462b      	mov	r3, r5
 8082538:	1814      	adds	r4, r2, r0
 808253a:	653c      	str	r4, [r7, #80]	; 0x50
 808253c:	414b      	adcs	r3, r1
 808253e:	657b      	str	r3, [r7, #84]	; 0x54
 8082540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8082542:	685b      	ldr	r3, [r3, #4]
 8082544:	461a      	mov	r2, r3
 8082546:	f04f 0300 	mov.w	r3, #0
 808254a:	1891      	adds	r1, r2, r2
 808254c:	61b9      	str	r1, [r7, #24]
 808254e:	415b      	adcs	r3, r3
 8082550:	61fb      	str	r3, [r7, #28]
 8082552:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8082556:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 808255a:	f7fd fe35 	bl	80801c8 <__aeabi_uldivmod>
 808255e:	4602      	mov	r2, r0
 8082560:	460b      	mov	r3, r1
 8082562:	4b6c      	ldr	r3, [pc, #432]	; (8082714 <UART_SetConfig+0x38c>)
 8082564:	fba3 1302 	umull	r1, r3, r3, r2
 8082568:	095b      	lsrs	r3, r3, #5
 808256a:	2164      	movs	r1, #100	; 0x64
 808256c:	fb01 f303 	mul.w	r3, r1, r3
 8082570:	1ad3      	subs	r3, r2, r3
 8082572:	00db      	lsls	r3, r3, #3
 8082574:	3332      	adds	r3, #50	; 0x32
 8082576:	4a67      	ldr	r2, [pc, #412]	; (8082714 <UART_SetConfig+0x38c>)
 8082578:	fba2 2303 	umull	r2, r3, r2, r3
 808257c:	095b      	lsrs	r3, r3, #5
 808257e:	f003 0207 	and.w	r2, r3, #7
 8082582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8082584:	681b      	ldr	r3, [r3, #0]
 8082586:	4432      	add	r2, r6
 8082588:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 808258a:	e0b9      	b.n	8082700 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 808258c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 808258e:	461c      	mov	r4, r3
 8082590:	f04f 0500 	mov.w	r5, #0
 8082594:	4622      	mov	r2, r4
 8082596:	462b      	mov	r3, r5
 8082598:	1891      	adds	r1, r2, r2
 808259a:	6139      	str	r1, [r7, #16]
 808259c:	415b      	adcs	r3, r3
 808259e:	617b      	str	r3, [r7, #20]
 80825a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80825a4:	1912      	adds	r2, r2, r4
 80825a6:	eb45 0303 	adc.w	r3, r5, r3
 80825aa:	f04f 0000 	mov.w	r0, #0
 80825ae:	f04f 0100 	mov.w	r1, #0
 80825b2:	00d9      	lsls	r1, r3, #3
 80825b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80825b8:	00d0      	lsls	r0, r2, #3
 80825ba:	4602      	mov	r2, r0
 80825bc:	460b      	mov	r3, r1
 80825be:	eb12 0804 	adds.w	r8, r2, r4
 80825c2:	eb43 0905 	adc.w	r9, r3, r5
 80825c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80825c8:	685b      	ldr	r3, [r3, #4]
 80825ca:	4618      	mov	r0, r3
 80825cc:	f04f 0100 	mov.w	r1, #0
 80825d0:	f04f 0200 	mov.w	r2, #0
 80825d4:	f04f 0300 	mov.w	r3, #0
 80825d8:	008b      	lsls	r3, r1, #2
 80825da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80825de:	0082      	lsls	r2, r0, #2
 80825e0:	4640      	mov	r0, r8
 80825e2:	4649      	mov	r1, r9
 80825e4:	f7fd fdf0 	bl	80801c8 <__aeabi_uldivmod>
 80825e8:	4602      	mov	r2, r0
 80825ea:	460b      	mov	r3, r1
 80825ec:	4b49      	ldr	r3, [pc, #292]	; (8082714 <UART_SetConfig+0x38c>)
 80825ee:	fba3 2302 	umull	r2, r3, r3, r2
 80825f2:	095b      	lsrs	r3, r3, #5
 80825f4:	011e      	lsls	r6, r3, #4
 80825f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80825f8:	4618      	mov	r0, r3
 80825fa:	f04f 0100 	mov.w	r1, #0
 80825fe:	4602      	mov	r2, r0
 8082600:	460b      	mov	r3, r1
 8082602:	1894      	adds	r4, r2, r2
 8082604:	60bc      	str	r4, [r7, #8]
 8082606:	415b      	adcs	r3, r3
 8082608:	60fb      	str	r3, [r7, #12]
 808260a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 808260e:	1812      	adds	r2, r2, r0
 8082610:	eb41 0303 	adc.w	r3, r1, r3
 8082614:	f04f 0400 	mov.w	r4, #0
 8082618:	f04f 0500 	mov.w	r5, #0
 808261c:	00dd      	lsls	r5, r3, #3
 808261e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8082622:	00d4      	lsls	r4, r2, #3
 8082624:	4622      	mov	r2, r4
 8082626:	462b      	mov	r3, r5
 8082628:	1814      	adds	r4, r2, r0
 808262a:	64bc      	str	r4, [r7, #72]	; 0x48
 808262c:	414b      	adcs	r3, r1
 808262e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8082630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8082632:	685b      	ldr	r3, [r3, #4]
 8082634:	4618      	mov	r0, r3
 8082636:	f04f 0100 	mov.w	r1, #0
 808263a:	f04f 0200 	mov.w	r2, #0
 808263e:	f04f 0300 	mov.w	r3, #0
 8082642:	008b      	lsls	r3, r1, #2
 8082644:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8082648:	0082      	lsls	r2, r0, #2
 808264a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 808264e:	f7fd fdbb 	bl	80801c8 <__aeabi_uldivmod>
 8082652:	4602      	mov	r2, r0
 8082654:	460b      	mov	r3, r1
 8082656:	4b2f      	ldr	r3, [pc, #188]	; (8082714 <UART_SetConfig+0x38c>)
 8082658:	fba3 1302 	umull	r1, r3, r3, r2
 808265c:	095b      	lsrs	r3, r3, #5
 808265e:	2164      	movs	r1, #100	; 0x64
 8082660:	fb01 f303 	mul.w	r3, r1, r3
 8082664:	1ad3      	subs	r3, r2, r3
 8082666:	011b      	lsls	r3, r3, #4
 8082668:	3332      	adds	r3, #50	; 0x32
 808266a:	4a2a      	ldr	r2, [pc, #168]	; (8082714 <UART_SetConfig+0x38c>)
 808266c:	fba2 2303 	umull	r2, r3, r2, r3
 8082670:	095b      	lsrs	r3, r3, #5
 8082672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8082676:	441e      	add	r6, r3
 8082678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 808267a:	4618      	mov	r0, r3
 808267c:	f04f 0100 	mov.w	r1, #0
 8082680:	4602      	mov	r2, r0
 8082682:	460b      	mov	r3, r1
 8082684:	1894      	adds	r4, r2, r2
 8082686:	603c      	str	r4, [r7, #0]
 8082688:	415b      	adcs	r3, r3
 808268a:	607b      	str	r3, [r7, #4]
 808268c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8082690:	1812      	adds	r2, r2, r0
 8082692:	eb41 0303 	adc.w	r3, r1, r3
 8082696:	f04f 0400 	mov.w	r4, #0
 808269a:	f04f 0500 	mov.w	r5, #0
 808269e:	00dd      	lsls	r5, r3, #3
 80826a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80826a4:	00d4      	lsls	r4, r2, #3
 80826a6:	4622      	mov	r2, r4
 80826a8:	462b      	mov	r3, r5
 80826aa:	eb12 0a00 	adds.w	sl, r2, r0
 80826ae:	eb43 0b01 	adc.w	fp, r3, r1
 80826b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80826b4:	685b      	ldr	r3, [r3, #4]
 80826b6:	4618      	mov	r0, r3
 80826b8:	f04f 0100 	mov.w	r1, #0
 80826bc:	f04f 0200 	mov.w	r2, #0
 80826c0:	f04f 0300 	mov.w	r3, #0
 80826c4:	008b      	lsls	r3, r1, #2
 80826c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80826ca:	0082      	lsls	r2, r0, #2
 80826cc:	4650      	mov	r0, sl
 80826ce:	4659      	mov	r1, fp
 80826d0:	f7fd fd7a 	bl	80801c8 <__aeabi_uldivmod>
 80826d4:	4602      	mov	r2, r0
 80826d6:	460b      	mov	r3, r1
 80826d8:	4b0e      	ldr	r3, [pc, #56]	; (8082714 <UART_SetConfig+0x38c>)
 80826da:	fba3 1302 	umull	r1, r3, r3, r2
 80826de:	095b      	lsrs	r3, r3, #5
 80826e0:	2164      	movs	r1, #100	; 0x64
 80826e2:	fb01 f303 	mul.w	r3, r1, r3
 80826e6:	1ad3      	subs	r3, r2, r3
 80826e8:	011b      	lsls	r3, r3, #4
 80826ea:	3332      	adds	r3, #50	; 0x32
 80826ec:	4a09      	ldr	r2, [pc, #36]	; (8082714 <UART_SetConfig+0x38c>)
 80826ee:	fba2 2303 	umull	r2, r3, r2, r3
 80826f2:	095b      	lsrs	r3, r3, #5
 80826f4:	f003 020f 	and.w	r2, r3, #15
 80826f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80826fa:	681b      	ldr	r3, [r3, #0]
 80826fc:	4432      	add	r2, r6
 80826fe:	609a      	str	r2, [r3, #8]
}
 8082700:	bf00      	nop
 8082702:	377c      	adds	r7, #124	; 0x7c
 8082704:	46bd      	mov	sp, r7
 8082706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808270a:	bf00      	nop
 808270c:	40011000 	.word	0x40011000
 8082710:	40011400 	.word	0x40011400
 8082714:	51eb851f 	.word	0x51eb851f

08082718 <__errno>:
 8082718:	4b01      	ldr	r3, [pc, #4]	; (8082720 <__errno+0x8>)
 808271a:	6818      	ldr	r0, [r3, #0]
 808271c:	4770      	bx	lr
 808271e:	bf00      	nop
 8082720:	2000000c 	.word	0x2000000c

08082724 <__libc_init_array>:
 8082724:	b570      	push	{r4, r5, r6, lr}
 8082726:	4d0d      	ldr	r5, [pc, #52]	; (808275c <__libc_init_array+0x38>)
 8082728:	4c0d      	ldr	r4, [pc, #52]	; (8082760 <__libc_init_array+0x3c>)
 808272a:	1b64      	subs	r4, r4, r5
 808272c:	10a4      	asrs	r4, r4, #2
 808272e:	2600      	movs	r6, #0
 8082730:	42a6      	cmp	r6, r4
 8082732:	d109      	bne.n	8082748 <__libc_init_array+0x24>
 8082734:	4d0b      	ldr	r5, [pc, #44]	; (8082764 <__libc_init_array+0x40>)
 8082736:	4c0c      	ldr	r4, [pc, #48]	; (8082768 <__libc_init_array+0x44>)
 8082738:	f000 fce6 	bl	8083108 <_init>
 808273c:	1b64      	subs	r4, r4, r5
 808273e:	10a4      	asrs	r4, r4, #2
 8082740:	2600      	movs	r6, #0
 8082742:	42a6      	cmp	r6, r4
 8082744:	d105      	bne.n	8082752 <__libc_init_array+0x2e>
 8082746:	bd70      	pop	{r4, r5, r6, pc}
 8082748:	f855 3b04 	ldr.w	r3, [r5], #4
 808274c:	4798      	blx	r3
 808274e:	3601      	adds	r6, #1
 8082750:	e7ee      	b.n	8082730 <__libc_init_array+0xc>
 8082752:	f855 3b04 	ldr.w	r3, [r5], #4
 8082756:	4798      	blx	r3
 8082758:	3601      	adds	r6, #1
 808275a:	e7f2      	b.n	8082742 <__libc_init_array+0x1e>
 808275c:	080831bc 	.word	0x080831bc
 8082760:	080831bc 	.word	0x080831bc
 8082764:	080831bc 	.word	0x080831bc
 8082768:	080831c0 	.word	0x080831c0

0808276c <memset>:
 808276c:	4402      	add	r2, r0
 808276e:	4603      	mov	r3, r0
 8082770:	4293      	cmp	r3, r2
 8082772:	d100      	bne.n	8082776 <memset+0xa>
 8082774:	4770      	bx	lr
 8082776:	f803 1b01 	strb.w	r1, [r3], #1
 808277a:	e7f9      	b.n	8082770 <memset+0x4>

0808277c <_puts_r>:
 808277c:	b570      	push	{r4, r5, r6, lr}
 808277e:	460e      	mov	r6, r1
 8082780:	4605      	mov	r5, r0
 8082782:	b118      	cbz	r0, 808278c <_puts_r+0x10>
 8082784:	6983      	ldr	r3, [r0, #24]
 8082786:	b90b      	cbnz	r3, 808278c <_puts_r+0x10>
 8082788:	f000 fa48 	bl	8082c1c <__sinit>
 808278c:	69ab      	ldr	r3, [r5, #24]
 808278e:	68ac      	ldr	r4, [r5, #8]
 8082790:	b913      	cbnz	r3, 8082798 <_puts_r+0x1c>
 8082792:	4628      	mov	r0, r5
 8082794:	f000 fa42 	bl	8082c1c <__sinit>
 8082798:	4b2c      	ldr	r3, [pc, #176]	; (808284c <_puts_r+0xd0>)
 808279a:	429c      	cmp	r4, r3
 808279c:	d120      	bne.n	80827e0 <_puts_r+0x64>
 808279e:	686c      	ldr	r4, [r5, #4]
 80827a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80827a2:	07db      	lsls	r3, r3, #31
 80827a4:	d405      	bmi.n	80827b2 <_puts_r+0x36>
 80827a6:	89a3      	ldrh	r3, [r4, #12]
 80827a8:	0598      	lsls	r0, r3, #22
 80827aa:	d402      	bmi.n	80827b2 <_puts_r+0x36>
 80827ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80827ae:	f000 fad3 	bl	8082d58 <__retarget_lock_acquire_recursive>
 80827b2:	89a3      	ldrh	r3, [r4, #12]
 80827b4:	0719      	lsls	r1, r3, #28
 80827b6:	d51d      	bpl.n	80827f4 <_puts_r+0x78>
 80827b8:	6923      	ldr	r3, [r4, #16]
 80827ba:	b1db      	cbz	r3, 80827f4 <_puts_r+0x78>
 80827bc:	3e01      	subs	r6, #1
 80827be:	68a3      	ldr	r3, [r4, #8]
 80827c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80827c4:	3b01      	subs	r3, #1
 80827c6:	60a3      	str	r3, [r4, #8]
 80827c8:	bb39      	cbnz	r1, 808281a <_puts_r+0x9e>
 80827ca:	2b00      	cmp	r3, #0
 80827cc:	da38      	bge.n	8082840 <_puts_r+0xc4>
 80827ce:	4622      	mov	r2, r4
 80827d0:	210a      	movs	r1, #10
 80827d2:	4628      	mov	r0, r5
 80827d4:	f000 f848 	bl	8082868 <__swbuf_r>
 80827d8:	3001      	adds	r0, #1
 80827da:	d011      	beq.n	8082800 <_puts_r+0x84>
 80827dc:	250a      	movs	r5, #10
 80827de:	e011      	b.n	8082804 <_puts_r+0x88>
 80827e0:	4b1b      	ldr	r3, [pc, #108]	; (8082850 <_puts_r+0xd4>)
 80827e2:	429c      	cmp	r4, r3
 80827e4:	d101      	bne.n	80827ea <_puts_r+0x6e>
 80827e6:	68ac      	ldr	r4, [r5, #8]
 80827e8:	e7da      	b.n	80827a0 <_puts_r+0x24>
 80827ea:	4b1a      	ldr	r3, [pc, #104]	; (8082854 <_puts_r+0xd8>)
 80827ec:	429c      	cmp	r4, r3
 80827ee:	bf08      	it	eq
 80827f0:	68ec      	ldreq	r4, [r5, #12]
 80827f2:	e7d5      	b.n	80827a0 <_puts_r+0x24>
 80827f4:	4621      	mov	r1, r4
 80827f6:	4628      	mov	r0, r5
 80827f8:	f000 f888 	bl	808290c <__swsetup_r>
 80827fc:	2800      	cmp	r0, #0
 80827fe:	d0dd      	beq.n	80827bc <_puts_r+0x40>
 8082800:	f04f 35ff 	mov.w	r5, #4294967295
 8082804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8082806:	07da      	lsls	r2, r3, #31
 8082808:	d405      	bmi.n	8082816 <_puts_r+0x9a>
 808280a:	89a3      	ldrh	r3, [r4, #12]
 808280c:	059b      	lsls	r3, r3, #22
 808280e:	d402      	bmi.n	8082816 <_puts_r+0x9a>
 8082810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8082812:	f000 faa2 	bl	8082d5a <__retarget_lock_release_recursive>
 8082816:	4628      	mov	r0, r5
 8082818:	bd70      	pop	{r4, r5, r6, pc}
 808281a:	2b00      	cmp	r3, #0
 808281c:	da04      	bge.n	8082828 <_puts_r+0xac>
 808281e:	69a2      	ldr	r2, [r4, #24]
 8082820:	429a      	cmp	r2, r3
 8082822:	dc06      	bgt.n	8082832 <_puts_r+0xb6>
 8082824:	290a      	cmp	r1, #10
 8082826:	d004      	beq.n	8082832 <_puts_r+0xb6>
 8082828:	6823      	ldr	r3, [r4, #0]
 808282a:	1c5a      	adds	r2, r3, #1
 808282c:	6022      	str	r2, [r4, #0]
 808282e:	7019      	strb	r1, [r3, #0]
 8082830:	e7c5      	b.n	80827be <_puts_r+0x42>
 8082832:	4622      	mov	r2, r4
 8082834:	4628      	mov	r0, r5
 8082836:	f000 f817 	bl	8082868 <__swbuf_r>
 808283a:	3001      	adds	r0, #1
 808283c:	d1bf      	bne.n	80827be <_puts_r+0x42>
 808283e:	e7df      	b.n	8082800 <_puts_r+0x84>
 8082840:	6823      	ldr	r3, [r4, #0]
 8082842:	250a      	movs	r5, #10
 8082844:	1c5a      	adds	r2, r3, #1
 8082846:	6022      	str	r2, [r4, #0]
 8082848:	701d      	strb	r5, [r3, #0]
 808284a:	e7db      	b.n	8082804 <_puts_r+0x88>
 808284c:	08083174 	.word	0x08083174
 8082850:	08083194 	.word	0x08083194
 8082854:	08083154 	.word	0x08083154

08082858 <puts>:
 8082858:	4b02      	ldr	r3, [pc, #8]	; (8082864 <puts+0xc>)
 808285a:	4601      	mov	r1, r0
 808285c:	6818      	ldr	r0, [r3, #0]
 808285e:	f7ff bf8d 	b.w	808277c <_puts_r>
 8082862:	bf00      	nop
 8082864:	2000000c 	.word	0x2000000c

08082868 <__swbuf_r>:
 8082868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808286a:	460e      	mov	r6, r1
 808286c:	4614      	mov	r4, r2
 808286e:	4605      	mov	r5, r0
 8082870:	b118      	cbz	r0, 808287a <__swbuf_r+0x12>
 8082872:	6983      	ldr	r3, [r0, #24]
 8082874:	b90b      	cbnz	r3, 808287a <__swbuf_r+0x12>
 8082876:	f000 f9d1 	bl	8082c1c <__sinit>
 808287a:	4b21      	ldr	r3, [pc, #132]	; (8082900 <__swbuf_r+0x98>)
 808287c:	429c      	cmp	r4, r3
 808287e:	d12b      	bne.n	80828d8 <__swbuf_r+0x70>
 8082880:	686c      	ldr	r4, [r5, #4]
 8082882:	69a3      	ldr	r3, [r4, #24]
 8082884:	60a3      	str	r3, [r4, #8]
 8082886:	89a3      	ldrh	r3, [r4, #12]
 8082888:	071a      	lsls	r2, r3, #28
 808288a:	d52f      	bpl.n	80828ec <__swbuf_r+0x84>
 808288c:	6923      	ldr	r3, [r4, #16]
 808288e:	b36b      	cbz	r3, 80828ec <__swbuf_r+0x84>
 8082890:	6923      	ldr	r3, [r4, #16]
 8082892:	6820      	ldr	r0, [r4, #0]
 8082894:	1ac0      	subs	r0, r0, r3
 8082896:	6963      	ldr	r3, [r4, #20]
 8082898:	b2f6      	uxtb	r6, r6
 808289a:	4283      	cmp	r3, r0
 808289c:	4637      	mov	r7, r6
 808289e:	dc04      	bgt.n	80828aa <__swbuf_r+0x42>
 80828a0:	4621      	mov	r1, r4
 80828a2:	4628      	mov	r0, r5
 80828a4:	f000 f926 	bl	8082af4 <_fflush_r>
 80828a8:	bb30      	cbnz	r0, 80828f8 <__swbuf_r+0x90>
 80828aa:	68a3      	ldr	r3, [r4, #8]
 80828ac:	3b01      	subs	r3, #1
 80828ae:	60a3      	str	r3, [r4, #8]
 80828b0:	6823      	ldr	r3, [r4, #0]
 80828b2:	1c5a      	adds	r2, r3, #1
 80828b4:	6022      	str	r2, [r4, #0]
 80828b6:	701e      	strb	r6, [r3, #0]
 80828b8:	6963      	ldr	r3, [r4, #20]
 80828ba:	3001      	adds	r0, #1
 80828bc:	4283      	cmp	r3, r0
 80828be:	d004      	beq.n	80828ca <__swbuf_r+0x62>
 80828c0:	89a3      	ldrh	r3, [r4, #12]
 80828c2:	07db      	lsls	r3, r3, #31
 80828c4:	d506      	bpl.n	80828d4 <__swbuf_r+0x6c>
 80828c6:	2e0a      	cmp	r6, #10
 80828c8:	d104      	bne.n	80828d4 <__swbuf_r+0x6c>
 80828ca:	4621      	mov	r1, r4
 80828cc:	4628      	mov	r0, r5
 80828ce:	f000 f911 	bl	8082af4 <_fflush_r>
 80828d2:	b988      	cbnz	r0, 80828f8 <__swbuf_r+0x90>
 80828d4:	4638      	mov	r0, r7
 80828d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80828d8:	4b0a      	ldr	r3, [pc, #40]	; (8082904 <__swbuf_r+0x9c>)
 80828da:	429c      	cmp	r4, r3
 80828dc:	d101      	bne.n	80828e2 <__swbuf_r+0x7a>
 80828de:	68ac      	ldr	r4, [r5, #8]
 80828e0:	e7cf      	b.n	8082882 <__swbuf_r+0x1a>
 80828e2:	4b09      	ldr	r3, [pc, #36]	; (8082908 <__swbuf_r+0xa0>)
 80828e4:	429c      	cmp	r4, r3
 80828e6:	bf08      	it	eq
 80828e8:	68ec      	ldreq	r4, [r5, #12]
 80828ea:	e7ca      	b.n	8082882 <__swbuf_r+0x1a>
 80828ec:	4621      	mov	r1, r4
 80828ee:	4628      	mov	r0, r5
 80828f0:	f000 f80c 	bl	808290c <__swsetup_r>
 80828f4:	2800      	cmp	r0, #0
 80828f6:	d0cb      	beq.n	8082890 <__swbuf_r+0x28>
 80828f8:	f04f 37ff 	mov.w	r7, #4294967295
 80828fc:	e7ea      	b.n	80828d4 <__swbuf_r+0x6c>
 80828fe:	bf00      	nop
 8082900:	08083174 	.word	0x08083174
 8082904:	08083194 	.word	0x08083194
 8082908:	08083154 	.word	0x08083154

0808290c <__swsetup_r>:
 808290c:	4b32      	ldr	r3, [pc, #200]	; (80829d8 <__swsetup_r+0xcc>)
 808290e:	b570      	push	{r4, r5, r6, lr}
 8082910:	681d      	ldr	r5, [r3, #0]
 8082912:	4606      	mov	r6, r0
 8082914:	460c      	mov	r4, r1
 8082916:	b125      	cbz	r5, 8082922 <__swsetup_r+0x16>
 8082918:	69ab      	ldr	r3, [r5, #24]
 808291a:	b913      	cbnz	r3, 8082922 <__swsetup_r+0x16>
 808291c:	4628      	mov	r0, r5
 808291e:	f000 f97d 	bl	8082c1c <__sinit>
 8082922:	4b2e      	ldr	r3, [pc, #184]	; (80829dc <__swsetup_r+0xd0>)
 8082924:	429c      	cmp	r4, r3
 8082926:	d10f      	bne.n	8082948 <__swsetup_r+0x3c>
 8082928:	686c      	ldr	r4, [r5, #4]
 808292a:	89a3      	ldrh	r3, [r4, #12]
 808292c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8082930:	0719      	lsls	r1, r3, #28
 8082932:	d42c      	bmi.n	808298e <__swsetup_r+0x82>
 8082934:	06dd      	lsls	r5, r3, #27
 8082936:	d411      	bmi.n	808295c <__swsetup_r+0x50>
 8082938:	2309      	movs	r3, #9
 808293a:	6033      	str	r3, [r6, #0]
 808293c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8082940:	81a3      	strh	r3, [r4, #12]
 8082942:	f04f 30ff 	mov.w	r0, #4294967295
 8082946:	e03e      	b.n	80829c6 <__swsetup_r+0xba>
 8082948:	4b25      	ldr	r3, [pc, #148]	; (80829e0 <__swsetup_r+0xd4>)
 808294a:	429c      	cmp	r4, r3
 808294c:	d101      	bne.n	8082952 <__swsetup_r+0x46>
 808294e:	68ac      	ldr	r4, [r5, #8]
 8082950:	e7eb      	b.n	808292a <__swsetup_r+0x1e>
 8082952:	4b24      	ldr	r3, [pc, #144]	; (80829e4 <__swsetup_r+0xd8>)
 8082954:	429c      	cmp	r4, r3
 8082956:	bf08      	it	eq
 8082958:	68ec      	ldreq	r4, [r5, #12]
 808295a:	e7e6      	b.n	808292a <__swsetup_r+0x1e>
 808295c:	0758      	lsls	r0, r3, #29
 808295e:	d512      	bpl.n	8082986 <__swsetup_r+0x7a>
 8082960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8082962:	b141      	cbz	r1, 8082976 <__swsetup_r+0x6a>
 8082964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8082968:	4299      	cmp	r1, r3
 808296a:	d002      	beq.n	8082972 <__swsetup_r+0x66>
 808296c:	4630      	mov	r0, r6
 808296e:	f000 fa59 	bl	8082e24 <_free_r>
 8082972:	2300      	movs	r3, #0
 8082974:	6363      	str	r3, [r4, #52]	; 0x34
 8082976:	89a3      	ldrh	r3, [r4, #12]
 8082978:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 808297c:	81a3      	strh	r3, [r4, #12]
 808297e:	2300      	movs	r3, #0
 8082980:	6063      	str	r3, [r4, #4]
 8082982:	6923      	ldr	r3, [r4, #16]
 8082984:	6023      	str	r3, [r4, #0]
 8082986:	89a3      	ldrh	r3, [r4, #12]
 8082988:	f043 0308 	orr.w	r3, r3, #8
 808298c:	81a3      	strh	r3, [r4, #12]
 808298e:	6923      	ldr	r3, [r4, #16]
 8082990:	b94b      	cbnz	r3, 80829a6 <__swsetup_r+0x9a>
 8082992:	89a3      	ldrh	r3, [r4, #12]
 8082994:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8082998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 808299c:	d003      	beq.n	80829a6 <__swsetup_r+0x9a>
 808299e:	4621      	mov	r1, r4
 80829a0:	4630      	mov	r0, r6
 80829a2:	f000 f9ff 	bl	8082da4 <__smakebuf_r>
 80829a6:	89a0      	ldrh	r0, [r4, #12]
 80829a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80829ac:	f010 0301 	ands.w	r3, r0, #1
 80829b0:	d00a      	beq.n	80829c8 <__swsetup_r+0xbc>
 80829b2:	2300      	movs	r3, #0
 80829b4:	60a3      	str	r3, [r4, #8]
 80829b6:	6963      	ldr	r3, [r4, #20]
 80829b8:	425b      	negs	r3, r3
 80829ba:	61a3      	str	r3, [r4, #24]
 80829bc:	6923      	ldr	r3, [r4, #16]
 80829be:	b943      	cbnz	r3, 80829d2 <__swsetup_r+0xc6>
 80829c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80829c4:	d1ba      	bne.n	808293c <__swsetup_r+0x30>
 80829c6:	bd70      	pop	{r4, r5, r6, pc}
 80829c8:	0781      	lsls	r1, r0, #30
 80829ca:	bf58      	it	pl
 80829cc:	6963      	ldrpl	r3, [r4, #20]
 80829ce:	60a3      	str	r3, [r4, #8]
 80829d0:	e7f4      	b.n	80829bc <__swsetup_r+0xb0>
 80829d2:	2000      	movs	r0, #0
 80829d4:	e7f7      	b.n	80829c6 <__swsetup_r+0xba>
 80829d6:	bf00      	nop
 80829d8:	2000000c 	.word	0x2000000c
 80829dc:	08083174 	.word	0x08083174
 80829e0:	08083194 	.word	0x08083194
 80829e4:	08083154 	.word	0x08083154

080829e8 <__sflush_r>:
 80829e8:	898a      	ldrh	r2, [r1, #12]
 80829ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80829ee:	4605      	mov	r5, r0
 80829f0:	0710      	lsls	r0, r2, #28
 80829f2:	460c      	mov	r4, r1
 80829f4:	d458      	bmi.n	8082aa8 <__sflush_r+0xc0>
 80829f6:	684b      	ldr	r3, [r1, #4]
 80829f8:	2b00      	cmp	r3, #0
 80829fa:	dc05      	bgt.n	8082a08 <__sflush_r+0x20>
 80829fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80829fe:	2b00      	cmp	r3, #0
 8082a00:	dc02      	bgt.n	8082a08 <__sflush_r+0x20>
 8082a02:	2000      	movs	r0, #0
 8082a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8082a0a:	2e00      	cmp	r6, #0
 8082a0c:	d0f9      	beq.n	8082a02 <__sflush_r+0x1a>
 8082a0e:	2300      	movs	r3, #0
 8082a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8082a14:	682f      	ldr	r7, [r5, #0]
 8082a16:	602b      	str	r3, [r5, #0]
 8082a18:	d032      	beq.n	8082a80 <__sflush_r+0x98>
 8082a1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8082a1c:	89a3      	ldrh	r3, [r4, #12]
 8082a1e:	075a      	lsls	r2, r3, #29
 8082a20:	d505      	bpl.n	8082a2e <__sflush_r+0x46>
 8082a22:	6863      	ldr	r3, [r4, #4]
 8082a24:	1ac0      	subs	r0, r0, r3
 8082a26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8082a28:	b10b      	cbz	r3, 8082a2e <__sflush_r+0x46>
 8082a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8082a2c:	1ac0      	subs	r0, r0, r3
 8082a2e:	2300      	movs	r3, #0
 8082a30:	4602      	mov	r2, r0
 8082a32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8082a34:	6a21      	ldr	r1, [r4, #32]
 8082a36:	4628      	mov	r0, r5
 8082a38:	47b0      	blx	r6
 8082a3a:	1c43      	adds	r3, r0, #1
 8082a3c:	89a3      	ldrh	r3, [r4, #12]
 8082a3e:	d106      	bne.n	8082a4e <__sflush_r+0x66>
 8082a40:	6829      	ldr	r1, [r5, #0]
 8082a42:	291d      	cmp	r1, #29
 8082a44:	d82c      	bhi.n	8082aa0 <__sflush_r+0xb8>
 8082a46:	4a2a      	ldr	r2, [pc, #168]	; (8082af0 <__sflush_r+0x108>)
 8082a48:	40ca      	lsrs	r2, r1
 8082a4a:	07d6      	lsls	r6, r2, #31
 8082a4c:	d528      	bpl.n	8082aa0 <__sflush_r+0xb8>
 8082a4e:	2200      	movs	r2, #0
 8082a50:	6062      	str	r2, [r4, #4]
 8082a52:	04d9      	lsls	r1, r3, #19
 8082a54:	6922      	ldr	r2, [r4, #16]
 8082a56:	6022      	str	r2, [r4, #0]
 8082a58:	d504      	bpl.n	8082a64 <__sflush_r+0x7c>
 8082a5a:	1c42      	adds	r2, r0, #1
 8082a5c:	d101      	bne.n	8082a62 <__sflush_r+0x7a>
 8082a5e:	682b      	ldr	r3, [r5, #0]
 8082a60:	b903      	cbnz	r3, 8082a64 <__sflush_r+0x7c>
 8082a62:	6560      	str	r0, [r4, #84]	; 0x54
 8082a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8082a66:	602f      	str	r7, [r5, #0]
 8082a68:	2900      	cmp	r1, #0
 8082a6a:	d0ca      	beq.n	8082a02 <__sflush_r+0x1a>
 8082a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8082a70:	4299      	cmp	r1, r3
 8082a72:	d002      	beq.n	8082a7a <__sflush_r+0x92>
 8082a74:	4628      	mov	r0, r5
 8082a76:	f000 f9d5 	bl	8082e24 <_free_r>
 8082a7a:	2000      	movs	r0, #0
 8082a7c:	6360      	str	r0, [r4, #52]	; 0x34
 8082a7e:	e7c1      	b.n	8082a04 <__sflush_r+0x1c>
 8082a80:	6a21      	ldr	r1, [r4, #32]
 8082a82:	2301      	movs	r3, #1
 8082a84:	4628      	mov	r0, r5
 8082a86:	47b0      	blx	r6
 8082a88:	1c41      	adds	r1, r0, #1
 8082a8a:	d1c7      	bne.n	8082a1c <__sflush_r+0x34>
 8082a8c:	682b      	ldr	r3, [r5, #0]
 8082a8e:	2b00      	cmp	r3, #0
 8082a90:	d0c4      	beq.n	8082a1c <__sflush_r+0x34>
 8082a92:	2b1d      	cmp	r3, #29
 8082a94:	d001      	beq.n	8082a9a <__sflush_r+0xb2>
 8082a96:	2b16      	cmp	r3, #22
 8082a98:	d101      	bne.n	8082a9e <__sflush_r+0xb6>
 8082a9a:	602f      	str	r7, [r5, #0]
 8082a9c:	e7b1      	b.n	8082a02 <__sflush_r+0x1a>
 8082a9e:	89a3      	ldrh	r3, [r4, #12]
 8082aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8082aa4:	81a3      	strh	r3, [r4, #12]
 8082aa6:	e7ad      	b.n	8082a04 <__sflush_r+0x1c>
 8082aa8:	690f      	ldr	r7, [r1, #16]
 8082aaa:	2f00      	cmp	r7, #0
 8082aac:	d0a9      	beq.n	8082a02 <__sflush_r+0x1a>
 8082aae:	0793      	lsls	r3, r2, #30
 8082ab0:	680e      	ldr	r6, [r1, #0]
 8082ab2:	bf08      	it	eq
 8082ab4:	694b      	ldreq	r3, [r1, #20]
 8082ab6:	600f      	str	r7, [r1, #0]
 8082ab8:	bf18      	it	ne
 8082aba:	2300      	movne	r3, #0
 8082abc:	eba6 0807 	sub.w	r8, r6, r7
 8082ac0:	608b      	str	r3, [r1, #8]
 8082ac2:	f1b8 0f00 	cmp.w	r8, #0
 8082ac6:	dd9c      	ble.n	8082a02 <__sflush_r+0x1a>
 8082ac8:	6a21      	ldr	r1, [r4, #32]
 8082aca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8082acc:	4643      	mov	r3, r8
 8082ace:	463a      	mov	r2, r7
 8082ad0:	4628      	mov	r0, r5
 8082ad2:	47b0      	blx	r6
 8082ad4:	2800      	cmp	r0, #0
 8082ad6:	dc06      	bgt.n	8082ae6 <__sflush_r+0xfe>
 8082ad8:	89a3      	ldrh	r3, [r4, #12]
 8082ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8082ade:	81a3      	strh	r3, [r4, #12]
 8082ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8082ae4:	e78e      	b.n	8082a04 <__sflush_r+0x1c>
 8082ae6:	4407      	add	r7, r0
 8082ae8:	eba8 0800 	sub.w	r8, r8, r0
 8082aec:	e7e9      	b.n	8082ac2 <__sflush_r+0xda>
 8082aee:	bf00      	nop
 8082af0:	20400001 	.word	0x20400001

08082af4 <_fflush_r>:
 8082af4:	b538      	push	{r3, r4, r5, lr}
 8082af6:	690b      	ldr	r3, [r1, #16]
 8082af8:	4605      	mov	r5, r0
 8082afa:	460c      	mov	r4, r1
 8082afc:	b913      	cbnz	r3, 8082b04 <_fflush_r+0x10>
 8082afe:	2500      	movs	r5, #0
 8082b00:	4628      	mov	r0, r5
 8082b02:	bd38      	pop	{r3, r4, r5, pc}
 8082b04:	b118      	cbz	r0, 8082b0e <_fflush_r+0x1a>
 8082b06:	6983      	ldr	r3, [r0, #24]
 8082b08:	b90b      	cbnz	r3, 8082b0e <_fflush_r+0x1a>
 8082b0a:	f000 f887 	bl	8082c1c <__sinit>
 8082b0e:	4b14      	ldr	r3, [pc, #80]	; (8082b60 <_fflush_r+0x6c>)
 8082b10:	429c      	cmp	r4, r3
 8082b12:	d11b      	bne.n	8082b4c <_fflush_r+0x58>
 8082b14:	686c      	ldr	r4, [r5, #4]
 8082b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8082b1a:	2b00      	cmp	r3, #0
 8082b1c:	d0ef      	beq.n	8082afe <_fflush_r+0xa>
 8082b1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8082b20:	07d0      	lsls	r0, r2, #31
 8082b22:	d404      	bmi.n	8082b2e <_fflush_r+0x3a>
 8082b24:	0599      	lsls	r1, r3, #22
 8082b26:	d402      	bmi.n	8082b2e <_fflush_r+0x3a>
 8082b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8082b2a:	f000 f915 	bl	8082d58 <__retarget_lock_acquire_recursive>
 8082b2e:	4628      	mov	r0, r5
 8082b30:	4621      	mov	r1, r4
 8082b32:	f7ff ff59 	bl	80829e8 <__sflush_r>
 8082b36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8082b38:	07da      	lsls	r2, r3, #31
 8082b3a:	4605      	mov	r5, r0
 8082b3c:	d4e0      	bmi.n	8082b00 <_fflush_r+0xc>
 8082b3e:	89a3      	ldrh	r3, [r4, #12]
 8082b40:	059b      	lsls	r3, r3, #22
 8082b42:	d4dd      	bmi.n	8082b00 <_fflush_r+0xc>
 8082b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8082b46:	f000 f908 	bl	8082d5a <__retarget_lock_release_recursive>
 8082b4a:	e7d9      	b.n	8082b00 <_fflush_r+0xc>
 8082b4c:	4b05      	ldr	r3, [pc, #20]	; (8082b64 <_fflush_r+0x70>)
 8082b4e:	429c      	cmp	r4, r3
 8082b50:	d101      	bne.n	8082b56 <_fflush_r+0x62>
 8082b52:	68ac      	ldr	r4, [r5, #8]
 8082b54:	e7df      	b.n	8082b16 <_fflush_r+0x22>
 8082b56:	4b04      	ldr	r3, [pc, #16]	; (8082b68 <_fflush_r+0x74>)
 8082b58:	429c      	cmp	r4, r3
 8082b5a:	bf08      	it	eq
 8082b5c:	68ec      	ldreq	r4, [r5, #12]
 8082b5e:	e7da      	b.n	8082b16 <_fflush_r+0x22>
 8082b60:	08083174 	.word	0x08083174
 8082b64:	08083194 	.word	0x08083194
 8082b68:	08083154 	.word	0x08083154

08082b6c <std>:
 8082b6c:	2300      	movs	r3, #0
 8082b6e:	b510      	push	{r4, lr}
 8082b70:	4604      	mov	r4, r0
 8082b72:	e9c0 3300 	strd	r3, r3, [r0]
 8082b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8082b7a:	6083      	str	r3, [r0, #8]
 8082b7c:	8181      	strh	r1, [r0, #12]
 8082b7e:	6643      	str	r3, [r0, #100]	; 0x64
 8082b80:	81c2      	strh	r2, [r0, #14]
 8082b82:	6183      	str	r3, [r0, #24]
 8082b84:	4619      	mov	r1, r3
 8082b86:	2208      	movs	r2, #8
 8082b88:	305c      	adds	r0, #92	; 0x5c
 8082b8a:	f7ff fdef 	bl	808276c <memset>
 8082b8e:	4b05      	ldr	r3, [pc, #20]	; (8082ba4 <std+0x38>)
 8082b90:	6263      	str	r3, [r4, #36]	; 0x24
 8082b92:	4b05      	ldr	r3, [pc, #20]	; (8082ba8 <std+0x3c>)
 8082b94:	62a3      	str	r3, [r4, #40]	; 0x28
 8082b96:	4b05      	ldr	r3, [pc, #20]	; (8082bac <std+0x40>)
 8082b98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8082b9a:	4b05      	ldr	r3, [pc, #20]	; (8082bb0 <std+0x44>)
 8082b9c:	6224      	str	r4, [r4, #32]
 8082b9e:	6323      	str	r3, [r4, #48]	; 0x30
 8082ba0:	bd10      	pop	{r4, pc}
 8082ba2:	bf00      	nop
 8082ba4:	08082f99 	.word	0x08082f99
 8082ba8:	08082fbb 	.word	0x08082fbb
 8082bac:	08082ff3 	.word	0x08082ff3
 8082bb0:	08083017 	.word	0x08083017

08082bb4 <_cleanup_r>:
 8082bb4:	4901      	ldr	r1, [pc, #4]	; (8082bbc <_cleanup_r+0x8>)
 8082bb6:	f000 b8af 	b.w	8082d18 <_fwalk_reent>
 8082bba:	bf00      	nop
 8082bbc:	08082af5 	.word	0x08082af5

08082bc0 <__sfmoreglue>:
 8082bc0:	b570      	push	{r4, r5, r6, lr}
 8082bc2:	1e4a      	subs	r2, r1, #1
 8082bc4:	2568      	movs	r5, #104	; 0x68
 8082bc6:	4355      	muls	r5, r2
 8082bc8:	460e      	mov	r6, r1
 8082bca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8082bce:	f000 f979 	bl	8082ec4 <_malloc_r>
 8082bd2:	4604      	mov	r4, r0
 8082bd4:	b140      	cbz	r0, 8082be8 <__sfmoreglue+0x28>
 8082bd6:	2100      	movs	r1, #0
 8082bd8:	e9c0 1600 	strd	r1, r6, [r0]
 8082bdc:	300c      	adds	r0, #12
 8082bde:	60a0      	str	r0, [r4, #8]
 8082be0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8082be4:	f7ff fdc2 	bl	808276c <memset>
 8082be8:	4620      	mov	r0, r4
 8082bea:	bd70      	pop	{r4, r5, r6, pc}

08082bec <__sfp_lock_acquire>:
 8082bec:	4801      	ldr	r0, [pc, #4]	; (8082bf4 <__sfp_lock_acquire+0x8>)
 8082bee:	f000 b8b3 	b.w	8082d58 <__retarget_lock_acquire_recursive>
 8082bf2:	bf00      	nop
 8082bf4:	200000e8 	.word	0x200000e8

08082bf8 <__sfp_lock_release>:
 8082bf8:	4801      	ldr	r0, [pc, #4]	; (8082c00 <__sfp_lock_release+0x8>)
 8082bfa:	f000 b8ae 	b.w	8082d5a <__retarget_lock_release_recursive>
 8082bfe:	bf00      	nop
 8082c00:	200000e8 	.word	0x200000e8

08082c04 <__sinit_lock_acquire>:
 8082c04:	4801      	ldr	r0, [pc, #4]	; (8082c0c <__sinit_lock_acquire+0x8>)
 8082c06:	f000 b8a7 	b.w	8082d58 <__retarget_lock_acquire_recursive>
 8082c0a:	bf00      	nop
 8082c0c:	200000e3 	.word	0x200000e3

08082c10 <__sinit_lock_release>:
 8082c10:	4801      	ldr	r0, [pc, #4]	; (8082c18 <__sinit_lock_release+0x8>)
 8082c12:	f000 b8a2 	b.w	8082d5a <__retarget_lock_release_recursive>
 8082c16:	bf00      	nop
 8082c18:	200000e3 	.word	0x200000e3

08082c1c <__sinit>:
 8082c1c:	b510      	push	{r4, lr}
 8082c1e:	4604      	mov	r4, r0
 8082c20:	f7ff fff0 	bl	8082c04 <__sinit_lock_acquire>
 8082c24:	69a3      	ldr	r3, [r4, #24]
 8082c26:	b11b      	cbz	r3, 8082c30 <__sinit+0x14>
 8082c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082c2c:	f7ff bff0 	b.w	8082c10 <__sinit_lock_release>
 8082c30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8082c34:	6523      	str	r3, [r4, #80]	; 0x50
 8082c36:	4b13      	ldr	r3, [pc, #76]	; (8082c84 <__sinit+0x68>)
 8082c38:	4a13      	ldr	r2, [pc, #76]	; (8082c88 <__sinit+0x6c>)
 8082c3a:	681b      	ldr	r3, [r3, #0]
 8082c3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8082c3e:	42a3      	cmp	r3, r4
 8082c40:	bf04      	itt	eq
 8082c42:	2301      	moveq	r3, #1
 8082c44:	61a3      	streq	r3, [r4, #24]
 8082c46:	4620      	mov	r0, r4
 8082c48:	f000 f820 	bl	8082c8c <__sfp>
 8082c4c:	6060      	str	r0, [r4, #4]
 8082c4e:	4620      	mov	r0, r4
 8082c50:	f000 f81c 	bl	8082c8c <__sfp>
 8082c54:	60a0      	str	r0, [r4, #8]
 8082c56:	4620      	mov	r0, r4
 8082c58:	f000 f818 	bl	8082c8c <__sfp>
 8082c5c:	2200      	movs	r2, #0
 8082c5e:	60e0      	str	r0, [r4, #12]
 8082c60:	2104      	movs	r1, #4
 8082c62:	6860      	ldr	r0, [r4, #4]
 8082c64:	f7ff ff82 	bl	8082b6c <std>
 8082c68:	68a0      	ldr	r0, [r4, #8]
 8082c6a:	2201      	movs	r2, #1
 8082c6c:	2109      	movs	r1, #9
 8082c6e:	f7ff ff7d 	bl	8082b6c <std>
 8082c72:	68e0      	ldr	r0, [r4, #12]
 8082c74:	2202      	movs	r2, #2
 8082c76:	2112      	movs	r1, #18
 8082c78:	f7ff ff78 	bl	8082b6c <std>
 8082c7c:	2301      	movs	r3, #1
 8082c7e:	61a3      	str	r3, [r4, #24]
 8082c80:	e7d2      	b.n	8082c28 <__sinit+0xc>
 8082c82:	bf00      	nop
 8082c84:	08083150 	.word	0x08083150
 8082c88:	08082bb5 	.word	0x08082bb5

08082c8c <__sfp>:
 8082c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082c8e:	4607      	mov	r7, r0
 8082c90:	f7ff ffac 	bl	8082bec <__sfp_lock_acquire>
 8082c94:	4b1e      	ldr	r3, [pc, #120]	; (8082d10 <__sfp+0x84>)
 8082c96:	681e      	ldr	r6, [r3, #0]
 8082c98:	69b3      	ldr	r3, [r6, #24]
 8082c9a:	b913      	cbnz	r3, 8082ca2 <__sfp+0x16>
 8082c9c:	4630      	mov	r0, r6
 8082c9e:	f7ff ffbd 	bl	8082c1c <__sinit>
 8082ca2:	3648      	adds	r6, #72	; 0x48
 8082ca4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8082ca8:	3b01      	subs	r3, #1
 8082caa:	d503      	bpl.n	8082cb4 <__sfp+0x28>
 8082cac:	6833      	ldr	r3, [r6, #0]
 8082cae:	b30b      	cbz	r3, 8082cf4 <__sfp+0x68>
 8082cb0:	6836      	ldr	r6, [r6, #0]
 8082cb2:	e7f7      	b.n	8082ca4 <__sfp+0x18>
 8082cb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8082cb8:	b9d5      	cbnz	r5, 8082cf0 <__sfp+0x64>
 8082cba:	4b16      	ldr	r3, [pc, #88]	; (8082d14 <__sfp+0x88>)
 8082cbc:	60e3      	str	r3, [r4, #12]
 8082cbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8082cc2:	6665      	str	r5, [r4, #100]	; 0x64
 8082cc4:	f000 f847 	bl	8082d56 <__retarget_lock_init_recursive>
 8082cc8:	f7ff ff96 	bl	8082bf8 <__sfp_lock_release>
 8082ccc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8082cd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8082cd4:	6025      	str	r5, [r4, #0]
 8082cd6:	61a5      	str	r5, [r4, #24]
 8082cd8:	2208      	movs	r2, #8
 8082cda:	4629      	mov	r1, r5
 8082cdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8082ce0:	f7ff fd44 	bl	808276c <memset>
 8082ce4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8082ce8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8082cec:	4620      	mov	r0, r4
 8082cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8082cf0:	3468      	adds	r4, #104	; 0x68
 8082cf2:	e7d9      	b.n	8082ca8 <__sfp+0x1c>
 8082cf4:	2104      	movs	r1, #4
 8082cf6:	4638      	mov	r0, r7
 8082cf8:	f7ff ff62 	bl	8082bc0 <__sfmoreglue>
 8082cfc:	4604      	mov	r4, r0
 8082cfe:	6030      	str	r0, [r6, #0]
 8082d00:	2800      	cmp	r0, #0
 8082d02:	d1d5      	bne.n	8082cb0 <__sfp+0x24>
 8082d04:	f7ff ff78 	bl	8082bf8 <__sfp_lock_release>
 8082d08:	230c      	movs	r3, #12
 8082d0a:	603b      	str	r3, [r7, #0]
 8082d0c:	e7ee      	b.n	8082cec <__sfp+0x60>
 8082d0e:	bf00      	nop
 8082d10:	08083150 	.word	0x08083150
 8082d14:	ffff0001 	.word	0xffff0001

08082d18 <_fwalk_reent>:
 8082d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8082d1c:	4606      	mov	r6, r0
 8082d1e:	4688      	mov	r8, r1
 8082d20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8082d24:	2700      	movs	r7, #0
 8082d26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8082d2a:	f1b9 0901 	subs.w	r9, r9, #1
 8082d2e:	d505      	bpl.n	8082d3c <_fwalk_reent+0x24>
 8082d30:	6824      	ldr	r4, [r4, #0]
 8082d32:	2c00      	cmp	r4, #0
 8082d34:	d1f7      	bne.n	8082d26 <_fwalk_reent+0xe>
 8082d36:	4638      	mov	r0, r7
 8082d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8082d3c:	89ab      	ldrh	r3, [r5, #12]
 8082d3e:	2b01      	cmp	r3, #1
 8082d40:	d907      	bls.n	8082d52 <_fwalk_reent+0x3a>
 8082d42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8082d46:	3301      	adds	r3, #1
 8082d48:	d003      	beq.n	8082d52 <_fwalk_reent+0x3a>
 8082d4a:	4629      	mov	r1, r5
 8082d4c:	4630      	mov	r0, r6
 8082d4e:	47c0      	blx	r8
 8082d50:	4307      	orrs	r7, r0
 8082d52:	3568      	adds	r5, #104	; 0x68
 8082d54:	e7e9      	b.n	8082d2a <_fwalk_reent+0x12>

08082d56 <__retarget_lock_init_recursive>:
 8082d56:	4770      	bx	lr

08082d58 <__retarget_lock_acquire_recursive>:
 8082d58:	4770      	bx	lr

08082d5a <__retarget_lock_release_recursive>:
 8082d5a:	4770      	bx	lr

08082d5c <__swhatbuf_r>:
 8082d5c:	b570      	push	{r4, r5, r6, lr}
 8082d5e:	460e      	mov	r6, r1
 8082d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8082d64:	2900      	cmp	r1, #0
 8082d66:	b096      	sub	sp, #88	; 0x58
 8082d68:	4614      	mov	r4, r2
 8082d6a:	461d      	mov	r5, r3
 8082d6c:	da07      	bge.n	8082d7e <__swhatbuf_r+0x22>
 8082d6e:	2300      	movs	r3, #0
 8082d70:	602b      	str	r3, [r5, #0]
 8082d72:	89b3      	ldrh	r3, [r6, #12]
 8082d74:	061a      	lsls	r2, r3, #24
 8082d76:	d410      	bmi.n	8082d9a <__swhatbuf_r+0x3e>
 8082d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8082d7c:	e00e      	b.n	8082d9c <__swhatbuf_r+0x40>
 8082d7e:	466a      	mov	r2, sp
 8082d80:	f000 f970 	bl	8083064 <_fstat_r>
 8082d84:	2800      	cmp	r0, #0
 8082d86:	dbf2      	blt.n	8082d6e <__swhatbuf_r+0x12>
 8082d88:	9a01      	ldr	r2, [sp, #4]
 8082d8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8082d8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8082d92:	425a      	negs	r2, r3
 8082d94:	415a      	adcs	r2, r3
 8082d96:	602a      	str	r2, [r5, #0]
 8082d98:	e7ee      	b.n	8082d78 <__swhatbuf_r+0x1c>
 8082d9a:	2340      	movs	r3, #64	; 0x40
 8082d9c:	2000      	movs	r0, #0
 8082d9e:	6023      	str	r3, [r4, #0]
 8082da0:	b016      	add	sp, #88	; 0x58
 8082da2:	bd70      	pop	{r4, r5, r6, pc}

08082da4 <__smakebuf_r>:
 8082da4:	898b      	ldrh	r3, [r1, #12]
 8082da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8082da8:	079d      	lsls	r5, r3, #30
 8082daa:	4606      	mov	r6, r0
 8082dac:	460c      	mov	r4, r1
 8082dae:	d507      	bpl.n	8082dc0 <__smakebuf_r+0x1c>
 8082db0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8082db4:	6023      	str	r3, [r4, #0]
 8082db6:	6123      	str	r3, [r4, #16]
 8082db8:	2301      	movs	r3, #1
 8082dba:	6163      	str	r3, [r4, #20]
 8082dbc:	b002      	add	sp, #8
 8082dbe:	bd70      	pop	{r4, r5, r6, pc}
 8082dc0:	ab01      	add	r3, sp, #4
 8082dc2:	466a      	mov	r2, sp
 8082dc4:	f7ff ffca 	bl	8082d5c <__swhatbuf_r>
 8082dc8:	9900      	ldr	r1, [sp, #0]
 8082dca:	4605      	mov	r5, r0
 8082dcc:	4630      	mov	r0, r6
 8082dce:	f000 f879 	bl	8082ec4 <_malloc_r>
 8082dd2:	b948      	cbnz	r0, 8082de8 <__smakebuf_r+0x44>
 8082dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8082dd8:	059a      	lsls	r2, r3, #22
 8082dda:	d4ef      	bmi.n	8082dbc <__smakebuf_r+0x18>
 8082ddc:	f023 0303 	bic.w	r3, r3, #3
 8082de0:	f043 0302 	orr.w	r3, r3, #2
 8082de4:	81a3      	strh	r3, [r4, #12]
 8082de6:	e7e3      	b.n	8082db0 <__smakebuf_r+0xc>
 8082de8:	4b0d      	ldr	r3, [pc, #52]	; (8082e20 <__smakebuf_r+0x7c>)
 8082dea:	62b3      	str	r3, [r6, #40]	; 0x28
 8082dec:	89a3      	ldrh	r3, [r4, #12]
 8082dee:	6020      	str	r0, [r4, #0]
 8082df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8082df4:	81a3      	strh	r3, [r4, #12]
 8082df6:	9b00      	ldr	r3, [sp, #0]
 8082df8:	6163      	str	r3, [r4, #20]
 8082dfa:	9b01      	ldr	r3, [sp, #4]
 8082dfc:	6120      	str	r0, [r4, #16]
 8082dfe:	b15b      	cbz	r3, 8082e18 <__smakebuf_r+0x74>
 8082e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8082e04:	4630      	mov	r0, r6
 8082e06:	f000 f93f 	bl	8083088 <_isatty_r>
 8082e0a:	b128      	cbz	r0, 8082e18 <__smakebuf_r+0x74>
 8082e0c:	89a3      	ldrh	r3, [r4, #12]
 8082e0e:	f023 0303 	bic.w	r3, r3, #3
 8082e12:	f043 0301 	orr.w	r3, r3, #1
 8082e16:	81a3      	strh	r3, [r4, #12]
 8082e18:	89a0      	ldrh	r0, [r4, #12]
 8082e1a:	4305      	orrs	r5, r0
 8082e1c:	81a5      	strh	r5, [r4, #12]
 8082e1e:	e7cd      	b.n	8082dbc <__smakebuf_r+0x18>
 8082e20:	08082bb5 	.word	0x08082bb5

08082e24 <_free_r>:
 8082e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082e26:	2900      	cmp	r1, #0
 8082e28:	d048      	beq.n	8082ebc <_free_r+0x98>
 8082e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8082e2e:	9001      	str	r0, [sp, #4]
 8082e30:	2b00      	cmp	r3, #0
 8082e32:	f1a1 0404 	sub.w	r4, r1, #4
 8082e36:	bfb8      	it	lt
 8082e38:	18e4      	addlt	r4, r4, r3
 8082e3a:	f000 f947 	bl	80830cc <__malloc_lock>
 8082e3e:	4a20      	ldr	r2, [pc, #128]	; (8082ec0 <_free_r+0x9c>)
 8082e40:	9801      	ldr	r0, [sp, #4]
 8082e42:	6813      	ldr	r3, [r2, #0]
 8082e44:	4615      	mov	r5, r2
 8082e46:	b933      	cbnz	r3, 8082e56 <_free_r+0x32>
 8082e48:	6063      	str	r3, [r4, #4]
 8082e4a:	6014      	str	r4, [r2, #0]
 8082e4c:	b003      	add	sp, #12
 8082e4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8082e52:	f000 b941 	b.w	80830d8 <__malloc_unlock>
 8082e56:	42a3      	cmp	r3, r4
 8082e58:	d90b      	bls.n	8082e72 <_free_r+0x4e>
 8082e5a:	6821      	ldr	r1, [r4, #0]
 8082e5c:	1862      	adds	r2, r4, r1
 8082e5e:	4293      	cmp	r3, r2
 8082e60:	bf04      	itt	eq
 8082e62:	681a      	ldreq	r2, [r3, #0]
 8082e64:	685b      	ldreq	r3, [r3, #4]
 8082e66:	6063      	str	r3, [r4, #4]
 8082e68:	bf04      	itt	eq
 8082e6a:	1852      	addeq	r2, r2, r1
 8082e6c:	6022      	streq	r2, [r4, #0]
 8082e6e:	602c      	str	r4, [r5, #0]
 8082e70:	e7ec      	b.n	8082e4c <_free_r+0x28>
 8082e72:	461a      	mov	r2, r3
 8082e74:	685b      	ldr	r3, [r3, #4]
 8082e76:	b10b      	cbz	r3, 8082e7c <_free_r+0x58>
 8082e78:	42a3      	cmp	r3, r4
 8082e7a:	d9fa      	bls.n	8082e72 <_free_r+0x4e>
 8082e7c:	6811      	ldr	r1, [r2, #0]
 8082e7e:	1855      	adds	r5, r2, r1
 8082e80:	42a5      	cmp	r5, r4
 8082e82:	d10b      	bne.n	8082e9c <_free_r+0x78>
 8082e84:	6824      	ldr	r4, [r4, #0]
 8082e86:	4421      	add	r1, r4
 8082e88:	1854      	adds	r4, r2, r1
 8082e8a:	42a3      	cmp	r3, r4
 8082e8c:	6011      	str	r1, [r2, #0]
 8082e8e:	d1dd      	bne.n	8082e4c <_free_r+0x28>
 8082e90:	681c      	ldr	r4, [r3, #0]
 8082e92:	685b      	ldr	r3, [r3, #4]
 8082e94:	6053      	str	r3, [r2, #4]
 8082e96:	4421      	add	r1, r4
 8082e98:	6011      	str	r1, [r2, #0]
 8082e9a:	e7d7      	b.n	8082e4c <_free_r+0x28>
 8082e9c:	d902      	bls.n	8082ea4 <_free_r+0x80>
 8082e9e:	230c      	movs	r3, #12
 8082ea0:	6003      	str	r3, [r0, #0]
 8082ea2:	e7d3      	b.n	8082e4c <_free_r+0x28>
 8082ea4:	6825      	ldr	r5, [r4, #0]
 8082ea6:	1961      	adds	r1, r4, r5
 8082ea8:	428b      	cmp	r3, r1
 8082eaa:	bf04      	itt	eq
 8082eac:	6819      	ldreq	r1, [r3, #0]
 8082eae:	685b      	ldreq	r3, [r3, #4]
 8082eb0:	6063      	str	r3, [r4, #4]
 8082eb2:	bf04      	itt	eq
 8082eb4:	1949      	addeq	r1, r1, r5
 8082eb6:	6021      	streq	r1, [r4, #0]
 8082eb8:	6054      	str	r4, [r2, #4]
 8082eba:	e7c7      	b.n	8082e4c <_free_r+0x28>
 8082ebc:	b003      	add	sp, #12
 8082ebe:	bd30      	pop	{r4, r5, pc}
 8082ec0:	20000090 	.word	0x20000090

08082ec4 <_malloc_r>:
 8082ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082ec6:	1ccd      	adds	r5, r1, #3
 8082ec8:	f025 0503 	bic.w	r5, r5, #3
 8082ecc:	3508      	adds	r5, #8
 8082ece:	2d0c      	cmp	r5, #12
 8082ed0:	bf38      	it	cc
 8082ed2:	250c      	movcc	r5, #12
 8082ed4:	2d00      	cmp	r5, #0
 8082ed6:	4606      	mov	r6, r0
 8082ed8:	db01      	blt.n	8082ede <_malloc_r+0x1a>
 8082eda:	42a9      	cmp	r1, r5
 8082edc:	d903      	bls.n	8082ee6 <_malloc_r+0x22>
 8082ede:	230c      	movs	r3, #12
 8082ee0:	6033      	str	r3, [r6, #0]
 8082ee2:	2000      	movs	r0, #0
 8082ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8082ee6:	f000 f8f1 	bl	80830cc <__malloc_lock>
 8082eea:	4921      	ldr	r1, [pc, #132]	; (8082f70 <_malloc_r+0xac>)
 8082eec:	680a      	ldr	r2, [r1, #0]
 8082eee:	4614      	mov	r4, r2
 8082ef0:	b99c      	cbnz	r4, 8082f1a <_malloc_r+0x56>
 8082ef2:	4f20      	ldr	r7, [pc, #128]	; (8082f74 <_malloc_r+0xb0>)
 8082ef4:	683b      	ldr	r3, [r7, #0]
 8082ef6:	b923      	cbnz	r3, 8082f02 <_malloc_r+0x3e>
 8082ef8:	4621      	mov	r1, r4
 8082efa:	4630      	mov	r0, r6
 8082efc:	f000 f83c 	bl	8082f78 <_sbrk_r>
 8082f00:	6038      	str	r0, [r7, #0]
 8082f02:	4629      	mov	r1, r5
 8082f04:	4630      	mov	r0, r6
 8082f06:	f000 f837 	bl	8082f78 <_sbrk_r>
 8082f0a:	1c43      	adds	r3, r0, #1
 8082f0c:	d123      	bne.n	8082f56 <_malloc_r+0x92>
 8082f0e:	230c      	movs	r3, #12
 8082f10:	6033      	str	r3, [r6, #0]
 8082f12:	4630      	mov	r0, r6
 8082f14:	f000 f8e0 	bl	80830d8 <__malloc_unlock>
 8082f18:	e7e3      	b.n	8082ee2 <_malloc_r+0x1e>
 8082f1a:	6823      	ldr	r3, [r4, #0]
 8082f1c:	1b5b      	subs	r3, r3, r5
 8082f1e:	d417      	bmi.n	8082f50 <_malloc_r+0x8c>
 8082f20:	2b0b      	cmp	r3, #11
 8082f22:	d903      	bls.n	8082f2c <_malloc_r+0x68>
 8082f24:	6023      	str	r3, [r4, #0]
 8082f26:	441c      	add	r4, r3
 8082f28:	6025      	str	r5, [r4, #0]
 8082f2a:	e004      	b.n	8082f36 <_malloc_r+0x72>
 8082f2c:	6863      	ldr	r3, [r4, #4]
 8082f2e:	42a2      	cmp	r2, r4
 8082f30:	bf0c      	ite	eq
 8082f32:	600b      	streq	r3, [r1, #0]
 8082f34:	6053      	strne	r3, [r2, #4]
 8082f36:	4630      	mov	r0, r6
 8082f38:	f000 f8ce 	bl	80830d8 <__malloc_unlock>
 8082f3c:	f104 000b 	add.w	r0, r4, #11
 8082f40:	1d23      	adds	r3, r4, #4
 8082f42:	f020 0007 	bic.w	r0, r0, #7
 8082f46:	1ac2      	subs	r2, r0, r3
 8082f48:	d0cc      	beq.n	8082ee4 <_malloc_r+0x20>
 8082f4a:	1a1b      	subs	r3, r3, r0
 8082f4c:	50a3      	str	r3, [r4, r2]
 8082f4e:	e7c9      	b.n	8082ee4 <_malloc_r+0x20>
 8082f50:	4622      	mov	r2, r4
 8082f52:	6864      	ldr	r4, [r4, #4]
 8082f54:	e7cc      	b.n	8082ef0 <_malloc_r+0x2c>
 8082f56:	1cc4      	adds	r4, r0, #3
 8082f58:	f024 0403 	bic.w	r4, r4, #3
 8082f5c:	42a0      	cmp	r0, r4
 8082f5e:	d0e3      	beq.n	8082f28 <_malloc_r+0x64>
 8082f60:	1a21      	subs	r1, r4, r0
 8082f62:	4630      	mov	r0, r6
 8082f64:	f000 f808 	bl	8082f78 <_sbrk_r>
 8082f68:	3001      	adds	r0, #1
 8082f6a:	d1dd      	bne.n	8082f28 <_malloc_r+0x64>
 8082f6c:	e7cf      	b.n	8082f0e <_malloc_r+0x4a>
 8082f6e:	bf00      	nop
 8082f70:	20000090 	.word	0x20000090
 8082f74:	20000094 	.word	0x20000094

08082f78 <_sbrk_r>:
 8082f78:	b538      	push	{r3, r4, r5, lr}
 8082f7a:	4d06      	ldr	r5, [pc, #24]	; (8082f94 <_sbrk_r+0x1c>)
 8082f7c:	2300      	movs	r3, #0
 8082f7e:	4604      	mov	r4, r0
 8082f80:	4608      	mov	r0, r1
 8082f82:	602b      	str	r3, [r5, #0]
 8082f84:	f7fd fc4e 	bl	8080824 <_sbrk>
 8082f88:	1c43      	adds	r3, r0, #1
 8082f8a:	d102      	bne.n	8082f92 <_sbrk_r+0x1a>
 8082f8c:	682b      	ldr	r3, [r5, #0]
 8082f8e:	b103      	cbz	r3, 8082f92 <_sbrk_r+0x1a>
 8082f90:	6023      	str	r3, [r4, #0]
 8082f92:	bd38      	pop	{r3, r4, r5, pc}
 8082f94:	200000ec 	.word	0x200000ec

08082f98 <__sread>:
 8082f98:	b510      	push	{r4, lr}
 8082f9a:	460c      	mov	r4, r1
 8082f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8082fa0:	f000 f8a0 	bl	80830e4 <_read_r>
 8082fa4:	2800      	cmp	r0, #0
 8082fa6:	bfab      	itete	ge
 8082fa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8082faa:	89a3      	ldrhlt	r3, [r4, #12]
 8082fac:	181b      	addge	r3, r3, r0
 8082fae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8082fb2:	bfac      	ite	ge
 8082fb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8082fb6:	81a3      	strhlt	r3, [r4, #12]
 8082fb8:	bd10      	pop	{r4, pc}

08082fba <__swrite>:
 8082fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082fbe:	461f      	mov	r7, r3
 8082fc0:	898b      	ldrh	r3, [r1, #12]
 8082fc2:	05db      	lsls	r3, r3, #23
 8082fc4:	4605      	mov	r5, r0
 8082fc6:	460c      	mov	r4, r1
 8082fc8:	4616      	mov	r6, r2
 8082fca:	d505      	bpl.n	8082fd8 <__swrite+0x1e>
 8082fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8082fd0:	2302      	movs	r3, #2
 8082fd2:	2200      	movs	r2, #0
 8082fd4:	f000 f868 	bl	80830a8 <_lseek_r>
 8082fd8:	89a3      	ldrh	r3, [r4, #12]
 8082fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8082fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8082fe2:	81a3      	strh	r3, [r4, #12]
 8082fe4:	4632      	mov	r2, r6
 8082fe6:	463b      	mov	r3, r7
 8082fe8:	4628      	mov	r0, r5
 8082fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8082fee:	f000 b817 	b.w	8083020 <_write_r>

08082ff2 <__sseek>:
 8082ff2:	b510      	push	{r4, lr}
 8082ff4:	460c      	mov	r4, r1
 8082ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8082ffa:	f000 f855 	bl	80830a8 <_lseek_r>
 8082ffe:	1c43      	adds	r3, r0, #1
 8083000:	89a3      	ldrh	r3, [r4, #12]
 8083002:	bf15      	itete	ne
 8083004:	6560      	strne	r0, [r4, #84]	; 0x54
 8083006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 808300a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 808300e:	81a3      	strheq	r3, [r4, #12]
 8083010:	bf18      	it	ne
 8083012:	81a3      	strhne	r3, [r4, #12]
 8083014:	bd10      	pop	{r4, pc}

08083016 <__sclose>:
 8083016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 808301a:	f000 b813 	b.w	8083044 <_close_r>
	...

08083020 <_write_r>:
 8083020:	b538      	push	{r3, r4, r5, lr}
 8083022:	4d07      	ldr	r5, [pc, #28]	; (8083040 <_write_r+0x20>)
 8083024:	4604      	mov	r4, r0
 8083026:	4608      	mov	r0, r1
 8083028:	4611      	mov	r1, r2
 808302a:	2200      	movs	r2, #0
 808302c:	602a      	str	r2, [r5, #0]
 808302e:	461a      	mov	r2, r3
 8083030:	f7fd fba7 	bl	8080782 <_write>
 8083034:	1c43      	adds	r3, r0, #1
 8083036:	d102      	bne.n	808303e <_write_r+0x1e>
 8083038:	682b      	ldr	r3, [r5, #0]
 808303a:	b103      	cbz	r3, 808303e <_write_r+0x1e>
 808303c:	6023      	str	r3, [r4, #0]
 808303e:	bd38      	pop	{r3, r4, r5, pc}
 8083040:	200000ec 	.word	0x200000ec

08083044 <_close_r>:
 8083044:	b538      	push	{r3, r4, r5, lr}
 8083046:	4d06      	ldr	r5, [pc, #24]	; (8083060 <_close_r+0x1c>)
 8083048:	2300      	movs	r3, #0
 808304a:	4604      	mov	r4, r0
 808304c:	4608      	mov	r0, r1
 808304e:	602b      	str	r3, [r5, #0]
 8083050:	f7fd fbb3 	bl	80807ba <_close>
 8083054:	1c43      	adds	r3, r0, #1
 8083056:	d102      	bne.n	808305e <_close_r+0x1a>
 8083058:	682b      	ldr	r3, [r5, #0]
 808305a:	b103      	cbz	r3, 808305e <_close_r+0x1a>
 808305c:	6023      	str	r3, [r4, #0]
 808305e:	bd38      	pop	{r3, r4, r5, pc}
 8083060:	200000ec 	.word	0x200000ec

08083064 <_fstat_r>:
 8083064:	b538      	push	{r3, r4, r5, lr}
 8083066:	4d07      	ldr	r5, [pc, #28]	; (8083084 <_fstat_r+0x20>)
 8083068:	2300      	movs	r3, #0
 808306a:	4604      	mov	r4, r0
 808306c:	4608      	mov	r0, r1
 808306e:	4611      	mov	r1, r2
 8083070:	602b      	str	r3, [r5, #0]
 8083072:	f7fd fbae 	bl	80807d2 <_fstat>
 8083076:	1c43      	adds	r3, r0, #1
 8083078:	d102      	bne.n	8083080 <_fstat_r+0x1c>
 808307a:	682b      	ldr	r3, [r5, #0]
 808307c:	b103      	cbz	r3, 8083080 <_fstat_r+0x1c>
 808307e:	6023      	str	r3, [r4, #0]
 8083080:	bd38      	pop	{r3, r4, r5, pc}
 8083082:	bf00      	nop
 8083084:	200000ec 	.word	0x200000ec

08083088 <_isatty_r>:
 8083088:	b538      	push	{r3, r4, r5, lr}
 808308a:	4d06      	ldr	r5, [pc, #24]	; (80830a4 <_isatty_r+0x1c>)
 808308c:	2300      	movs	r3, #0
 808308e:	4604      	mov	r4, r0
 8083090:	4608      	mov	r0, r1
 8083092:	602b      	str	r3, [r5, #0]
 8083094:	f7fd fbad 	bl	80807f2 <_isatty>
 8083098:	1c43      	adds	r3, r0, #1
 808309a:	d102      	bne.n	80830a2 <_isatty_r+0x1a>
 808309c:	682b      	ldr	r3, [r5, #0]
 808309e:	b103      	cbz	r3, 80830a2 <_isatty_r+0x1a>
 80830a0:	6023      	str	r3, [r4, #0]
 80830a2:	bd38      	pop	{r3, r4, r5, pc}
 80830a4:	200000ec 	.word	0x200000ec

080830a8 <_lseek_r>:
 80830a8:	b538      	push	{r3, r4, r5, lr}
 80830aa:	4d07      	ldr	r5, [pc, #28]	; (80830c8 <_lseek_r+0x20>)
 80830ac:	4604      	mov	r4, r0
 80830ae:	4608      	mov	r0, r1
 80830b0:	4611      	mov	r1, r2
 80830b2:	2200      	movs	r2, #0
 80830b4:	602a      	str	r2, [r5, #0]
 80830b6:	461a      	mov	r2, r3
 80830b8:	f7fd fba6 	bl	8080808 <_lseek>
 80830bc:	1c43      	adds	r3, r0, #1
 80830be:	d102      	bne.n	80830c6 <_lseek_r+0x1e>
 80830c0:	682b      	ldr	r3, [r5, #0]
 80830c2:	b103      	cbz	r3, 80830c6 <_lseek_r+0x1e>
 80830c4:	6023      	str	r3, [r4, #0]
 80830c6:	bd38      	pop	{r3, r4, r5, pc}
 80830c8:	200000ec 	.word	0x200000ec

080830cc <__malloc_lock>:
 80830cc:	4801      	ldr	r0, [pc, #4]	; (80830d4 <__malloc_lock+0x8>)
 80830ce:	f7ff be43 	b.w	8082d58 <__retarget_lock_acquire_recursive>
 80830d2:	bf00      	nop
 80830d4:	200000e4 	.word	0x200000e4

080830d8 <__malloc_unlock>:
 80830d8:	4801      	ldr	r0, [pc, #4]	; (80830e0 <__malloc_unlock+0x8>)
 80830da:	f7ff be3e 	b.w	8082d5a <__retarget_lock_release_recursive>
 80830de:	bf00      	nop
 80830e0:	200000e4 	.word	0x200000e4

080830e4 <_read_r>:
 80830e4:	b538      	push	{r3, r4, r5, lr}
 80830e6:	4d07      	ldr	r5, [pc, #28]	; (8083104 <_read_r+0x20>)
 80830e8:	4604      	mov	r4, r0
 80830ea:	4608      	mov	r0, r1
 80830ec:	4611      	mov	r1, r2
 80830ee:	2200      	movs	r2, #0
 80830f0:	602a      	str	r2, [r5, #0]
 80830f2:	461a      	mov	r2, r3
 80830f4:	f7fd fb28 	bl	8080748 <_read>
 80830f8:	1c43      	adds	r3, r0, #1
 80830fa:	d102      	bne.n	8083102 <_read_r+0x1e>
 80830fc:	682b      	ldr	r3, [r5, #0]
 80830fe:	b103      	cbz	r3, 8083102 <_read_r+0x1e>
 8083100:	6023      	str	r3, [r4, #0]
 8083102:	bd38      	pop	{r3, r4, r5, pc}
 8083104:	200000ec 	.word	0x200000ec

08083108 <_init>:
 8083108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808310a:	bf00      	nop
 808310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 808310e:	bc08      	pop	{r3}
 8083110:	469e      	mov	lr, r3
 8083112:	4770      	bx	lr

08083114 <_fini>:
 8083114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083116:	bf00      	nop
 8083118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 808311a:	bc08      	pop	{r3}
 808311c:	469e      	mov	lr, r3
 808311e:	4770      	bx	lr
