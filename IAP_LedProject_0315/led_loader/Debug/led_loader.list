
led_loader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004418  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  080045a8  080045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004978  08004978  00038000  2**0
                  CONTENTS
  4 .ARM          00000008  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004980  08004980  00038000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00008000  10000000  080049f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000008ac  20000070  20000070  00040070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000091c  2000091c  00040070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00038000  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b22a  00000000  00000000  00038030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f7  00000000  00000000  0004325a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  00045758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000880  00000000  00000000  000460d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e69  00000000  00000000  00046950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6ef  00000000  00000000  000687b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4aed  00000000  00000000  00073ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00138995  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ca4  00000000  00000000  001389e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004590 	.word	0x08004590

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004590 	.word	0x08004590

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <MX_GPIO_Init+0x98>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a1e      	ldr	r2, [pc, #120]	; (8000600 <MX_GPIO_Init+0x98>)
 8000588:	f043 0310 	orr.w	r3, r3, #16
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <MX_GPIO_Init+0x98>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0310 	and.w	r3, r3, #16
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_GPIO_Init+0x98>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a17      	ldr	r2, [pc, #92]	; (8000600 <MX_GPIO_Init+0x98>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_GPIO_Init+0x98>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_GPIO_Init+0x98>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a10      	ldr	r2, [pc, #64]	; (8000600 <MX_GPIO_Init+0x98>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_GPIO_Init+0x98>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2118      	movs	r1, #24
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <MX_GPIO_Init+0x9c>)
 80005d8:	f001 fa80 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80005dc:	2318      	movs	r3, #24
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <MX_GPIO_Init+0x9c>)
 80005f4:	f001 f8d6 	bl	80017a4 <HAL_GPIO_Init>

}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40021000 	.word	0x40021000

08000608 <Check_update>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Check_update()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	  uint32_t cnt = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
	  while(cnt<20)
 8000612:	e029      	b.n	8000668 <Check_update+0x60>
	  {
		  cnt++;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3301      	adds	r3, #1
 8000618:	607b      	str	r3, [r7, #4]
		  HAL_Delay(500);
 800061a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061e:	f000 fc21 	bl	8000e64 <HAL_Delay>
		  printf("HAL_Delay cnt  = %d\n\n", cnt);
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	4814      	ldr	r0, [pc, #80]	; (8000678 <Check_update+0x70>)
 8000626:	f002 ff89 	bl	800353c <iprintf>

		PrintFlashTest(1024,FLASH_APP1_ADDR);
 800062a:	4914      	ldr	r1, [pc, #80]	; (800067c <Check_update+0x74>)
 800062c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000630:	f002 fe64 	bl	80032fc <PrintFlashTest>

		if(((*(vu32*)(FLASH_APP1_ADDR+4))&0xFF000000)==0x08000000)//判断是否�???0X08XXXXXX.
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <Check_update+0x78>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800063c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000640:	d103      	bne.n	800064a <Check_update+0x42>
		{
			iap_load_app(FLASH_APP1_ADDR);//执行FLASH APP代码
 8000642:	480e      	ldr	r0, [pc, #56]	; (800067c <Check_update+0x74>)
 8000644:	f002 fef2 	bl	800342c <iap_load_app>
 8000648:	e00e      	b.n	8000668 <Check_update+0x60>
		}else
		{
	//						printf("非FLASH应用程序,无法执行!\r\n");
	//						LCD_ShowString(30,210,200,16,16,"Illegal FLASH APP!");
			printf("--FLASH_APP1_ADDR  : 0x%x\r\n", ((*(vu32*)(FLASH_APP1_ADDR))));
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <Check_update+0x74>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4619      	mov	r1, r3
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <Check_update+0x7c>)
 8000652:	f002 ff73 	bl	800353c <iprintf>
			printf("--FLASH_APP1_ADDR+4: 0x%x\r\n", ((*(vu32*)(FLASH_APP1_ADDR+4))));
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <Check_update+0x78>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4619      	mov	r1, r3
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <Check_update+0x80>)
 800065e:	f002 ff6d 	bl	800353c <iprintf>
			printf("--can not execute app, it is not flash app\r\n");
 8000662:	480a      	ldr	r0, [pc, #40]	; (800068c <Check_update+0x84>)
 8000664:	f003 f806 	bl	8003674 <puts>
	  while(cnt<20)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b13      	cmp	r3, #19
 800066c:	d9d2      	bls.n	8000614 <Check_update+0xc>
		}

	  }
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	080045a8 	.word	0x080045a8
 800067c:	08080000 	.word	0x08080000
 8000680:	08080004 	.word	0x08080004
 8000684:	080045c0 	.word	0x080045c0
 8000688:	080045dc 	.word	0x080045dc
 800068c:	080045f8 	.word	0x080045f8

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 fb73 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f8fb 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f7ff ff63 	bl	8000568 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006a2:	f000 fa79 	bl	8000b98 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("MX_USART1_UART_Init finish!\n\n");
 80006a6:	4862      	ldr	r0, [pc, #392]	; (8000830 <main+0x1a0>)
 80006a8:	f002 ffe4 	bl	8003674 <puts>
  printf("Check_update begin!\n\n");
 80006ac:	4861      	ldr	r0, [pc, #388]	; (8000834 <main+0x1a4>)
 80006ae:	f002 ffe1 	bl	8003674 <puts>
  Check_update();
 80006b2:	f7ff ffa9 	bl	8000608 <Check_update>
  /* USER CODE BEGIN WHILE */
//  while (1)
//  {
    /* USER CODE END WHILE */

	HAL_Delay(500);
 80006b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ba:	f000 fbd3 	bl	8000e64 <HAL_Delay>
	printf("printf HAL_Delay\n\n");
 80006be:	485e      	ldr	r0, [pc, #376]	; (8000838 <main+0x1a8>)
 80006c0:	f002 ffd8 	bl	8003674 <puts>

	printf("this is led loader ... \n\n");
 80006c4:	485d      	ldr	r0, [pc, #372]	; (800083c <main+0x1ac>)
 80006c6:	f002 ffd5 	bl	8003674 <puts>
    /* USER CODE BEGIN 3 */
	uint16_t t = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	82fb      	strh	r3, [r7, #22]
	uint32_t oldcount=0;	//老的串口接收数据�???
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
	uint32_t applenth=0;	//接收到的app代码长度
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]

	for(;;)
	{
		if(USART_RX_CNT)
 80006d6:	4b5a      	ldr	r3, [pc, #360]	; (8000840 <main+0x1b0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f000 8091 	beq.w	8000802 <main+0x172>
		{
//			printf("USART_RX_CNT = %d, oldcount = %d\n\n", USART_RX_CNT, oldcount);
			if(oldcount==USART_RX_CNT)//新周期内,没有收到任何数据,认为本次数据接收完成.
 80006e0:	4b57      	ldr	r3, [pc, #348]	; (8000840 <main+0x1b0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	f040 8088 	bne.w	80007fc <main+0x16c>
			{
				applenth = USART_RX_CNT;
 80006ec:	4b54      	ldr	r3, [pc, #336]	; (8000840 <main+0x1b0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	607b      	str	r3, [r7, #4]
				oldcount = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
				USART_RX_CNT = 0;
 80006f6:	4b52      	ldr	r3, [pc, #328]	; (8000840 <main+0x1b0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
//				printf("用户程序接收完成!\r\n");
//				printf("代码长度:%dBytes\r\n",applenth);
				printf("app receive finish!\r\n");
 80006fc:	4851      	ldr	r0, [pc, #324]	; (8000844 <main+0x1b4>)
 80006fe:	f002 ffb9 	bl	8003674 <puts>
				printf("app length:%d Bytes\r\n",applenth);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	4850      	ldr	r0, [pc, #320]	; (8000848 <main+0x1b8>)
 8000706:	f002 ff19 	bl	800353c <iprintf>
//				PrintFlashTest(4,FLASH_APP1_ADDR);

				// recv finish, and write app data to flash
//				printf("�???始更新固�???...\r\n");
//				LCD_ShowString(30,210,200,16,16,"Copying APP2FLASH...");
				printf("begin update app\r\n");
 800070a:	4850      	ldr	r0, [pc, #320]	; (800084c <main+0x1bc>)
 800070c:	f002 ffb2 	bl	8003674 <puts>
//				if(((*(vu32*)(0X20001000+4))&0xFF000000)==0x08000000)//判断是否�???0X08XXXXXX.
				printf("ram addr data:0x%x\r\n", ((*(vu32*)(0x68000000))) );
 8000710:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	484d      	ldr	r0, [pc, #308]	; (8000850 <main+0x1c0>)
 800071a:	f002 ff0f 	bl	800353c <iprintf>

				for(int i= 0; i < 4; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	e00c      	b.n	800073e <main+0xae>
				{
					printf("i = 0x%x, ramdata =  0x%x\r\n", i, ((*(vu32*)(0x68000000+4*i))));
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f103 53d0 	add.w	r3, r3, #436207616	; 0x1a000000
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	68f9      	ldr	r1, [r7, #12]
 8000732:	4848      	ldr	r0, [pc, #288]	; (8000854 <main+0x1c4>)
 8000734:	f002 ff02 	bl	800353c <iprintf>
				for(int i= 0; i < 4; i++)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b03      	cmp	r3, #3
 8000742:	ddef      	ble.n	8000724 <main+0x94>
				}

				printf("iap_write_appbin begin ...\r\n");
 8000744:	4844      	ldr	r0, [pc, #272]	; (8000858 <main+0x1c8>)
 8000746:	f002 ff95 	bl	8003674 <puts>
//				if(((*(vu32*)(0x68000000+4))&0xFF000000)==0x08000000)//判断是否�???0X08XXXXXX.
				if(((*(vu32*)(0x10000000+4))&0xFF000000)==0x08000000)//判断是否�???0X08XXXXXX.
 800074a:	4b44      	ldr	r3, [pc, #272]	; (800085c <main+0x1cc>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000752:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000756:	d14d      	bne.n	80007f4 <main+0x164>
				{
					iap_write_appbin(FLASH_APP1_ADDR, USART_REC_BUF, applenth);//更新FLASH代码   applenth
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4941      	ldr	r1, [pc, #260]	; (8000860 <main+0x1d0>)
 800075c:	4841      	ldr	r0, [pc, #260]	; (8000864 <main+0x1d4>)
 800075e:	f002 fdf5 	bl	800334c <iap_write_appbin>
//					}
//					addr_offset += 2048;
//					iap_write_appbin(FLASH_APP1_ADDR+addr_offset, &USART_REC_BUF[addr_offset], applenth%2048);//更新FLASH代码   applenth
//					LCD_ShowString(30,210,200,16,16,"Copy APP Successed!!");
//					printf("固件更新完成!\r\n");
					printf("iap_write_appbin finish\r\n");
 8000762:	4841      	ldr	r0, [pc, #260]	; (8000868 <main+0x1d8>)
 8000764:	f002 ff86 	bl	8003674 <puts>
//						printf("0x%x ", USART_REC_BUF[i]);
//					printf("\n\n\n");
//					PrintFlashTest(100,FLASH_APP1_ADDR);
//					delay_ms(500);

					for(int i= 0; i < applenth/4; i++)
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	e013      	b.n	8000796 <main+0x106>
					{
						printf("ADDR = 0x%x, data =  0x%x\r\n", FLASH_APP1_ADDR+4*i, ((*(vu32*)(FLASH_APP1_ADDR+4*i))));
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000774:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000778:	0099      	lsls	r1, r3, #2
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000780:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4838      	ldr	r0, [pc, #224]	; (800086c <main+0x1dc>)
 800078c:	f002 fed6 	bl	800353c <iprintf>
					for(int i= 0; i < applenth/4; i++)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	3301      	adds	r3, #1
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	089a      	lsrs	r2, r3, #2
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8e6      	bhi.n	800076e <main+0xde>
					}


					//start run app
//					printf("�???始执行FLASH用户代码!!\r\n");
					printf("iap_load_app begin \r\n");
 80007a0:	4833      	ldr	r0, [pc, #204]	; (8000870 <main+0x1e0>)
 80007a2:	f002 ff67 	bl	8003674 <puts>


					printf("FLASH_APP1_ADDR  : 0x%x\r\n", ((*(vu32*)(FLASH_APP1_ADDR))));
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <main+0x1d4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4619      	mov	r1, r3
 80007ac:	4831      	ldr	r0, [pc, #196]	; (8000874 <main+0x1e4>)
 80007ae:	f002 fec5 	bl	800353c <iprintf>
					printf("FLASH_APP1_ADDR+4: 0x%x\r\n", ((*(vu32*)(FLASH_APP1_ADDR+4))));
 80007b2:	4b31      	ldr	r3, [pc, #196]	; (8000878 <main+0x1e8>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4830      	ldr	r0, [pc, #192]	; (800087c <main+0x1ec>)
 80007ba:	f002 febf 	bl	800353c <iprintf>

					if(((*(vu32*)(FLASH_APP1_ADDR+4))&0xFF000000)==0x08000000)//判断是否�???0X08XXXXXX.
 80007be:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <main+0x1e8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80007c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80007ca:	d103      	bne.n	80007d4 <main+0x144>
					{
						iap_load_app(FLASH_APP1_ADDR);//执行FLASH APP代码
 80007cc:	4825      	ldr	r0, [pc, #148]	; (8000864 <main+0x1d4>)
 80007ce:	f002 fe2d 	bl	800342c <iap_load_app>
 80007d2:	e016      	b.n	8000802 <main+0x172>
					}else
					{
//						printf("非FLASH应用程序,无法执行!\r\n");
//						LCD_ShowString(30,210,200,16,16,"Illegal FLASH APP!");
						printf("--FLASH_APP1_ADDR  : 0x%x\r\n", ((*(vu32*)(FLASH_APP1_ADDR))));
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <main+0x1d4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	4829      	ldr	r0, [pc, #164]	; (8000880 <main+0x1f0>)
 80007dc:	f002 feae 	bl	800353c <iprintf>
						printf("--FLASH_APP1_ADDR+4: 0x%x\r\n", ((*(vu32*)(FLASH_APP1_ADDR+4))));
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <main+0x1e8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4827      	ldr	r0, [pc, #156]	; (8000884 <main+0x1f4>)
 80007e8:	f002 fea8 	bl	800353c <iprintf>
						printf("--can not execute app, it is not flash app\r\n");
 80007ec:	4826      	ldr	r0, [pc, #152]	; (8000888 <main+0x1f8>)
 80007ee:	f002 ff41 	bl	8003674 <puts>
 80007f2:	e006      	b.n	8000802 <main+0x172>

				}else
				{
//					LCD_ShowString(30,210,200,16,16,"Illegal FLASH APP!  ");
//					printf("非FLASH应用程序!\r\n");
					printf("can not update app, it is not flash app\r\n");
 80007f4:	4825      	ldr	r0, [pc, #148]	; (800088c <main+0x1fc>)
 80007f6:	f002 ff3d 	bl	8003674 <puts>
 80007fa:	e002      	b.n	8000802 <main+0x172>
				}

			}else  oldcount = USART_RX_CNT;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <main+0x1b0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	613b      	str	r3, [r7, #16]
		}

		t++;
 8000802:	8afb      	ldrh	r3, [r7, #22]
 8000804:	3301      	adds	r3, #1
 8000806:	82fb      	strh	r3, [r7, #22]
//			delay_ms(20);
		HAL_Delay(20);
 8000808:	2014      	movs	r0, #20
 800080a:	f000 fb2b 	bl	8000e64 <HAL_Delay>
		if(t==30)
 800080e:	8afb      	ldrh	r3, [r7, #22]
 8000810:	2b1e      	cmp	r3, #30
 8000812:	f47f af60 	bne.w	80006d6 <main+0x46>
		{
//			printf("LED0 ... \n\n");
			LED0=!LED0;
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <main+0x200>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf0c      	ite	eq
 800081e:	2301      	moveq	r3, #1
 8000820:	2300      	movne	r3, #0
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <main+0x200>)
 8000826:	601a      	str	r2, [r3, #0]
			t=0;
 8000828:	2300      	movs	r3, #0
 800082a:	82fb      	strh	r3, [r7, #22]
		if(USART_RX_CNT)
 800082c:	e753      	b.n	80006d6 <main+0x46>
 800082e:	bf00      	nop
 8000830:	08004624 	.word	0x08004624
 8000834:	08004644 	.word	0x08004644
 8000838:	0800465c 	.word	0x0800465c
 800083c:	08004670 	.word	0x08004670
 8000840:	20000090 	.word	0x20000090
 8000844:	0800468c 	.word	0x0800468c
 8000848:	080046a4 	.word	0x080046a4
 800084c:	080046bc 	.word	0x080046bc
 8000850:	080046d0 	.word	0x080046d0
 8000854:	080046e8 	.word	0x080046e8
 8000858:	08004704 	.word	0x08004704
 800085c:	10000004 	.word	0x10000004
 8000860:	10000000 	.word	0x10000000
 8000864:	08080000 	.word	0x08080000
 8000868:	08004720 	.word	0x08004720
 800086c:	0800473c 	.word	0x0800473c
 8000870:	08004758 	.word	0x08004758
 8000874:	08004770 	.word	0x08004770
 8000878:	08080004 	.word	0x08080004
 800087c:	0800478c 	.word	0x0800478c
 8000880:	080045c0 	.word	0x080045c0
 8000884:	080045dc 	.word	0x080045dc
 8000888:	080045f8 	.word	0x080045f8
 800088c:	080047a8 	.word	0x080047a8
 8000890:	4242028c 	.word	0x4242028c

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	; 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fe42 	bl	800352c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b28      	ldr	r3, [pc, #160]	; (8000960 <SystemClock_Config+0xcc>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a27      	ldr	r2, [pc, #156]	; (8000960 <SystemClock_Config+0xcc>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b25      	ldr	r3, [pc, #148]	; (8000960 <SystemClock_Config+0xcc>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <SystemClock_Config+0xd0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <SystemClock_Config+0xd0>)
 80008de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <SystemClock_Config+0xd0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f4:	2301      	movs	r3, #1
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f8:	2310      	movs	r3, #16
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fc:	2302      	movs	r3, #2
 80008fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000900:	2300      	movs	r3, #0
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000904:	2308      	movs	r3, #8
 8000906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000908:	23a8      	movs	r3, #168	; 0xa8
 800090a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090c:	2302      	movs	r3, #2
 800090e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000910:	2304      	movs	r3, #4
 8000912:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000914:	f107 0320 	add.w	r3, r7, #32
 8000918:	4618      	mov	r0, r3
 800091a:	f001 f8f9 	bl	8001b10 <HAL_RCC_OscConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000924:	f000 f820 	bl	8000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000928:	230f      	movs	r3, #15
 800092a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092c:	2302      	movs	r3, #2
 800092e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000934:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000938:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800093a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2105      	movs	r1, #5
 8000946:	4618      	mov	r0, r3
 8000948:	f001 fb5a 	bl	8002000 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000952:	f000 f809 	bl	8000968 <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3750      	adds	r7, #80	; 0x50
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40007000 	.word	0x40007000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a10:	f000 fa08 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <USART1_IRQHandler+0x10>)
 8000a1e:	f001 fdfb 	bl	8002618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000a0 	.word	0x200000a0

08000a2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	e00a      	b.n	8000a54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a3e:	f000 f969 	bl	8000d14 <__io_getchar>
 8000a42:	4601      	mov	r1, r0
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	60ba      	str	r2, [r7, #8]
 8000a4a:	b2ca      	uxtb	r2, r1
 8000a4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dbf0      	blt.n	8000a3e <_read+0x12>
	}

return len;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	e009      	b.n	8000a8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 f935 	bl	8000cf0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf1      	blt.n	8000a78 <_write+0x12>
	}
	return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_close>:

int _close(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	return -1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_isatty>:

int _isatty(int file)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
	return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f002 fcce 	bl	80034d8 <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20020000 	.word	0x20020000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	2000008c 	.word	0x2000008c
 8000b70:	20000920 	.word	0x20000920

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_USART1_UART_Init+0x54>)
 8000b9e:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_USART1_UART_Init+0x54>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_USART1_UART_Init+0x54>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_USART1_UART_Init+0x54>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <MX_USART1_UART_Init+0x54>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_USART1_UART_Init+0x54>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <MX_USART1_UART_Init+0x54>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_USART1_UART_Init+0x54>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bce:	4807      	ldr	r0, [pc, #28]	; (8000bec <MX_USART1_UART_Init+0x54>)
 8000bd0:	f001 fc12 	bl	80023f8 <HAL_UART_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bda:	f7ff fec5 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, (unsigned char *)aUart1RxBuffer, RXBUFFERSIZE);
 8000bde:	2201      	movs	r2, #1
 8000be0:	4904      	ldr	r1, [pc, #16]	; (8000bf4 <MX_USART1_UART_Init+0x5c>)
 8000be2:	4802      	ldr	r0, [pc, #8]	; (8000bec <MX_USART1_UART_Init+0x54>)
 8000be4:	f001 fce7 	bl	80025b6 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200000a0 	.word	0x200000a0
 8000bf0:	40011000 	.word	0x40011000
 8000bf4:	2000009c 	.word	0x2000009c

08000bf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <HAL_UART_MspInit+0x94>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d134      	bne.n	8000c84 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <HAL_UART_MspInit+0x98>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a1b      	ldr	r2, [pc, #108]	; (8000c90 <HAL_UART_MspInit+0x98>)
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_UART_MspInit+0x98>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f003 0310 	and.w	r3, r3, #16
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_UART_MspInit+0x98>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <HAL_UART_MspInit+0x98>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_UART_MspInit+0x98>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c64:	2307      	movs	r3, #7
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4809      	ldr	r0, [pc, #36]	; (8000c94 <HAL_UART_MspInit+0x9c>)
 8000c70:	f000 fd98 	bl	80017a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	2025      	movs	r0, #37	; 0x25
 8000c7a:	f000 f9f2 	bl	8001062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c7e:	2025      	movs	r0, #37	; 0x25
 8000c80:	f000 fa0b 	bl	800109a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000

08000c98 <HAL_UART_RxCpltCallback>:
}

/***********/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)  //中断执行任务函数  �???????????  中断服务函数调用
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
//	char rec_data;
	uint8_t rec_data;
	//uart_it++;
	//portBASE_TYPE higher_priority_task_woken = 0;
	if(huart->Instance==USART1)//如果是串�???????????1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_UART_RxCpltCallback+0x48>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d116      	bne.n	8000cd8 <HAL_UART_RxCpltCallback+0x40>
	{

		rec_data=aUart1RxBuffer[0];
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_UART_RxCpltCallback+0x4c>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	73fb      	strb	r3, [r7, #15]
		}
		***/

		//Uart1RxBuf[uart1_it++] = rec_data;

		if(USART_RX_CNT<USART_REC_LEN)
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <HAL_UART_RxCpltCallback+0x50>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cb8:	d209      	bcs.n	8000cce <HAL_UART_RxCpltCallback+0x36>
		{
			//USART_RX_BUF[USART_RX_CNT] = rec_data;
			USART_REC_BUF[USART_RX_CNT] = rec_data;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_UART_RxCpltCallback+0x50>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	490b      	ldr	r1, [pc, #44]	; (8000cec <HAL_UART_RxCpltCallback+0x54>)
 8000cc0:	7bfa      	ldrb	r2, [r7, #15]
 8000cc2:	54ca      	strb	r2, [r1, r3]
			USART_RX_CNT++;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_UART_RxCpltCallback+0x50>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <HAL_UART_RxCpltCallback+0x50>)
 8000ccc:	6013      	str	r3, [r2, #0]
		}

#else
		HAL_UART_Transmit(&huart1, (uint8_t *)&rec_data, 1, 0xFFFF);
#endif
		HAL_UART_Receive_IT(huart, (unsigned char *)aUart1RxBuffer, RXBUFFERSIZE);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4904      	ldr	r1, [pc, #16]	; (8000ce4 <HAL_UART_RxCpltCallback+0x4c>)
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f001 fc6f 	bl	80025b6 <HAL_UART_Receive_IT>
	}

}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	2000009c 	.word	0x2000009c
 8000ce8:	20000090 	.word	0x20000090
 8000cec:	10000000 	.word	0x10000000

08000cf0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
//此处用的是USART1
//你在使用时仅仅需要把’USART1‘改成你的串口就可以�??
    //while ((USART1->SR & 0X40) == 0);
    //USART1->DR = (uint8_t) ch;
    //return ch;
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);	//发�?�一个字�?
 8000cf8:	1d39      	adds	r1, r7, #4
 8000cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <__io_putchar+0x20>)
 8000d02:	f001 fbc6 	bl	8002492 <HAL_UART_Transmit>
    return ch;
 8000d06:	687b      	ldr	r3, [r7, #4]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000a0 	.word	0x200000a0

08000d14 <__io_getchar>:
GETCHAR_PROTOTYPE
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
//			USART1_BUF_Init();
//			break;
//		}
//	}

	return  (int)ch;
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d32:	490e      	ldr	r1, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d48:	4c0b      	ldr	r4, [pc, #44]	; (8000d78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d56:	f7ff ff0d 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f002 fbc3 	bl	80034e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fc97 	bl	8000690 <main>
  bx  lr    
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d70:	08004988 	.word	0x08004988
  ldr r2, =_sbss
 8000d74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d78:	2000091c 	.word	0x2000091c

08000d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <HAL_Init+0x40>)
 8000d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_Init+0x40>)
 8000d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_Init+0x40>)
 8000da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f94f 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	200f      	movs	r0, #15
 8000db0:	f000 f808 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff fdde 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023c00 	.word	0x40023c00

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x58>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f967 	bl	80010b6 <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 f92f 	bl	8001062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_InitTick+0x5c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	200000e4 	.word	0x200000e4

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200000e4 	.word	0x200000e4

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff ffee 	bl	8000e4c <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8a:	bf00      	nop
 8000e8c:	f7ff ffde 	bl	8000e4c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <__NVIC_EnableIRQ+0x38>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f7ff ff8e 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff29 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff3e 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff8e 	bl	8000fa0 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5d 	bl	8000f4c <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff31 	bl	8000f10 <__NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffa2 	bl	8001008 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff feb6 	bl	8000e4c <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d008      	beq.n	8001100 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e052      	b.n	80011a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0216 	bic.w	r2, r2, #22
 800110e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800111e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <HAL_DMA_Abort+0x62>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800112c:	2b00      	cmp	r3, #0
 800112e:	d007      	beq.n	8001140 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0208 	bic.w	r2, r2, #8
 800113e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001150:	e013      	b.n	800117a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001152:	f7ff fe7b 	bl	8000e4c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b05      	cmp	r3, #5
 800115e:	d90c      	bls.n	800117a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2220      	movs	r2, #32
 8001164:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e015      	b.n	80011a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1e4      	bne.n	8001152 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118c:	223f      	movs	r2, #63	; 0x3f
 800118e:	409a      	lsls	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d004      	beq.n	80011cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e00c      	b.n	80011e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2205      	movs	r2, #5
 80011d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0201 	bic.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <HAL_FLASH_Program+0xa0>)
 8001208:	7e1b      	ldrb	r3, [r3, #24]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d101      	bne.n	8001212 <HAL_FLASH_Program+0x1e>
 800120e:	2302      	movs	r3, #2
 8001210:	e03b      	b.n	800128a <HAL_FLASH_Program+0x96>
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <HAL_FLASH_Program+0xa0>)
 8001214:	2201      	movs	r2, #1
 8001216:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001218:	f24c 3050 	movw	r0, #50000	; 0xc350
 800121c:	f000 f870 	bl	8001300 <FLASH_WaitForLastOperation>
 8001220:	4603      	mov	r3, r0
 8001222:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d12b      	bne.n	8001282 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d105      	bne.n	800123c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001230:	783b      	ldrb	r3, [r7, #0]
 8001232:	4619      	mov	r1, r3
 8001234:	68b8      	ldr	r0, [r7, #8]
 8001236:	f000 f91b 	bl	8001470 <FLASH_Program_Byte>
 800123a:	e016      	b.n	800126a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d105      	bne.n	800124e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001242:	883b      	ldrh	r3, [r7, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	68b8      	ldr	r0, [r7, #8]
 8001248:	f000 f8ee 	bl	8001428 <FLASH_Program_HalfWord>
 800124c:	e00d      	b.n	800126a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d105      	bne.n	8001260 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	4619      	mov	r1, r3
 8001258:	68b8      	ldr	r0, [r7, #8]
 800125a:	f000 f8c3 	bl	80013e4 <FLASH_Program_Word>
 800125e:	e004      	b.n	800126a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001264:	68b8      	ldr	r0, [r7, #8]
 8001266:	f000 f88b 	bl	8001380 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800126a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800126e:	f000 f847 	bl	8001300 <FLASH_WaitForLastOperation>
 8001272:	4603      	mov	r3, r0
 8001274:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_FLASH_Program+0xa4>)
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_FLASH_Program+0xa4>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <HAL_FLASH_Program+0xa0>)
 8001284:	2200      	movs	r2, #0
 8001286:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001288:	7dfb      	ldrb	r3, [r7, #23]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200000e8 	.word	0x200000e8
 8001298:	40023c00 	.word	0x40023c00

0800129c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_FLASH_Unlock+0x38>)
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	da0b      	bge.n	80012c6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_FLASH_Unlock+0x38>)
 80012b0:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <HAL_FLASH_Unlock+0x3c>)
 80012b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <HAL_FLASH_Unlock+0x38>)
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <HAL_FLASH_Unlock+0x40>)
 80012b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_FLASH_Unlock+0x38>)
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	da01      	bge.n	80012c6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80012c6:	79fb      	ldrb	r3, [r7, #7]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40023c00 	.word	0x40023c00
 80012d8:	45670123 	.word	0x45670123
 80012dc:	cdef89ab 	.word	0xcdef89ab

080012e0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_FLASH_Lock+0x1c>)
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_FLASH_Lock+0x1c>)
 80012ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012ee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40023c00 	.word	0x40023c00

08001300 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <FLASH_WaitForLastOperation+0x78>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001312:	f7ff fd9b 	bl	8000e4c <HAL_GetTick>
 8001316:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001318:	e010      	b.n	800133c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d00c      	beq.n	800133c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <FLASH_WaitForLastOperation+0x38>
 8001328:	f7ff fd90 	bl	8000e4c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	d201      	bcs.n	800133c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e019      	b.n	8001370 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <FLASH_WaitForLastOperation+0x7c>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1e8      	bne.n	800131a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <FLASH_WaitForLastOperation+0x7c>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <FLASH_WaitForLastOperation+0x7c>)
 8001356:	2201      	movs	r2, #1
 8001358:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <FLASH_WaitForLastOperation+0x7c>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001366:	f000 f8a5 	bl	80014b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
  
}  
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200000e8 	.word	0x200000e8
 800137c:	40023c00 	.word	0x40023c00

08001380 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <FLASH_Program_DoubleWord+0x60>)
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <FLASH_Program_DoubleWord+0x60>)
 8001392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001396:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <FLASH_Program_DoubleWord+0x60>)
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <FLASH_Program_DoubleWord+0x60>)
 800139e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80013a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <FLASH_Program_DoubleWord+0x60>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <FLASH_Program_DoubleWord+0x60>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80013b6:	f3bf 8f6f 	isb	sy
}
 80013ba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80013bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	000a      	movs	r2, r1
 80013ca:	2300      	movs	r3, #0
 80013cc:	68f9      	ldr	r1, [r7, #12]
 80013ce:	3104      	adds	r1, #4
 80013d0:	4613      	mov	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40023c00 	.word	0x40023c00

080013e4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <FLASH_Program_Word+0x40>)
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <FLASH_Program_Word+0x40>)
 80013f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <FLASH_Program_Word+0x40>)
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	4a09      	ldr	r2, [pc, #36]	; (8001424 <FLASH_Program_Word+0x40>)
 8001400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001404:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <FLASH_Program_Word+0x40>)
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <FLASH_Program_Word+0x40>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	601a      	str	r2, [r3, #0]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40023c00 	.word	0x40023c00

08001428 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <FLASH_Program_HalfWord+0x44>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	4a0c      	ldr	r2, [pc, #48]	; (800146c <FLASH_Program_HalfWord+0x44>)
 800143a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800143e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <FLASH_Program_HalfWord+0x44>)
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <FLASH_Program_HalfWord+0x44>)
 8001446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <FLASH_Program_HalfWord+0x44>)
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <FLASH_Program_HalfWord+0x44>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	801a      	strh	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023c00 	.word	0x40023c00

08001470 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <FLASH_Program_Byte+0x40>)
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <FLASH_Program_Byte+0x40>)
 8001482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001486:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <FLASH_Program_Byte+0x40>)
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <FLASH_Program_Byte+0x40>)
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <FLASH_Program_Byte+0x40>)
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <FLASH_Program_Byte+0x40>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	78fa      	ldrb	r2, [r7, #3]
 80014a0:	701a      	strb	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023c00 	.word	0x40023c00

080014b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80014b8:	4b27      	ldr	r3, [pc, #156]	; (8001558 <FLASH_SetErrorCode+0xa4>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <FLASH_SetErrorCode+0xa8>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	4a23      	ldr	r2, [pc, #140]	; (800155c <FLASH_SetErrorCode+0xa8>)
 80014ce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <FLASH_SetErrorCode+0xa4>)
 80014d2:	2210      	movs	r2, #16
 80014d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <FLASH_SetErrorCode+0xa4>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f003 0320 	and.w	r3, r3, #32
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d008      	beq.n	80014f4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <FLASH_SetErrorCode+0xa8>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <FLASH_SetErrorCode+0xa8>)
 80014ec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <FLASH_SetErrorCode+0xa4>)
 80014f0:	2220      	movs	r2, #32
 80014f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <FLASH_SetErrorCode+0xa4>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <FLASH_SetErrorCode+0xa8>)
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <FLASH_SetErrorCode+0xa8>)
 800150a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <FLASH_SetErrorCode+0xa4>)
 800150e:	2240      	movs	r2, #64	; 0x40
 8001510:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <FLASH_SetErrorCode+0xa4>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <FLASH_SetErrorCode+0xa8>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	4a0d      	ldr	r2, [pc, #52]	; (800155c <FLASH_SetErrorCode+0xa8>)
 8001528:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <FLASH_SetErrorCode+0xa4>)
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <FLASH_SetErrorCode+0xa4>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <FLASH_SetErrorCode+0xa8>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	f043 0320 	orr.w	r3, r3, #32
 8001544:	4a05      	ldr	r2, [pc, #20]	; (800155c <FLASH_SetErrorCode+0xa8>)
 8001546:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <FLASH_SetErrorCode+0xa4>)
 800154a:	2202      	movs	r2, #2
 800154c:	60da      	str	r2, [r3, #12]
  }
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40023c00 	.word	0x40023c00
 800155c:	200000e8 	.word	0x200000e8

08001560 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <HAL_FLASHEx_Erase+0xd8>)
 8001574:	7e1b      	ldrb	r3, [r3, #24]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d101      	bne.n	800157e <HAL_FLASHEx_Erase+0x1e>
 800157a:	2302      	movs	r3, #2
 800157c:	e058      	b.n	8001630 <HAL_FLASHEx_Erase+0xd0>
 800157e:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <HAL_FLASHEx_Erase+0xd8>)
 8001580:	2201      	movs	r2, #1
 8001582:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001584:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001588:	f7ff feba 	bl	8001300 <FLASH_WaitForLastOperation>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d148      	bne.n	8001628 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d115      	bne.n	80015d2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4610      	mov	r0, r2
 80015b4:	f000 f844 	bl	8001640 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015bc:	f7ff fea0 	bl	8001300 <FLASH_WaitForLastOperation>
 80015c0:	4603      	mov	r3, r0
 80015c2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_FLASHEx_Erase+0xdc>)
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	4a1c      	ldr	r2, [pc, #112]	; (800163c <HAL_FLASHEx_Erase+0xdc>)
 80015ca:	f023 0304 	bic.w	r3, r3, #4
 80015ce:	6113      	str	r3, [r2, #16]
 80015d0:	e028      	b.n	8001624 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	e01c      	b.n	8001614 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	4619      	mov	r1, r3
 80015e2:	68b8      	ldr	r0, [r7, #8]
 80015e4:	f000 f850 	bl	8001688 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015ec:	f7ff fe88 	bl	8001300 <FLASH_WaitForLastOperation>
 80015f0:	4603      	mov	r3, r0
 80015f2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_FLASHEx_Erase+0xdc>)
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_FLASHEx_Erase+0xdc>)
 80015fa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80015fe:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	601a      	str	r2, [r3, #0]
          break;
 800160c:	e00a      	b.n	8001624 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	3301      	adds	r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4413      	add	r3, r2
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	429a      	cmp	r2, r3
 8001622:	d3da      	bcc.n	80015da <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001624:	f000 f878 	bl	8001718 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_FLASHEx_Erase+0xd8>)
 800162a:	2200      	movs	r2, #0
 800162c:	761a      	strb	r2, [r3, #24]

  return status;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200000e8 	.word	0x200000e8
 800163c:	40023c00 	.word	0x40023c00

08001640 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <FLASH_MassErase+0x44>)
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <FLASH_MassErase+0x44>)
 8001652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001656:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <FLASH_MassErase+0x44>)
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	4a09      	ldr	r2, [pc, #36]	; (8001684 <FLASH_MassErase+0x44>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <FLASH_MassErase+0x44>)
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	4313      	orrs	r3, r2
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <FLASH_MassErase+0x44>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6113      	str	r3, [r2, #16]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00

08001688 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	e010      	b.n	80016c6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d103      	bne.n	80016b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80016aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	e009      	b.n	80016c6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d103      	bne.n	80016c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80016b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e002      	b.n	80016c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80016c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <FLASH_Erase_Sector+0x8c>)
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <FLASH_Erase_Sector+0x8c>)
 80016cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <FLASH_Erase_Sector+0x8c>)
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	490f      	ldr	r1, [pc, #60]	; (8001714 <FLASH_Erase_Sector+0x8c>)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <FLASH_Erase_Sector+0x8c>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <FLASH_Erase_Sector+0x8c>)
 80016e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80016e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <FLASH_Erase_Sector+0x8c>)
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	4a07      	ldr	r2, [pc, #28]	; (8001714 <FLASH_Erase_Sector+0x8c>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <FLASH_Erase_Sector+0x8c>)
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <FLASH_Erase_Sector+0x8c>)
 8001702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001706:	6113      	str	r3, [r2, #16]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40023c00 	.word	0x40023c00

08001718 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <FLASH_FlushCaches+0x88>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001724:	2b00      	cmp	r3, #0
 8001726:	d017      	beq.n	8001758 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <FLASH_FlushCaches+0x88>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <FLASH_FlushCaches+0x88>)
 800172e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001732:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <FLASH_FlushCaches+0x88>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <FLASH_FlushCaches+0x88>)
 800173a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <FLASH_FlushCaches+0x88>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <FLASH_FlushCaches+0x88>)
 8001746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800174a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <FLASH_FlushCaches+0x88>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <FLASH_FlushCaches+0x88>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <FLASH_FlushCaches+0x88>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	2b00      	cmp	r3, #0
 8001762:	d017      	beq.n	8001794 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <FLASH_FlushCaches+0x88>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <FLASH_FlushCaches+0x88>)
 800176a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800176e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <FLASH_FlushCaches+0x88>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <FLASH_FlushCaches+0x88>)
 8001776:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <FLASH_FlushCaches+0x88>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <FLASH_FlushCaches+0x88>)
 8001782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001786:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <FLASH_FlushCaches+0x88>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <FLASH_FlushCaches+0x88>)
 800178e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001792:	6013      	str	r3, [r2, #0]
  }
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023c00 	.word	0x40023c00

080017a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	e16b      	b.n	8001a98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c0:	2201      	movs	r2, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	429a      	cmp	r2, r3
 80017da:	f040 815a 	bne.w	8001a92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d005      	beq.n	80017f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d130      	bne.n	8001858 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	2203      	movs	r2, #3
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800182c:	2201      	movs	r2, #1
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 0201 	and.w	r2, r3, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	2b03      	cmp	r3, #3
 8001862:	d017      	beq.n	8001894 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d123      	bne.n	80018e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	08da      	lsrs	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3208      	adds	r2, #8
 80018a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	08da      	lsrs	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3208      	adds	r2, #8
 80018e2:	69b9      	ldr	r1, [r7, #24]
 80018e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0203 	and.w	r2, r3, #3
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80b4 	beq.w	8001a92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b60      	ldr	r3, [pc, #384]	; (8001ab0 <HAL_GPIO_Init+0x30c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	4a5f      	ldr	r2, [pc, #380]	; (8001ab0 <HAL_GPIO_Init+0x30c>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001938:	6453      	str	r3, [r2, #68]	; 0x44
 800193a:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <HAL_GPIO_Init+0x30c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001946:	4a5b      	ldr	r2, [pc, #364]	; (8001ab4 <HAL_GPIO_Init+0x310>)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a52      	ldr	r2, [pc, #328]	; (8001ab8 <HAL_GPIO_Init+0x314>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d02b      	beq.n	80019ca <HAL_GPIO_Init+0x226>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a51      	ldr	r2, [pc, #324]	; (8001abc <HAL_GPIO_Init+0x318>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d025      	beq.n	80019c6 <HAL_GPIO_Init+0x222>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a50      	ldr	r2, [pc, #320]	; (8001ac0 <HAL_GPIO_Init+0x31c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01f      	beq.n	80019c2 <HAL_GPIO_Init+0x21e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4f      	ldr	r2, [pc, #316]	; (8001ac4 <HAL_GPIO_Init+0x320>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d019      	beq.n	80019be <HAL_GPIO_Init+0x21a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4e      	ldr	r2, [pc, #312]	; (8001ac8 <HAL_GPIO_Init+0x324>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0x216>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4d      	ldr	r2, [pc, #308]	; (8001acc <HAL_GPIO_Init+0x328>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00d      	beq.n	80019b6 <HAL_GPIO_Init+0x212>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4c      	ldr	r2, [pc, #304]	; (8001ad0 <HAL_GPIO_Init+0x32c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <HAL_GPIO_Init+0x20e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4b      	ldr	r2, [pc, #300]	; (8001ad4 <HAL_GPIO_Init+0x330>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_GPIO_Init+0x20a>
 80019aa:	2307      	movs	r3, #7
 80019ac:	e00e      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019ae:	2308      	movs	r3, #8
 80019b0:	e00c      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019b2:	2306      	movs	r3, #6
 80019b4:	e00a      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019b6:	2305      	movs	r3, #5
 80019b8:	e008      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019ba:	2304      	movs	r3, #4
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019be:	2303      	movs	r3, #3
 80019c0:	e004      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019ca:	2300      	movs	r3, #0
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	f002 0203 	and.w	r2, r2, #3
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	4093      	lsls	r3, r2
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019dc:	4935      	ldr	r1, [pc, #212]	; (8001ab4 <HAL_GPIO_Init+0x310>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a0e:	4a32      	ldr	r2, [pc, #200]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a14:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a38:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a62:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a8c:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3301      	adds	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b0f      	cmp	r3, #15
 8001a9c:	f67f ae90 	bls.w	80017c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40021800 	.word	0x40021800
 8001ad4:	40021c00 	.word	0x40021c00
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af8:	e003      	b.n	8001b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	619a      	str	r2, [r3, #24]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e264      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d075      	beq.n	8001c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b2e:	4ba3      	ldr	r3, [pc, #652]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d00c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3a:	4ba0      	ldr	r3, [pc, #640]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d112      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b46:	4b9d      	ldr	r3, [pc, #628]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b52:	d10b      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	4b99      	ldr	r3, [pc, #612]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d05b      	beq.n	8001c18 <HAL_RCC_OscConfig+0x108>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d157      	bne.n	8001c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e23f      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d106      	bne.n	8001b84 <HAL_RCC_OscConfig+0x74>
 8001b76:	4b91      	ldr	r3, [pc, #580]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a90      	ldr	r2, [pc, #576]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e01d      	b.n	8001bc0 <HAL_RCC_OscConfig+0xb0>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x98>
 8001b8e:	4b8b      	ldr	r3, [pc, #556]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a8a      	ldr	r2, [pc, #552]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a87      	ldr	r2, [pc, #540]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0xb0>
 8001ba8:	4b84      	ldr	r3, [pc, #528]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a83      	ldr	r2, [pc, #524]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b81      	ldr	r3, [pc, #516]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a80      	ldr	r2, [pc, #512]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f940 	bl	8000e4c <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff f93c 	bl	8000e4c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e204      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xc0>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f92c 	bl	8000e4c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff f928 	bl	8000e4c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e1f0      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	4b6c      	ldr	r3, [pc, #432]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xe8>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d063      	beq.n	8001cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c26:	4b65      	ldr	r3, [pc, #404]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c32:	4b62      	ldr	r3, [pc, #392]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d11c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3e:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d116      	bne.n	8001c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	4b5c      	ldr	r3, [pc, #368]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x152>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e1c4      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c62:	4b56      	ldr	r3, [pc, #344]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4952      	ldr	r1, [pc, #328]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	e03a      	b.n	8001cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c80:	4b4f      	ldr	r3, [pc, #316]	; (8001dc0 <HAL_RCC_OscConfig+0x2b0>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7ff f8e1 	bl	8000e4c <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8e:	f7ff f8dd 	bl	8000e4c <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e1a5      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4940      	ldr	r1, [pc, #256]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e015      	b.n	8001cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <HAL_RCC_OscConfig+0x2b0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff f8c0 	bl	8000e4c <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7ff f8bc 	bl	8000e4c <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e184      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d030      	beq.n	8001d5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d016      	beq.n	8001d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <HAL_RCC_OscConfig+0x2b4>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7ff f8a0 	bl	8000e4c <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d10:	f7ff f89c 	bl	8000e4c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e164      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x200>
 8001d2e:	e015      	b.n	8001d5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_RCC_OscConfig+0x2b4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7ff f889 	bl	8000e4c <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3e:	f7ff f885 	bl	8000e4c <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e14d      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a0 	beq.w	8001eaa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10f      	bne.n	8001d9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_OscConfig+0x2b8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d121      	bne.n	8001dea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_RCC_OscConfig+0x2b8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_RCC_OscConfig+0x2b8>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db2:	f7ff f84b 	bl	8000e4c <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	e011      	b.n	8001dde <HAL_RCC_OscConfig+0x2ce>
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	42470000 	.word	0x42470000
 8001dc4:	42470e80 	.word	0x42470e80
 8001dc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dcc:	f7ff f83e 	bl	8000e4c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e106      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	4b85      	ldr	r3, [pc, #532]	; (8001ff4 <HAL_RCC_OscConfig+0x4e4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2f0>
 8001df2:	4b81      	ldr	r3, [pc, #516]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a80      	ldr	r2, [pc, #512]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfe:	e01c      	b.n	8001e3a <HAL_RCC_OscConfig+0x32a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b05      	cmp	r3, #5
 8001e06:	d10c      	bne.n	8001e22 <HAL_RCC_OscConfig+0x312>
 8001e08:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	4a7a      	ldr	r2, [pc, #488]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6713      	str	r3, [r2, #112]	; 0x70
 8001e14:	4b78      	ldr	r3, [pc, #480]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e18:	4a77      	ldr	r2, [pc, #476]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e20:	e00b      	b.n	8001e3a <HAL_RCC_OscConfig+0x32a>
 8001e22:	4b75      	ldr	r3, [pc, #468]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	4a74      	ldr	r2, [pc, #464]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2e:	4b72      	ldr	r3, [pc, #456]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	4a71      	ldr	r2, [pc, #452]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d015      	beq.n	8001e6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e42:	f7ff f803 	bl	8000e4c <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7fe ffff 	bl	8000e4c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e0c5      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	4b65      	ldr	r3, [pc, #404]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0ee      	beq.n	8001e4a <HAL_RCC_OscConfig+0x33a>
 8001e6c:	e014      	b.n	8001e98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7fe ffed 	bl	8000e4c <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7fe ffe9 	bl	8000e4c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0af      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8c:	4b5a      	ldr	r3, [pc, #360]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ee      	bne.n	8001e76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d105      	bne.n	8001eaa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9e:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a55      	ldr	r2, [pc, #340]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 809b 	beq.w	8001fea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eb4:	4b50      	ldr	r3, [pc, #320]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d05c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d141      	bne.n	8001f4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec8:	4b4c      	ldr	r3, [pc, #304]	; (8001ffc <HAL_RCC_OscConfig+0x4ec>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7fe ffbd 	bl	8000e4c <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7fe ffb9 	bl	8000e4c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e081      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee8:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69da      	ldr	r2, [r3, #28]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	019b      	lsls	r3, r3, #6
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	041b      	lsls	r3, r3, #16
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	061b      	lsls	r3, r3, #24
 8001f18:	4937      	ldr	r1, [pc, #220]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f1e:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <HAL_RCC_OscConfig+0x4ec>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7fe ff92 	bl	8000e4c <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe ff8e 	bl	8000e4c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e056      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x41c>
 8001f4a:	e04e      	b.n	8001fea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_RCC_OscConfig+0x4ec>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe ff7b 	bl	8000e4c <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7fe ff77 	bl	8000e4c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e03f      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6c:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f0      	bne.n	8001f5a <HAL_RCC_OscConfig+0x44a>
 8001f78:	e037      	b.n	8001fea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e032      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <HAL_RCC_OscConfig+0x4e8>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d028      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d121      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d11a      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fbc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d111      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40007000 	.word	0x40007000
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	42470060 	.word	0x42470060

08002000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0cc      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002014:	4b68      	ldr	r3, [pc, #416]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d90c      	bls.n	800203c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b65      	ldr	r3, [pc, #404]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0b8      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d020      	beq.n	800208a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002054:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4a58      	ldr	r2, [pc, #352]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800205e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4a52      	ldr	r2, [pc, #328]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	494d      	ldr	r1, [pc, #308]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d044      	beq.n	8002120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d119      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e07f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d003      	beq.n	80020be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020be:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e06f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e067      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020de:	4b37      	ldr	r3, [pc, #220]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4934      	ldr	r1, [pc, #208]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f0:	f7fe feac 	bl	8000e4c <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	e00a      	b.n	800210e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f8:	f7fe fea8 	bl	8000e4c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e04f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 020c 	and.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	429a      	cmp	r2, r3
 800211e:	d1eb      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002120:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d20c      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e032      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4916      	ldr	r1, [pc, #88]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	490e      	ldr	r1, [pc, #56]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002186:	f000 f821 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 800218a:	4602      	mov	r2, r0
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	490a      	ldr	r1, [pc, #40]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	5ccb      	ldrb	r3, [r1, r3]
 800219a:	fa22 f303 	lsr.w	r3, r2, r3
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fe0c 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00
 80021bc:	40023800 	.word	0x40023800
 80021c0:	080048c8 	.word	0x080048c8
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000004 	.word	0x20000004

080021cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	2300      	movs	r3, #0
 80021de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021e4:	4b67      	ldr	r3, [pc, #412]	; (8002384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d00d      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x40>
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	f200 80bd 	bhi.w	8002370 <HAL_RCC_GetSysClockFreq+0x1a4>
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x34>
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d003      	beq.n	8002206 <HAL_RCC_GetSysClockFreq+0x3a>
 80021fe:	e0b7      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002200:	4b61      	ldr	r3, [pc, #388]	; (8002388 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002202:	60bb      	str	r3, [r7, #8]
       break;
 8002204:	e0b7      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002206:	4b61      	ldr	r3, [pc, #388]	; (800238c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002208:	60bb      	str	r3, [r7, #8]
      break;
 800220a:	e0b4      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800220c:	4b5d      	ldr	r3, [pc, #372]	; (8002384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002214:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002216:	4b5b      	ldr	r3, [pc, #364]	; (8002384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d04d      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002222:	4b58      	ldr	r3, [pc, #352]	; (8002384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	099b      	lsrs	r3, r3, #6
 8002228:	461a      	mov	r2, r3
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002232:	f04f 0100 	mov.w	r1, #0
 8002236:	ea02 0800 	and.w	r8, r2, r0
 800223a:	ea03 0901 	and.w	r9, r3, r1
 800223e:	4640      	mov	r0, r8
 8002240:	4649      	mov	r1, r9
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	014b      	lsls	r3, r1, #5
 800224c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002250:	0142      	lsls	r2, r0, #5
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	ebb0 0008 	subs.w	r0, r0, r8
 800225a:	eb61 0109 	sbc.w	r1, r1, r9
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	018b      	lsls	r3, r1, #6
 8002268:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800226c:	0182      	lsls	r2, r0, #6
 800226e:	1a12      	subs	r2, r2, r0
 8002270:	eb63 0301 	sbc.w	r3, r3, r1
 8002274:	f04f 0000 	mov.w	r0, #0
 8002278:	f04f 0100 	mov.w	r1, #0
 800227c:	00d9      	lsls	r1, r3, #3
 800227e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002282:	00d0      	lsls	r0, r2, #3
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	eb12 0208 	adds.w	r2, r2, r8
 800228c:	eb43 0309 	adc.w	r3, r3, r9
 8002290:	f04f 0000 	mov.w	r0, #0
 8002294:	f04f 0100 	mov.w	r1, #0
 8002298:	0259      	lsls	r1, r3, #9
 800229a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800229e:	0250      	lsls	r0, r2, #9
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	f7fd ffde 	bl	8000270 <__aeabi_uldivmod>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4613      	mov	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	e04a      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	099b      	lsrs	r3, r3, #6
 80022c4:	461a      	mov	r2, r3
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022ce:	f04f 0100 	mov.w	r1, #0
 80022d2:	ea02 0400 	and.w	r4, r2, r0
 80022d6:	ea03 0501 	and.w	r5, r3, r1
 80022da:	4620      	mov	r0, r4
 80022dc:	4629      	mov	r1, r5
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	014b      	lsls	r3, r1, #5
 80022e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022ec:	0142      	lsls	r2, r0, #5
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	1b00      	subs	r0, r0, r4
 80022f4:	eb61 0105 	sbc.w	r1, r1, r5
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	018b      	lsls	r3, r1, #6
 8002302:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002306:	0182      	lsls	r2, r0, #6
 8002308:	1a12      	subs	r2, r2, r0
 800230a:	eb63 0301 	sbc.w	r3, r3, r1
 800230e:	f04f 0000 	mov.w	r0, #0
 8002312:	f04f 0100 	mov.w	r1, #0
 8002316:	00d9      	lsls	r1, r3, #3
 8002318:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800231c:	00d0      	lsls	r0, r2, #3
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	1912      	adds	r2, r2, r4
 8002324:	eb45 0303 	adc.w	r3, r5, r3
 8002328:	f04f 0000 	mov.w	r0, #0
 800232c:	f04f 0100 	mov.w	r1, #0
 8002330:	0299      	lsls	r1, r3, #10
 8002332:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002336:	0290      	lsls	r0, r2, #10
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	461a      	mov	r2, r3
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	f7fd ff92 	bl	8000270 <__aeabi_uldivmod>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4613      	mov	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	0c1b      	lsrs	r3, r3, #16
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	3301      	adds	r3, #1
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	60bb      	str	r3, [r7, #8]
      break;
 800236e:	e002      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002372:	60bb      	str	r3, [r7, #8]
      break;
 8002374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002376:	68bb      	ldr	r3, [r7, #8]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	00f42400 	.word	0x00f42400
 800238c:	007a1200 	.word	0x007a1200

08002390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000000 	.word	0x20000000

080023a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023ac:	f7ff fff0 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	0a9b      	lsrs	r3, r3, #10
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	4903      	ldr	r1, [pc, #12]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	080048d8 	.word	0x080048d8

080023d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023d4:	f7ff ffdc 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	0b5b      	lsrs	r3, r3, #13
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	4903      	ldr	r1, [pc, #12]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	080048d8 	.word	0x080048d8

080023f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e03f      	b.n	800248a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe fbea 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2224      	movs	r2, #36	; 0x24
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800243a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fc7b 	bl	8002d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b08a      	sub	sp, #40	; 0x28
 8002496:	af02      	add	r7, sp, #8
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d17c      	bne.n	80025ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_UART_Transmit+0x2c>
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e075      	b.n	80025ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_UART_Transmit+0x3e>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e06e      	b.n	80025ae <HAL_UART_Transmit+0x11c>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2221      	movs	r2, #33	; 0x21
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024e6:	f7fe fcb1 	bl	8000e4c <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002500:	d108      	bne.n	8002514 <HAL_UART_Transmit+0x82>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d104      	bne.n	8002514 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	e003      	b.n	800251c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002524:	e02a      	b.n	800257c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2200      	movs	r2, #0
 800252e:	2180      	movs	r1, #128	; 0x80
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 fa3d 	bl	80029b0 <UART_WaitOnFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e036      	b.n	80025ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10b      	bne.n	800255e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002554:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	3302      	adds	r3, #2
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	e007      	b.n	800256e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	3301      	adds	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1cf      	bne.n	8002526 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2200      	movs	r2, #0
 800258e:	2140      	movs	r1, #64	; 0x40
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fa0d 	bl	80029b0 <UART_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e006      	b.n	80025ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	4613      	mov	r3, r2
 80025c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d11d      	bne.n	800260c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_UART_Receive_IT+0x26>
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e016      	b.n	800260e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_UART_Receive_IT+0x38>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e00f      	b.n	800260e <HAL_UART_Receive_IT+0x58>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	461a      	mov	r2, r3
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fa1e 	bl	8002a44 <UART_Start_Receive_IT>
 8002608:	4603      	mov	r3, r0
 800260a:	e000      	b.n	800260e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800260c:	2302      	movs	r3, #2
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10d      	bne.n	800266a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_UART_IRQHandler+0x52>
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fad1 	bl	8002c0a <UART_Receive_IT>
      return;
 8002668:	e17c      	b.n	8002964 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80b1 	beq.w	80027d4 <HAL_UART_IRQHandler+0x1bc>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <HAL_UART_IRQHandler+0x70>
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80a6 	beq.w	80027d4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_UART_IRQHandler+0x90>
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_UART_IRQHandler+0xb0>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 0202 	orr.w	r2, r3, #2
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_UART_IRQHandler+0xd0>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f043 0204 	orr.w	r2, r3, #4
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00f      	beq.n	8002712 <HAL_UART_IRQHandler+0xfa>
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d104      	bne.n	8002706 <HAL_UART_IRQHandler+0xee>
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f043 0208 	orr.w	r2, r3, #8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 811f 	beq.w	800295a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <HAL_UART_IRQHandler+0x11e>
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fa6a 	bl	8002c0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <HAL_UART_IRQHandler+0x146>
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d031      	beq.n	80027c2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f9aa 	bl	8002ab8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276e:	2b40      	cmp	r3, #64	; 0x40
 8002770:	d123      	bne.n	80027ba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002780:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002786:	2b00      	cmp	r3, #0
 8002788:	d013      	beq.n	80027b2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	4a77      	ldr	r2, [pc, #476]	; (800296c <HAL_UART_IRQHandler+0x354>)
 8002790:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fd09 	bl	80011ae <HAL_DMA_Abort_IT>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027ac:	4610      	mov	r0, r2
 80027ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b0:	e00e      	b.n	80027d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f8e6 	bl	8002984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b8:	e00a      	b.n	80027d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f8e2 	bl	8002984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c0:	e006      	b.n	80027d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f8de 	bl	8002984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027ce:	e0c4      	b.n	800295a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d0:	bf00      	nop
    return;
 80027d2:	e0c2      	b.n	800295a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	2b01      	cmp	r3, #1
 80027da:	f040 80a2 	bne.w	8002922 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 809c 	beq.w	8002922 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8096 	beq.w	8002922 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b40      	cmp	r3, #64	; 0x40
 8002818:	d14f      	bne.n	80028ba <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002824:	8a3b      	ldrh	r3, [r7, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8099 	beq.w	800295e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002830:	8a3a      	ldrh	r2, [r7, #16]
 8002832:	429a      	cmp	r2, r3
 8002834:	f080 8093 	bcs.w	800295e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8a3a      	ldrh	r2, [r7, #16]
 800283c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002848:	d02b      	beq.n	80028a2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002858:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002878:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0210 	bic.w	r2, r2, #16
 8002896:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fc16 	bl	80010ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	4619      	mov	r1, r3
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f870 	bl	8002998 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80028b8:	e051      	b.n	800295e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d047      	beq.n	8002962 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80028d2:	8a7b      	ldrh	r3, [r7, #18]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d044      	beq.n	8002962 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028e6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0210 	bic.w	r2, r2, #16
 8002914:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002916:	8a7b      	ldrh	r3, [r7, #18]
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f83c 	bl	8002998 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002920:	e01f      	b.n	8002962 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_UART_IRQHandler+0x326>
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f8ff 	bl	8002b3a <UART_Transmit_IT>
    return;
 800293c:	e012      	b.n	8002964 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <HAL_UART_IRQHandler+0x34c>
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f941 	bl	8002bda <UART_EndTransmit_IT>
    return;
 8002958:	e004      	b.n	8002964 <HAL_UART_IRQHandler+0x34c>
    return;
 800295a:	bf00      	nop
 800295c:	e002      	b.n	8002964 <HAL_UART_IRQHandler+0x34c>
      return;
 800295e:	bf00      	nop
 8002960:	e000      	b.n	8002964 <HAL_UART_IRQHandler+0x34c>
      return;
 8002962:	bf00      	nop
  }
}
 8002964:	3728      	adds	r7, #40	; 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	08002b13 	.word	0x08002b13

08002970 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c0:	e02c      	b.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d028      	beq.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80029d0:	f7fe fa3c 	bl	8000e4c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d21d      	bcs.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e00f      	b.n	8002a3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4013      	ands	r3, r2
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d0c3      	beq.n	80029c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	88fa      	ldrh	r2, [r7, #6]
 8002a5c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	88fa      	ldrh	r2, [r7, #6]
 8002a62:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2222      	movs	r2, #34	; 0x22
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a88:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0201 	orr.w	r2, r2, #1
 8002a98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0220 	orr.w	r2, r2, #32
 8002aa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ace:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0201 	bic.w	r2, r2, #1
 8002ade:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d107      	bne.n	8002af8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0210 	bic.w	r2, r2, #16
 8002af6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff ff29 	bl	8002984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b21      	cmp	r3, #33	; 0x21
 8002b4c:	d13e      	bne.n	8002bcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b56:	d114      	bne.n	8002b82 <UART_Transmit_IT+0x48>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d110      	bne.n	8002b82 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	1c9a      	adds	r2, r3, #2
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	621a      	str	r2, [r3, #32]
 8002b80:	e008      	b.n	8002b94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	1c59      	adds	r1, r3, #1
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6211      	str	r1, [r2, #32]
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10f      	bne.n	8002bc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff feb8 	bl	8002970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b22      	cmp	r3, #34	; 0x22
 8002c1c:	f040 8087 	bne.w	8002d2e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c28:	d117      	bne.n	8002c5a <UART_Receive_IT+0x50>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d113      	bne.n	8002c5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	1c9a      	adds	r2, r3, #2
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
 8002c58:	e026      	b.n	8002ca8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6c:	d007      	beq.n	8002c7e <UART_Receive_IT+0x74>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <UART_Receive_IT+0x82>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	701a      	strb	r2, [r3, #0]
 8002c8a:	e008      	b.n	8002c9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d136      	bne.n	8002d2a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0220 	bic.w	r2, r2, #32
 8002cca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d10e      	bne.n	8002d1a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0210 	bic.w	r2, r2, #16
 8002d0a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff fe40 	bl	8002998 <HAL_UARTEx_RxEventCallback>
 8002d18:	e002      	b.n	8002d20 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd ffbc 	bl	8000c98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e002      	b.n	8002d30 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e000      	b.n	8002d30 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002d2e:	2302      	movs	r3, #2
  }
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d3c:	b09f      	sub	sp, #124	; 0x7c
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4e:	68d9      	ldr	r1, [r3, #12]
 8002d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	ea40 0301 	orr.w	r3, r0, r1
 8002d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d7c:	f021 010c 	bic.w	r1, r1, #12
 8002d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d86:	430b      	orrs	r3, r1
 8002d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d96:	6999      	ldr	r1, [r3, #24]
 8002d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	ea40 0301 	orr.w	r3, r0, r1
 8002da0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4bc5      	ldr	r3, [pc, #788]	; (80030bc <UART_SetConfig+0x384>)
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d004      	beq.n	8002db6 <UART_SetConfig+0x7e>
 8002dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4bc3      	ldr	r3, [pc, #780]	; (80030c0 <UART_SetConfig+0x388>)
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d103      	bne.n	8002dbe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002db6:	f7ff fb0b 	bl	80023d0 <HAL_RCC_GetPCLK2Freq>
 8002dba:	6778      	str	r0, [r7, #116]	; 0x74
 8002dbc:	e002      	b.n	8002dc4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dbe:	f7ff faf3 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 8002dc2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dcc:	f040 80b6 	bne.w	8002f3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd2:	461c      	mov	r4, r3
 8002dd4:	f04f 0500 	mov.w	r5, #0
 8002dd8:	4622      	mov	r2, r4
 8002dda:	462b      	mov	r3, r5
 8002ddc:	1891      	adds	r1, r2, r2
 8002dde:	6439      	str	r1, [r7, #64]	; 0x40
 8002de0:	415b      	adcs	r3, r3
 8002de2:	647b      	str	r3, [r7, #68]	; 0x44
 8002de4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002de8:	1912      	adds	r2, r2, r4
 8002dea:	eb45 0303 	adc.w	r3, r5, r3
 8002dee:	f04f 0000 	mov.w	r0, #0
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	00d9      	lsls	r1, r3, #3
 8002df8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dfc:	00d0      	lsls	r0, r2, #3
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	1911      	adds	r1, r2, r4
 8002e04:	6639      	str	r1, [r7, #96]	; 0x60
 8002e06:	416b      	adcs	r3, r5
 8002e08:	667b      	str	r3, [r7, #100]	; 0x64
 8002e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	1891      	adds	r1, r2, r2
 8002e16:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e18:	415b      	adcs	r3, r3
 8002e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e24:	f7fd fa24 	bl	8000270 <__aeabi_uldivmod>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4ba5      	ldr	r3, [pc, #660]	; (80030c4 <UART_SetConfig+0x38c>)
 8002e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	011e      	lsls	r6, r3, #4
 8002e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e38:	461c      	mov	r4, r3
 8002e3a:	f04f 0500 	mov.w	r5, #0
 8002e3e:	4622      	mov	r2, r4
 8002e40:	462b      	mov	r3, r5
 8002e42:	1891      	adds	r1, r2, r2
 8002e44:	6339      	str	r1, [r7, #48]	; 0x30
 8002e46:	415b      	adcs	r3, r3
 8002e48:	637b      	str	r3, [r7, #52]	; 0x34
 8002e4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e4e:	1912      	adds	r2, r2, r4
 8002e50:	eb45 0303 	adc.w	r3, r5, r3
 8002e54:	f04f 0000 	mov.w	r0, #0
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	00d9      	lsls	r1, r3, #3
 8002e5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e62:	00d0      	lsls	r0, r2, #3
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	1911      	adds	r1, r2, r4
 8002e6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e6c:	416b      	adcs	r3, r5
 8002e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	461a      	mov	r2, r3
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	1891      	adds	r1, r2, r2
 8002e7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e7e:	415b      	adcs	r3, r3
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002e8a:	f7fd f9f1 	bl	8000270 <__aeabi_uldivmod>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4b8c      	ldr	r3, [pc, #560]	; (80030c4 <UART_SetConfig+0x38c>)
 8002e94:	fba3 1302 	umull	r1, r3, r3, r2
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	2164      	movs	r1, #100	; 0x64
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	3332      	adds	r3, #50	; 0x32
 8002ea6:	4a87      	ldr	r2, [pc, #540]	; (80030c4 <UART_SetConfig+0x38c>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eb4:	441e      	add	r6, r3
 8002eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	1894      	adds	r4, r2, r2
 8002ec4:	623c      	str	r4, [r7, #32]
 8002ec6:	415b      	adcs	r3, r3
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ece:	1812      	adds	r2, r2, r0
 8002ed0:	eb41 0303 	adc.w	r3, r1, r3
 8002ed4:	f04f 0400 	mov.w	r4, #0
 8002ed8:	f04f 0500 	mov.w	r5, #0
 8002edc:	00dd      	lsls	r5, r3, #3
 8002ede:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ee2:	00d4      	lsls	r4, r2, #3
 8002ee4:	4622      	mov	r2, r4
 8002ee6:	462b      	mov	r3, r5
 8002ee8:	1814      	adds	r4, r2, r0
 8002eea:	653c      	str	r4, [r7, #80]	; 0x50
 8002eec:	414b      	adcs	r3, r1
 8002eee:	657b      	str	r3, [r7, #84]	; 0x54
 8002ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	1891      	adds	r1, r2, r2
 8002efc:	61b9      	str	r1, [r7, #24]
 8002efe:	415b      	adcs	r3, r3
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f0a:	f7fd f9b1 	bl	8000270 <__aeabi_uldivmod>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4b6c      	ldr	r3, [pc, #432]	; (80030c4 <UART_SetConfig+0x38c>)
 8002f14:	fba3 1302 	umull	r1, r3, r3, r2
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	2164      	movs	r1, #100	; 0x64
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	3332      	adds	r3, #50	; 0x32
 8002f26:	4a67      	ldr	r2, [pc, #412]	; (80030c4 <UART_SetConfig+0x38c>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	f003 0207 	and.w	r2, r3, #7
 8002f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4432      	add	r2, r6
 8002f38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f3a:	e0b9      	b.n	80030b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f3e:	461c      	mov	r4, r3
 8002f40:	f04f 0500 	mov.w	r5, #0
 8002f44:	4622      	mov	r2, r4
 8002f46:	462b      	mov	r3, r5
 8002f48:	1891      	adds	r1, r2, r2
 8002f4a:	6139      	str	r1, [r7, #16]
 8002f4c:	415b      	adcs	r3, r3
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f54:	1912      	adds	r2, r2, r4
 8002f56:	eb45 0303 	adc.w	r3, r5, r3
 8002f5a:	f04f 0000 	mov.w	r0, #0
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	00d9      	lsls	r1, r3, #3
 8002f64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f68:	00d0      	lsls	r0, r2, #3
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	eb12 0804 	adds.w	r8, r2, r4
 8002f72:	eb43 0905 	adc.w	r9, r3, r5
 8002f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f04f 0100 	mov.w	r1, #0
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	008b      	lsls	r3, r1, #2
 8002f8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f8e:	0082      	lsls	r2, r0, #2
 8002f90:	4640      	mov	r0, r8
 8002f92:	4649      	mov	r1, r9
 8002f94:	f7fd f96c 	bl	8000270 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4b49      	ldr	r3, [pc, #292]	; (80030c4 <UART_SetConfig+0x38c>)
 8002f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	011e      	lsls	r6, r3, #4
 8002fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	1894      	adds	r4, r2, r2
 8002fb4:	60bc      	str	r4, [r7, #8]
 8002fb6:	415b      	adcs	r3, r3
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fbe:	1812      	adds	r2, r2, r0
 8002fc0:	eb41 0303 	adc.w	r3, r1, r3
 8002fc4:	f04f 0400 	mov.w	r4, #0
 8002fc8:	f04f 0500 	mov.w	r5, #0
 8002fcc:	00dd      	lsls	r5, r3, #3
 8002fce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002fd2:	00d4      	lsls	r4, r2, #3
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	1814      	adds	r4, r2, r0
 8002fda:	64bc      	str	r4, [r7, #72]	; 0x48
 8002fdc:	414b      	adcs	r3, r1
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f04f 0100 	mov.w	r1, #0
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	008b      	lsls	r3, r1, #2
 8002ff4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ff8:	0082      	lsls	r2, r0, #2
 8002ffa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ffe:	f7fd f937 	bl	8000270 <__aeabi_uldivmod>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <UART_SetConfig+0x38c>)
 8003008:	fba3 1302 	umull	r1, r3, r3, r2
 800300c:	095b      	lsrs	r3, r3, #5
 800300e:	2164      	movs	r1, #100	; 0x64
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	3332      	adds	r3, #50	; 0x32
 800301a:	4a2a      	ldr	r2, [pc, #168]	; (80030c4 <UART_SetConfig+0x38c>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003026:	441e      	add	r6, r3
 8003028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800302a:	4618      	mov	r0, r3
 800302c:	f04f 0100 	mov.w	r1, #0
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	1894      	adds	r4, r2, r2
 8003036:	603c      	str	r4, [r7, #0]
 8003038:	415b      	adcs	r3, r3
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003040:	1812      	adds	r2, r2, r0
 8003042:	eb41 0303 	adc.w	r3, r1, r3
 8003046:	f04f 0400 	mov.w	r4, #0
 800304a:	f04f 0500 	mov.w	r5, #0
 800304e:	00dd      	lsls	r5, r3, #3
 8003050:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003054:	00d4      	lsls	r4, r2, #3
 8003056:	4622      	mov	r2, r4
 8003058:	462b      	mov	r3, r5
 800305a:	eb12 0a00 	adds.w	sl, r2, r0
 800305e:	eb43 0b01 	adc.w	fp, r3, r1
 8003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	f04f 0100 	mov.w	r1, #0
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	008b      	lsls	r3, r1, #2
 8003076:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800307a:	0082      	lsls	r2, r0, #2
 800307c:	4650      	mov	r0, sl
 800307e:	4659      	mov	r1, fp
 8003080:	f7fd f8f6 	bl	8000270 <__aeabi_uldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <UART_SetConfig+0x38c>)
 800308a:	fba3 1302 	umull	r1, r3, r3, r2
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	2164      	movs	r1, #100	; 0x64
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	3332      	adds	r3, #50	; 0x32
 800309c:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <UART_SetConfig+0x38c>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	f003 020f 	and.w	r2, r3, #15
 80030a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4432      	add	r2, r6
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	377c      	adds	r7, #124	; 0x7c
 80030b4:	46bd      	mov	sp, r7
 80030b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ba:	bf00      	nop
 80030bc:	40011000 	.word	0x40011000
 80030c0:	40011400 	.word	0x40011400
 80030c4:	51eb851f 	.word	0x51eb851f

080030c8 <STMFLASH_ReadWord>:

//读取指定地址的字(32位数据)
//faddr:读地址
//返回值:对应数据.
u32 STMFLASH_ReadWord(u32 faddr)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	return *(vu32*)faddr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <STMFLASH_GetFlashSector>:

//获取某个地址所在的flash扇区
//addr:flash地址
//返回值:0~11,即addr所在的扇区
u8 STMFLASH_GetFlashSector(u32 addr)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	if(addr<ADDR_FLASH_SECTOR_1)return FLASH_SECTOR_0;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a24      	ldr	r2, [pc, #144]	; (800317c <STMFLASH_GetFlashSector+0x9c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d201      	bcs.n	80030f4 <STMFLASH_GetFlashSector+0x14>
 80030f0:	2300      	movs	r3, #0
 80030f2:	e03c      	b.n	800316e <STMFLASH_GetFlashSector+0x8e>
	else if(addr<ADDR_FLASH_SECTOR_2)return FLASH_SECTOR_1;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a22      	ldr	r2, [pc, #136]	; (8003180 <STMFLASH_GetFlashSector+0xa0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d201      	bcs.n	8003100 <STMFLASH_GetFlashSector+0x20>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e036      	b.n	800316e <STMFLASH_GetFlashSector+0x8e>
	else if(addr<ADDR_FLASH_SECTOR_3)return FLASH_SECTOR_2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a20      	ldr	r2, [pc, #128]	; (8003184 <STMFLASH_GetFlashSector+0xa4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d201      	bcs.n	800310c <STMFLASH_GetFlashSector+0x2c>
 8003108:	2302      	movs	r3, #2
 800310a:	e030      	b.n	800316e <STMFLASH_GetFlashSector+0x8e>
	else if(addr<ADDR_FLASH_SECTOR_4)return FLASH_SECTOR_3;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a1e      	ldr	r2, [pc, #120]	; (8003188 <STMFLASH_GetFlashSector+0xa8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d801      	bhi.n	8003118 <STMFLASH_GetFlashSector+0x38>
 8003114:	2303      	movs	r3, #3
 8003116:	e02a      	b.n	800316e <STMFLASH_GetFlashSector+0x8e>
	else if(addr<ADDR_FLASH_SECTOR_5)return FLASH_SECTOR_4;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a1c      	ldr	r2, [pc, #112]	; (800318c <STMFLASH_GetFlashSector+0xac>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d801      	bhi.n	8003124 <STMFLASH_GetFlashSector+0x44>
 8003120:	2304      	movs	r3, #4
 8003122:	e024      	b.n	800316e <STMFLASH_GetFlashSector+0x8e>
	else if(addr<ADDR_FLASH_SECTOR_6)return FLASH_SECTOR_5;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1a      	ldr	r2, [pc, #104]	; (8003190 <STMFLASH_GetFlashSector+0xb0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d801      	bhi.n	8003130 <STMFLASH_GetFlashSector+0x50>
 800312c:	2305      	movs	r3, #5
 800312e:	e01e      	b.n	800316e <STMFLASH_GetFlashSector+0x8e>
	else if(addr<ADDR_FLASH_SECTOR_7)return FLASH_SECTOR_6;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <STMFLASH_GetFlashSector+0xb4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d801      	bhi.n	800313c <STMFLASH_GetFlashSector+0x5c>
 8003138:	2306      	movs	r3, #6
 800313a:	e018      	b.n	800316e <STMFLASH_GetFlashSector+0x8e>
	else if(addr<ADDR_FLASH_SECTOR_8)return FLASH_SECTOR_7;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a16      	ldr	r2, [pc, #88]	; (8003198 <STMFLASH_GetFlashSector+0xb8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d801      	bhi.n	8003148 <STMFLASH_GetFlashSector+0x68>
 8003144:	2307      	movs	r3, #7
 8003146:	e012      	b.n	800316e <STMFLASH_GetFlashSector+0x8e>
	else if(addr<ADDR_FLASH_SECTOR_9)return FLASH_SECTOR_8;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a14      	ldr	r2, [pc, #80]	; (800319c <STMFLASH_GetFlashSector+0xbc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d801      	bhi.n	8003154 <STMFLASH_GetFlashSector+0x74>
 8003150:	2308      	movs	r3, #8
 8003152:	e00c      	b.n	800316e <STMFLASH_GetFlashSector+0x8e>
	else if(addr<ADDR_FLASH_SECTOR_10)return FLASH_SECTOR_9;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <STMFLASH_GetFlashSector+0xc0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d801      	bhi.n	8003160 <STMFLASH_GetFlashSector+0x80>
 800315c:	2309      	movs	r3, #9
 800315e:	e006      	b.n	800316e <STMFLASH_GetFlashSector+0x8e>
	else if(addr<ADDR_FLASH_SECTOR_11)return FLASH_SECTOR_10;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a10      	ldr	r2, [pc, #64]	; (80031a4 <STMFLASH_GetFlashSector+0xc4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d801      	bhi.n	800316c <STMFLASH_GetFlashSector+0x8c>
 8003168:	230a      	movs	r3, #10
 800316a:	e000      	b.n	800316e <STMFLASH_GetFlashSector+0x8e>
	return FLASH_SECTOR_11;
 800316c:	230b      	movs	r3, #11
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	08004000 	.word	0x08004000
 8003180:	08008000 	.word	0x08008000
 8003184:	0800c000 	.word	0x0800c000
 8003188:	0800ffff 	.word	0x0800ffff
 800318c:	0801ffff 	.word	0x0801ffff
 8003190:	0803ffff 	.word	0x0803ffff
 8003194:	0805ffff 	.word	0x0805ffff
 8003198:	0807ffff 	.word	0x0807ffff
 800319c:	0809ffff 	.word	0x0809ffff
 80031a0:	080bffff 	.word	0x080bffff
 80031a4:	080dffff 	.word	0x080dffff

080031a8 <STMFLASH_Erase>:


void STMFLASH_Erase(u32 WriteAddr, u32 NumToWrite)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	; 0x30
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef FlashEraseInit;
	HAL_StatusTypeDef FlashStatus=HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	u32 SectorError=0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
	u32 addrx=0;
 80031bc:	2300      	movs	r3, #0
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 endaddr=0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
	if(WriteAddr<STM32_FLASH_BASE||WriteAddr%4)return;	//非法地址
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ca:	d345      	bcc.n	8003258 <STMFLASH_Erase+0xb0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d140      	bne.n	8003258 <STMFLASH_Erase+0xb0>

	HAL_FLASH_Unlock();             //解锁
 80031d6:	f7fe f861 	bl	800129c <HAL_FLASH_Unlock>
	addrx=WriteAddr;				//写入的起始地址
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	endaddr=WriteAddr+NumToWrite*4;	//写入的结束地址
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24

	if(addrx<0X1FFF0000)
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ea:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <STMFLASH_Erase+0xb8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d829      	bhi.n	8003244 <STMFLASH_Erase+0x9c>
	{
		while(addrx<endaddr)		//扫清一切障碍.(对非FFFFFFFF的地方,先擦除)
 80031f0:	e024      	b.n	800323c <STMFLASH_Erase+0x94>
		{
			 if(STMFLASH_ReadWord(addrx)!=0XFFFFFFFF)//有非0XFFFFFFFF的地方,要擦除这个扇区
 80031f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031f4:	f7ff ff68 	bl	80030c8 <STMFLASH_ReadWord>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fe:	d016      	beq.n	800322e <STMFLASH_Erase+0x86>
			{
				FlashEraseInit.TypeErase=FLASH_TYPEERASE_SECTORS;       //擦除类型，扇区擦除
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]
				FlashEraseInit.Sector=STMFLASH_GetFlashSector(addrx);   //要擦除的扇区
 8003204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003206:	f7ff ff6b 	bl	80030e0 <STMFLASH_GetFlashSector>
 800320a:	4603      	mov	r3, r0
 800320c:	61bb      	str	r3, [r7, #24]
				FlashEraseInit.NbSectors=1;                             //一次只擦除一个扇区
 800320e:	2301      	movs	r3, #1
 8003210:	61fb      	str	r3, [r7, #28]
				FlashEraseInit.VoltageRange=FLASH_VOLTAGE_RANGE_3;      //电压范围，VCC=2.7~3.6V之间!!
 8003212:	2302      	movs	r3, #2
 8003214:	623b      	str	r3, [r7, #32]
				if(HAL_FLASHEx_Erase(&FlashEraseInit,&SectorError)!=HAL_OK)
 8003216:	f107 020c 	add.w	r2, r7, #12
 800321a:	f107 0310 	add.w	r3, r7, #16
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe f99d 	bl	8001560 <HAL_FLASHEx_Erase>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <STMFLASH_Erase+0x8c>
				{
					break;//发生错误了
 800322c:	e00a      	b.n	8003244 <STMFLASH_Erase+0x9c>
				}
				}else addrx+=4;
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	3304      	adds	r3, #4
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
				FLASH_WaitForLastOperation(FLASH_WAITETIME);                //等待上次操作完成
 8003234:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003238:	f7fe f862 	bl	8001300 <FLASH_WaitForLastOperation>
		while(addrx<endaddr)		//扫清一切障碍.(对非FFFFFFFF的地方,先擦除)
 800323c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	429a      	cmp	r2, r3
 8003242:	d3d6      	bcc.n	80031f2 <STMFLASH_Erase+0x4a>
		}
	}
	FlashStatus=FLASH_WaitForLastOperation(FLASH_WAITETIME);            //等待上次操作完成
 8003244:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003248:	f7fe f85a 	bl	8001300 <FLASH_WaitForLastOperation>
 800324c:	4603      	mov	r3, r0
 800324e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	HAL_FLASH_Lock();           //上锁
 8003252:	f7fe f845 	bl	80012e0 <HAL_FLASH_Lock>
 8003256:	e000      	b.n	800325a <STMFLASH_Erase+0xb2>
	if(WriteAddr<STM32_FLASH_BASE||WriteAddr%4)return;	//非法地址
 8003258:	bf00      	nop
}
 800325a:	3730      	adds	r7, #48	; 0x30
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	1ffeffff 	.word	0x1ffeffff

08003264 <STMFLASH_Write>:
//WriteAddr:起始地址(此地址必须为4的倍数!!)
//pBuffer:数据指针
//NumToWrite:字(32位)数(就是要写入的32位数据的个数.)

void STMFLASH_Write(u32 WriteAddr,u32 *pBuffer,u32 NumToWrite)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08e      	sub	sp, #56	; 0x38
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef FlashEraseInit;
	HAL_StatusTypeDef FlashStatus=HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	u32 SectorError=0;
 8003276:	2300      	movs	r3, #0
 8003278:	633b      	str	r3, [r7, #48]	; 0x30
	u32 addrx=0;
 800327a:	2300      	movs	r3, #0
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 endaddr=0;
 800327e:	2300      	movs	r3, #0
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
	if(WriteAddr<STM32_FLASH_BASE||WriteAddr%4)return;	//非法地址
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003288:	d334      	bcc.n	80032f4 <STMFLASH_Write+0x90>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d12f      	bne.n	80032f4 <STMFLASH_Write+0x90>

	HAL_FLASH_Unlock();             //解锁
 8003294:	f7fe f802 	bl	800129c <HAL_FLASH_Unlock>
	addrx=WriteAddr;				//写入的起始地址
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
	endaddr=WriteAddr+NumToWrite*4;	//写入的结束地址
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4413      	add	r3, r2
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28

	FlashStatus=FLASH_WaitForLastOperation(FLASH_WAITETIME);            //等待上次操作完成
 80032a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032aa:	f7fe f829 	bl	8001300 <FLASH_WaitForLastOperation>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(FlashStatus==HAL_OK)
 80032b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d118      	bne.n	80032ee <STMFLASH_Write+0x8a>
	{
		 while(WriteAddr<endaddr)//写数据
 80032bc:	e011      	b.n	80032e2 <STMFLASH_Write+0x7e>
		 {
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,WriteAddr,*pBuffer)!=HAL_OK)//写入数据
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	68f9      	ldr	r1, [r7, #12]
 80032ca:	2002      	movs	r0, #2
 80032cc:	f7fd ff92 	bl	80011f4 <HAL_FLASH_Program>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <STMFLASH_Write+0x88>
			{
				break;	//写入异常
			}
			WriteAddr+=4;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3304      	adds	r3, #4
 80032da:	60fb      	str	r3, [r7, #12]
			pBuffer++;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	3304      	adds	r3, #4
 80032e0:	60bb      	str	r3, [r7, #8]
		 while(WriteAddr<endaddr)//写数据
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d3e9      	bcc.n	80032be <STMFLASH_Write+0x5a>
 80032ea:	e000      	b.n	80032ee <STMFLASH_Write+0x8a>
				break;	//写入异常
 80032ec:	bf00      	nop
		}
	}
	HAL_FLASH_Lock();           //上锁
 80032ee:	f7fd fff7 	bl	80012e0 <HAL_FLASH_Lock>
 80032f2:	e000      	b.n	80032f6 <STMFLASH_Write+0x92>
	if(WriteAddr<STM32_FLASH_BASE||WriteAddr%4)return;	//非法地址
 80032f4:	bf00      	nop
}
 80032f6:	3738      	adds	r7, #56	; 0x38
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <PrintFlashTest>:
}


/*FLASH读取打印程序*/
void PrintFlashTest(uint32_t L,uint32_t addr)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
	uint32_t i=0;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
	for(i=0;i<L;i++)
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	e00f      	b.n	8003330 <PrintFlashTest+0x34>
	{
		printf("\naddr is:0x%x, data is:0x%x", addr+i*4,  *(__IO uint32_t*)(addr+i*4));
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	009a      	lsls	r2, r3, #2
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	18d1      	adds	r1, r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	009a      	lsls	r2, r3, #2
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4413      	add	r3, r2
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	4808      	ldr	r0, [pc, #32]	; (8003348 <PrintFlashTest+0x4c>)
 8003326:	f000 f909 	bl	800353c <iprintf>
	for(i=0;i<L;i++)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	3301      	adds	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	429a      	cmp	r2, r3
 8003336:	d3eb      	bcc.n	8003310 <PrintFlashTest+0x14>
	}
	printf("\n");
 8003338:	200a      	movs	r0, #10
 800333a:	f000 f917 	bl	800356c <putchar>

}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	080047d4 	.word	0x080047d4

0800334c <iap_write_appbin>:
u32 iapbuf[512]; 	//2K字节缓存
//appxaddr:应用程序的起始地址
//appbuf:应用程序CODE.
//appsize:应用程序大小(字节).
void iap_write_appbin(u32 appxaddr,u8 *appbuf,u32 appsize)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
	u32 t;
	u16 i=0;
 8003358:	2300      	movs	r3, #0
 800335a:	847b      	strh	r3, [r7, #34]	; 0x22
	u32 temp;
	u32 fwaddr=appxaddr;//当前写入的地址
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	61fb      	str	r3, [r7, #28]
	u8 *dfu=appbuf;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	61bb      	str	r3, [r7, #24]

	STMFLASH_Erase(fwaddr, appsize);
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	69f8      	ldr	r0, [r7, #28]
 8003368:	f7ff ff1e 	bl	80031a8 <STMFLASH_Erase>

	for(t=0;t<appsize;t+=4)
 800336c:	2300      	movs	r3, #0
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
 8003370:	e03f      	b.n	80033f2 <iap_write_appbin+0xa6>
	{
		temp=(u32)dfu[3]<<24;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	3303      	adds	r3, #3
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	617b      	str	r3, [r7, #20]
		temp|=(u32)dfu[2]<<16;
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	3302      	adds	r3, #2
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
		temp|=(u32)dfu[1]<<8;
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	3301      	adds	r3, #1
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
		temp|=(u32)dfu[0];
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
		dfu+=4;//偏移4个字节
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	3304      	adds	r3, #4
 80033a8:	61bb      	str	r3, [r7, #24]
		iapbuf[i++]=temp;
 80033aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	847a      	strh	r2, [r7, #34]	; 0x22
 80033b0:	4619      	mov	r1, r3
 80033b2:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <iap_write_appbin+0xd4>)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		if(i==512)
 80033ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c0:	d110      	bne.n	80033e4 <iap_write_appbin+0x98>
		{
			i=0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	847b      	strh	r3, [r7, #34]	; 0x22
			STMFLASH_Write(fwaddr,iapbuf,512);
 80033c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ca:	4915      	ldr	r1, [pc, #84]	; (8003420 <iap_write_appbin+0xd4>)
 80033cc:	69f8      	ldr	r0, [r7, #28]
 80033ce:	f7ff ff49 	bl	8003264 <STMFLASH_Write>
			PrintFlashTest(512,fwaddr);
 80033d2:	69f9      	ldr	r1, [r7, #28]
 80033d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80033d8:	f7ff ff90 	bl	80032fc <PrintFlashTest>
			fwaddr+=2048;//偏移2048  512*4=2048
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e2:	61fb      	str	r3, [r7, #28]
		}
		printf("write t = %d\r\n", t);
 80033e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e6:	480f      	ldr	r0, [pc, #60]	; (8003424 <iap_write_appbin+0xd8>)
 80033e8:	f000 f8a8 	bl	800353c <iprintf>
	for(t=0;t<appsize;t+=4)
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	3304      	adds	r3, #4
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
 80033f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d3bb      	bcc.n	8003372 <iap_write_appbin+0x26>
	}
	printf("i = %d, fwaddr = 0x%x\r\n", i, fwaddr);
 80033fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	4619      	mov	r1, r3
 8003400:	4809      	ldr	r0, [pc, #36]	; (8003428 <iap_write_appbin+0xdc>)
 8003402:	f000 f89b 	bl	800353c <iprintf>
	if(i)
 8003406:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <iap_write_appbin+0xcc>
		STMFLASH_Write(fwaddr,iapbuf,i);//将最后的一些内容字节写进去.
 800340c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800340e:	461a      	mov	r2, r3
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <iap_write_appbin+0xd4>)
 8003412:	69f8      	ldr	r0, [r7, #28]
 8003414:	f7ff ff26 	bl	8003264 <STMFLASH_Write>
}
 8003418:	bf00      	nop
 800341a:	3728      	adds	r7, #40	; 0x28
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	2000010c 	.word	0x2000010c
 8003424:	080047f0 	.word	0x080047f0
 8003428:	08004800 	.word	0x08004800

0800342c <iap_load_app>:
//}

//跳转到应用程序段
//appxaddr:用户代码起始地址.
void iap_load_app(u32 appxaddr)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	if(((*(vu32*)appxaddr)&0x2FFE0000)==0x20020000)	//检查栈顶地址是否合法.    0x20000000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <iap_load_app+0x84>)
 800343a:	4013      	ands	r3, r2
 800343c:	4a1d      	ldr	r2, [pc, #116]	; (80034b4 <iap_load_app+0x88>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d11f      	bne.n	8003482 <iap_load_app+0x56>
	{
		printf("appxaddr == 0x20020000, jump2app ...\r\n");
 8003442:	481d      	ldr	r0, [pc, #116]	; (80034b8 <iap_load_app+0x8c>)
 8003444:	f000 f916 	bl	8003674 <puts>
		jump2app=(iapfun)*(vu32*)(appxaddr+4);		//用户代码区第二个字为程序开始地址(复位地址)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3304      	adds	r3, #4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <iap_load_app+0x90>)
 8003452:	601a      	str	r2, [r3, #0]
		printf("MSR_MSP begin ... %s\r\n", jump2app);
 8003454:	4b19      	ldr	r3, [pc, #100]	; (80034bc <iap_load_app+0x90>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4619      	mov	r1, r3
 800345a:	4819      	ldr	r0, [pc, #100]	; (80034c0 <iap_load_app+0x94>)
 800345c:	f000 f86e 	bl	800353c <iprintf>
		//MSR_MSP(*(vu32*)appxaddr);					//初始化APP堆栈指针(用户代码区的第一个字用于存放栈顶地址)
		__set_MSP(*(__IO uint32_t*)appxaddr);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f383 8808 	msr	MSP, r3
}
 800346c:	bf00      	nop
		printf("__set_MSP finish!\r\n");
 800346e:	4815      	ldr	r0, [pc, #84]	; (80034c4 <iap_load_app+0x98>)
 8003470:	f000 f900 	bl	8003674 <puts>
		jump2app();									//跳转到APP.
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <iap_load_app+0x90>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4798      	blx	r3
		printf("jump2app finish!\r\n");
 800347a:	4813      	ldr	r0, [pc, #76]	; (80034c8 <iap_load_app+0x9c>)
 800347c:	f000 f8fa 	bl	8003674 <puts>
	{
		printf("appxaddr addr: 0x%8x\r\n", appxaddr );
		printf("appxaddr data: 0x%8x\r\n", ((*(vu32*)appxaddr)) );  // ((*(vu32*)appxaddr)&0x2FFE0000)
		printf("appxaddr &dat: 0x%8x\r\n", ((*(vu32*)appxaddr)&0x2FFE0000) );
	}
}
 8003480:	e011      	b.n	80034a6 <iap_load_app+0x7a>
		printf("appxaddr addr: 0x%8x\r\n", appxaddr );
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4811      	ldr	r0, [pc, #68]	; (80034cc <iap_load_app+0xa0>)
 8003486:	f000 f859 	bl	800353c <iprintf>
		printf("appxaddr data: 0x%8x\r\n", ((*(vu32*)appxaddr)) );  // ((*(vu32*)appxaddr)&0x2FFE0000)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	480f      	ldr	r0, [pc, #60]	; (80034d0 <iap_load_app+0xa4>)
 8003492:	f000 f853 	bl	800353c <iprintf>
		printf("appxaddr &dat: 0x%8x\r\n", ((*(vu32*)appxaddr)&0x2FFE0000) );
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <iap_load_app+0x84>)
 800349c:	4013      	ands	r3, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	480c      	ldr	r0, [pc, #48]	; (80034d4 <iap_load_app+0xa8>)
 80034a2:	f000 f84b 	bl	800353c <iprintf>
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	2ffe0000 	.word	0x2ffe0000
 80034b4:	20020000 	.word	0x20020000
 80034b8:	08004818 	.word	0x08004818
 80034bc:	20000108 	.word	0x20000108
 80034c0:	08004840 	.word	0x08004840
 80034c4:	08004858 	.word	0x08004858
 80034c8:	0800486c 	.word	0x0800486c
 80034cc:	08004880 	.word	0x08004880
 80034d0:	08004898 	.word	0x08004898
 80034d4:	080048b0 	.word	0x080048b0

080034d8 <__errno>:
 80034d8:	4b01      	ldr	r3, [pc, #4]	; (80034e0 <__errno+0x8>)
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	2000000c 	.word	0x2000000c

080034e4 <__libc_init_array>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	4d0d      	ldr	r5, [pc, #52]	; (800351c <__libc_init_array+0x38>)
 80034e8:	4c0d      	ldr	r4, [pc, #52]	; (8003520 <__libc_init_array+0x3c>)
 80034ea:	1b64      	subs	r4, r4, r5
 80034ec:	10a4      	asrs	r4, r4, #2
 80034ee:	2600      	movs	r6, #0
 80034f0:	42a6      	cmp	r6, r4
 80034f2:	d109      	bne.n	8003508 <__libc_init_array+0x24>
 80034f4:	4d0b      	ldr	r5, [pc, #44]	; (8003524 <__libc_init_array+0x40>)
 80034f6:	4c0c      	ldr	r4, [pc, #48]	; (8003528 <__libc_init_array+0x44>)
 80034f8:	f001 f84a 	bl	8004590 <_init>
 80034fc:	1b64      	subs	r4, r4, r5
 80034fe:	10a4      	asrs	r4, r4, #2
 8003500:	2600      	movs	r6, #0
 8003502:	42a6      	cmp	r6, r4
 8003504:	d105      	bne.n	8003512 <__libc_init_array+0x2e>
 8003506:	bd70      	pop	{r4, r5, r6, pc}
 8003508:	f855 3b04 	ldr.w	r3, [r5], #4
 800350c:	4798      	blx	r3
 800350e:	3601      	adds	r6, #1
 8003510:	e7ee      	b.n	80034f0 <__libc_init_array+0xc>
 8003512:	f855 3b04 	ldr.w	r3, [r5], #4
 8003516:	4798      	blx	r3
 8003518:	3601      	adds	r6, #1
 800351a:	e7f2      	b.n	8003502 <__libc_init_array+0x1e>
 800351c:	08004980 	.word	0x08004980
 8003520:	08004980 	.word	0x08004980
 8003524:	08004980 	.word	0x08004980
 8003528:	08004984 	.word	0x08004984

0800352c <memset>:
 800352c:	4402      	add	r2, r0
 800352e:	4603      	mov	r3, r0
 8003530:	4293      	cmp	r3, r2
 8003532:	d100      	bne.n	8003536 <memset+0xa>
 8003534:	4770      	bx	lr
 8003536:	f803 1b01 	strb.w	r1, [r3], #1
 800353a:	e7f9      	b.n	8003530 <memset+0x4>

0800353c <iprintf>:
 800353c:	b40f      	push	{r0, r1, r2, r3}
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <iprintf+0x2c>)
 8003540:	b513      	push	{r0, r1, r4, lr}
 8003542:	681c      	ldr	r4, [r3, #0]
 8003544:	b124      	cbz	r4, 8003550 <iprintf+0x14>
 8003546:	69a3      	ldr	r3, [r4, #24]
 8003548:	b913      	cbnz	r3, 8003550 <iprintf+0x14>
 800354a:	4620      	mov	r0, r4
 800354c:	f000 fa74 	bl	8003a38 <__sinit>
 8003550:	ab05      	add	r3, sp, #20
 8003552:	9a04      	ldr	r2, [sp, #16]
 8003554:	68a1      	ldr	r1, [r4, #8]
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	4620      	mov	r0, r4
 800355a:	f000 fc45 	bl	8003de8 <_vfiprintf_r>
 800355e:	b002      	add	sp, #8
 8003560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003564:	b004      	add	sp, #16
 8003566:	4770      	bx	lr
 8003568:	2000000c 	.word	0x2000000c

0800356c <putchar>:
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <putchar+0x28>)
 800356e:	b513      	push	{r0, r1, r4, lr}
 8003570:	681c      	ldr	r4, [r3, #0]
 8003572:	4601      	mov	r1, r0
 8003574:	b134      	cbz	r4, 8003584 <putchar+0x18>
 8003576:	69a3      	ldr	r3, [r4, #24]
 8003578:	b923      	cbnz	r3, 8003584 <putchar+0x18>
 800357a:	9001      	str	r0, [sp, #4]
 800357c:	4620      	mov	r0, r4
 800357e:	f000 fa5b 	bl	8003a38 <__sinit>
 8003582:	9901      	ldr	r1, [sp, #4]
 8003584:	68a2      	ldr	r2, [r4, #8]
 8003586:	4620      	mov	r0, r4
 8003588:	b002      	add	sp, #8
 800358a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800358e:	f000 beef 	b.w	8004370 <_putc_r>
 8003592:	bf00      	nop
 8003594:	2000000c 	.word	0x2000000c

08003598 <_puts_r>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	460e      	mov	r6, r1
 800359c:	4605      	mov	r5, r0
 800359e:	b118      	cbz	r0, 80035a8 <_puts_r+0x10>
 80035a0:	6983      	ldr	r3, [r0, #24]
 80035a2:	b90b      	cbnz	r3, 80035a8 <_puts_r+0x10>
 80035a4:	f000 fa48 	bl	8003a38 <__sinit>
 80035a8:	69ab      	ldr	r3, [r5, #24]
 80035aa:	68ac      	ldr	r4, [r5, #8]
 80035ac:	b913      	cbnz	r3, 80035b4 <_puts_r+0x1c>
 80035ae:	4628      	mov	r0, r5
 80035b0:	f000 fa42 	bl	8003a38 <__sinit>
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <_puts_r+0xd0>)
 80035b6:	429c      	cmp	r4, r3
 80035b8:	d120      	bne.n	80035fc <_puts_r+0x64>
 80035ba:	686c      	ldr	r4, [r5, #4]
 80035bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035be:	07db      	lsls	r3, r3, #31
 80035c0:	d405      	bmi.n	80035ce <_puts_r+0x36>
 80035c2:	89a3      	ldrh	r3, [r4, #12]
 80035c4:	0598      	lsls	r0, r3, #22
 80035c6:	d402      	bmi.n	80035ce <_puts_r+0x36>
 80035c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ca:	f000 fad3 	bl	8003b74 <__retarget_lock_acquire_recursive>
 80035ce:	89a3      	ldrh	r3, [r4, #12]
 80035d0:	0719      	lsls	r1, r3, #28
 80035d2:	d51d      	bpl.n	8003610 <_puts_r+0x78>
 80035d4:	6923      	ldr	r3, [r4, #16]
 80035d6:	b1db      	cbz	r3, 8003610 <_puts_r+0x78>
 80035d8:	3e01      	subs	r6, #1
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035e0:	3b01      	subs	r3, #1
 80035e2:	60a3      	str	r3, [r4, #8]
 80035e4:	bb39      	cbnz	r1, 8003636 <_puts_r+0x9e>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	da38      	bge.n	800365c <_puts_r+0xc4>
 80035ea:	4622      	mov	r2, r4
 80035ec:	210a      	movs	r1, #10
 80035ee:	4628      	mov	r0, r5
 80035f0:	f000 f848 	bl	8003684 <__swbuf_r>
 80035f4:	3001      	adds	r0, #1
 80035f6:	d011      	beq.n	800361c <_puts_r+0x84>
 80035f8:	250a      	movs	r5, #10
 80035fa:	e011      	b.n	8003620 <_puts_r+0x88>
 80035fc:	4b1b      	ldr	r3, [pc, #108]	; (800366c <_puts_r+0xd4>)
 80035fe:	429c      	cmp	r4, r3
 8003600:	d101      	bne.n	8003606 <_puts_r+0x6e>
 8003602:	68ac      	ldr	r4, [r5, #8]
 8003604:	e7da      	b.n	80035bc <_puts_r+0x24>
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <_puts_r+0xd8>)
 8003608:	429c      	cmp	r4, r3
 800360a:	bf08      	it	eq
 800360c:	68ec      	ldreq	r4, [r5, #12]
 800360e:	e7d5      	b.n	80035bc <_puts_r+0x24>
 8003610:	4621      	mov	r1, r4
 8003612:	4628      	mov	r0, r5
 8003614:	f000 f888 	bl	8003728 <__swsetup_r>
 8003618:	2800      	cmp	r0, #0
 800361a:	d0dd      	beq.n	80035d8 <_puts_r+0x40>
 800361c:	f04f 35ff 	mov.w	r5, #4294967295
 8003620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003622:	07da      	lsls	r2, r3, #31
 8003624:	d405      	bmi.n	8003632 <_puts_r+0x9a>
 8003626:	89a3      	ldrh	r3, [r4, #12]
 8003628:	059b      	lsls	r3, r3, #22
 800362a:	d402      	bmi.n	8003632 <_puts_r+0x9a>
 800362c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800362e:	f000 faa2 	bl	8003b76 <__retarget_lock_release_recursive>
 8003632:	4628      	mov	r0, r5
 8003634:	bd70      	pop	{r4, r5, r6, pc}
 8003636:	2b00      	cmp	r3, #0
 8003638:	da04      	bge.n	8003644 <_puts_r+0xac>
 800363a:	69a2      	ldr	r2, [r4, #24]
 800363c:	429a      	cmp	r2, r3
 800363e:	dc06      	bgt.n	800364e <_puts_r+0xb6>
 8003640:	290a      	cmp	r1, #10
 8003642:	d004      	beq.n	800364e <_puts_r+0xb6>
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	6022      	str	r2, [r4, #0]
 800364a:	7019      	strb	r1, [r3, #0]
 800364c:	e7c5      	b.n	80035da <_puts_r+0x42>
 800364e:	4622      	mov	r2, r4
 8003650:	4628      	mov	r0, r5
 8003652:	f000 f817 	bl	8003684 <__swbuf_r>
 8003656:	3001      	adds	r0, #1
 8003658:	d1bf      	bne.n	80035da <_puts_r+0x42>
 800365a:	e7df      	b.n	800361c <_puts_r+0x84>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	250a      	movs	r5, #10
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	6022      	str	r2, [r4, #0]
 8003664:	701d      	strb	r5, [r3, #0]
 8003666:	e7db      	b.n	8003620 <_puts_r+0x88>
 8003668:	08004904 	.word	0x08004904
 800366c:	08004924 	.word	0x08004924
 8003670:	080048e4 	.word	0x080048e4

08003674 <puts>:
 8003674:	4b02      	ldr	r3, [pc, #8]	; (8003680 <puts+0xc>)
 8003676:	4601      	mov	r1, r0
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	f7ff bf8d 	b.w	8003598 <_puts_r>
 800367e:	bf00      	nop
 8003680:	2000000c 	.word	0x2000000c

08003684 <__swbuf_r>:
 8003684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003686:	460e      	mov	r6, r1
 8003688:	4614      	mov	r4, r2
 800368a:	4605      	mov	r5, r0
 800368c:	b118      	cbz	r0, 8003696 <__swbuf_r+0x12>
 800368e:	6983      	ldr	r3, [r0, #24]
 8003690:	b90b      	cbnz	r3, 8003696 <__swbuf_r+0x12>
 8003692:	f000 f9d1 	bl	8003a38 <__sinit>
 8003696:	4b21      	ldr	r3, [pc, #132]	; (800371c <__swbuf_r+0x98>)
 8003698:	429c      	cmp	r4, r3
 800369a:	d12b      	bne.n	80036f4 <__swbuf_r+0x70>
 800369c:	686c      	ldr	r4, [r5, #4]
 800369e:	69a3      	ldr	r3, [r4, #24]
 80036a0:	60a3      	str	r3, [r4, #8]
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	071a      	lsls	r2, r3, #28
 80036a6:	d52f      	bpl.n	8003708 <__swbuf_r+0x84>
 80036a8:	6923      	ldr	r3, [r4, #16]
 80036aa:	b36b      	cbz	r3, 8003708 <__swbuf_r+0x84>
 80036ac:	6923      	ldr	r3, [r4, #16]
 80036ae:	6820      	ldr	r0, [r4, #0]
 80036b0:	1ac0      	subs	r0, r0, r3
 80036b2:	6963      	ldr	r3, [r4, #20]
 80036b4:	b2f6      	uxtb	r6, r6
 80036b6:	4283      	cmp	r3, r0
 80036b8:	4637      	mov	r7, r6
 80036ba:	dc04      	bgt.n	80036c6 <__swbuf_r+0x42>
 80036bc:	4621      	mov	r1, r4
 80036be:	4628      	mov	r0, r5
 80036c0:	f000 f926 	bl	8003910 <_fflush_r>
 80036c4:	bb30      	cbnz	r0, 8003714 <__swbuf_r+0x90>
 80036c6:	68a3      	ldr	r3, [r4, #8]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	60a3      	str	r3, [r4, #8]
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	6022      	str	r2, [r4, #0]
 80036d2:	701e      	strb	r6, [r3, #0]
 80036d4:	6963      	ldr	r3, [r4, #20]
 80036d6:	3001      	adds	r0, #1
 80036d8:	4283      	cmp	r3, r0
 80036da:	d004      	beq.n	80036e6 <__swbuf_r+0x62>
 80036dc:	89a3      	ldrh	r3, [r4, #12]
 80036de:	07db      	lsls	r3, r3, #31
 80036e0:	d506      	bpl.n	80036f0 <__swbuf_r+0x6c>
 80036e2:	2e0a      	cmp	r6, #10
 80036e4:	d104      	bne.n	80036f0 <__swbuf_r+0x6c>
 80036e6:	4621      	mov	r1, r4
 80036e8:	4628      	mov	r0, r5
 80036ea:	f000 f911 	bl	8003910 <_fflush_r>
 80036ee:	b988      	cbnz	r0, 8003714 <__swbuf_r+0x90>
 80036f0:	4638      	mov	r0, r7
 80036f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <__swbuf_r+0x9c>)
 80036f6:	429c      	cmp	r4, r3
 80036f8:	d101      	bne.n	80036fe <__swbuf_r+0x7a>
 80036fa:	68ac      	ldr	r4, [r5, #8]
 80036fc:	e7cf      	b.n	800369e <__swbuf_r+0x1a>
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <__swbuf_r+0xa0>)
 8003700:	429c      	cmp	r4, r3
 8003702:	bf08      	it	eq
 8003704:	68ec      	ldreq	r4, [r5, #12]
 8003706:	e7ca      	b.n	800369e <__swbuf_r+0x1a>
 8003708:	4621      	mov	r1, r4
 800370a:	4628      	mov	r0, r5
 800370c:	f000 f80c 	bl	8003728 <__swsetup_r>
 8003710:	2800      	cmp	r0, #0
 8003712:	d0cb      	beq.n	80036ac <__swbuf_r+0x28>
 8003714:	f04f 37ff 	mov.w	r7, #4294967295
 8003718:	e7ea      	b.n	80036f0 <__swbuf_r+0x6c>
 800371a:	bf00      	nop
 800371c:	08004904 	.word	0x08004904
 8003720:	08004924 	.word	0x08004924
 8003724:	080048e4 	.word	0x080048e4

08003728 <__swsetup_r>:
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <__swsetup_r+0xcc>)
 800372a:	b570      	push	{r4, r5, r6, lr}
 800372c:	681d      	ldr	r5, [r3, #0]
 800372e:	4606      	mov	r6, r0
 8003730:	460c      	mov	r4, r1
 8003732:	b125      	cbz	r5, 800373e <__swsetup_r+0x16>
 8003734:	69ab      	ldr	r3, [r5, #24]
 8003736:	b913      	cbnz	r3, 800373e <__swsetup_r+0x16>
 8003738:	4628      	mov	r0, r5
 800373a:	f000 f97d 	bl	8003a38 <__sinit>
 800373e:	4b2e      	ldr	r3, [pc, #184]	; (80037f8 <__swsetup_r+0xd0>)
 8003740:	429c      	cmp	r4, r3
 8003742:	d10f      	bne.n	8003764 <__swsetup_r+0x3c>
 8003744:	686c      	ldr	r4, [r5, #4]
 8003746:	89a3      	ldrh	r3, [r4, #12]
 8003748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800374c:	0719      	lsls	r1, r3, #28
 800374e:	d42c      	bmi.n	80037aa <__swsetup_r+0x82>
 8003750:	06dd      	lsls	r5, r3, #27
 8003752:	d411      	bmi.n	8003778 <__swsetup_r+0x50>
 8003754:	2309      	movs	r3, #9
 8003756:	6033      	str	r3, [r6, #0]
 8003758:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800375c:	81a3      	strh	r3, [r4, #12]
 800375e:	f04f 30ff 	mov.w	r0, #4294967295
 8003762:	e03e      	b.n	80037e2 <__swsetup_r+0xba>
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <__swsetup_r+0xd4>)
 8003766:	429c      	cmp	r4, r3
 8003768:	d101      	bne.n	800376e <__swsetup_r+0x46>
 800376a:	68ac      	ldr	r4, [r5, #8]
 800376c:	e7eb      	b.n	8003746 <__swsetup_r+0x1e>
 800376e:	4b24      	ldr	r3, [pc, #144]	; (8003800 <__swsetup_r+0xd8>)
 8003770:	429c      	cmp	r4, r3
 8003772:	bf08      	it	eq
 8003774:	68ec      	ldreq	r4, [r5, #12]
 8003776:	e7e6      	b.n	8003746 <__swsetup_r+0x1e>
 8003778:	0758      	lsls	r0, r3, #29
 800377a:	d512      	bpl.n	80037a2 <__swsetup_r+0x7a>
 800377c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800377e:	b141      	cbz	r1, 8003792 <__swsetup_r+0x6a>
 8003780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003784:	4299      	cmp	r1, r3
 8003786:	d002      	beq.n	800378e <__swsetup_r+0x66>
 8003788:	4630      	mov	r0, r6
 800378a:	f000 fa59 	bl	8003c40 <_free_r>
 800378e:	2300      	movs	r3, #0
 8003790:	6363      	str	r3, [r4, #52]	; 0x34
 8003792:	89a3      	ldrh	r3, [r4, #12]
 8003794:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003798:	81a3      	strh	r3, [r4, #12]
 800379a:	2300      	movs	r3, #0
 800379c:	6063      	str	r3, [r4, #4]
 800379e:	6923      	ldr	r3, [r4, #16]
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	89a3      	ldrh	r3, [r4, #12]
 80037a4:	f043 0308 	orr.w	r3, r3, #8
 80037a8:	81a3      	strh	r3, [r4, #12]
 80037aa:	6923      	ldr	r3, [r4, #16]
 80037ac:	b94b      	cbnz	r3, 80037c2 <__swsetup_r+0x9a>
 80037ae:	89a3      	ldrh	r3, [r4, #12]
 80037b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b8:	d003      	beq.n	80037c2 <__swsetup_r+0x9a>
 80037ba:	4621      	mov	r1, r4
 80037bc:	4630      	mov	r0, r6
 80037be:	f000 f9ff 	bl	8003bc0 <__smakebuf_r>
 80037c2:	89a0      	ldrh	r0, [r4, #12]
 80037c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037c8:	f010 0301 	ands.w	r3, r0, #1
 80037cc:	d00a      	beq.n	80037e4 <__swsetup_r+0xbc>
 80037ce:	2300      	movs	r3, #0
 80037d0:	60a3      	str	r3, [r4, #8]
 80037d2:	6963      	ldr	r3, [r4, #20]
 80037d4:	425b      	negs	r3, r3
 80037d6:	61a3      	str	r3, [r4, #24]
 80037d8:	6923      	ldr	r3, [r4, #16]
 80037da:	b943      	cbnz	r3, 80037ee <__swsetup_r+0xc6>
 80037dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037e0:	d1ba      	bne.n	8003758 <__swsetup_r+0x30>
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	0781      	lsls	r1, r0, #30
 80037e6:	bf58      	it	pl
 80037e8:	6963      	ldrpl	r3, [r4, #20]
 80037ea:	60a3      	str	r3, [r4, #8]
 80037ec:	e7f4      	b.n	80037d8 <__swsetup_r+0xb0>
 80037ee:	2000      	movs	r0, #0
 80037f0:	e7f7      	b.n	80037e2 <__swsetup_r+0xba>
 80037f2:	bf00      	nop
 80037f4:	2000000c 	.word	0x2000000c
 80037f8:	08004904 	.word	0x08004904
 80037fc:	08004924 	.word	0x08004924
 8003800:	080048e4 	.word	0x080048e4

08003804 <__sflush_r>:
 8003804:	898a      	ldrh	r2, [r1, #12]
 8003806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800380a:	4605      	mov	r5, r0
 800380c:	0710      	lsls	r0, r2, #28
 800380e:	460c      	mov	r4, r1
 8003810:	d458      	bmi.n	80038c4 <__sflush_r+0xc0>
 8003812:	684b      	ldr	r3, [r1, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	dc05      	bgt.n	8003824 <__sflush_r+0x20>
 8003818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	dc02      	bgt.n	8003824 <__sflush_r+0x20>
 800381e:	2000      	movs	r0, #0
 8003820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003826:	2e00      	cmp	r6, #0
 8003828:	d0f9      	beq.n	800381e <__sflush_r+0x1a>
 800382a:	2300      	movs	r3, #0
 800382c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003830:	682f      	ldr	r7, [r5, #0]
 8003832:	602b      	str	r3, [r5, #0]
 8003834:	d032      	beq.n	800389c <__sflush_r+0x98>
 8003836:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	075a      	lsls	r2, r3, #29
 800383c:	d505      	bpl.n	800384a <__sflush_r+0x46>
 800383e:	6863      	ldr	r3, [r4, #4]
 8003840:	1ac0      	subs	r0, r0, r3
 8003842:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003844:	b10b      	cbz	r3, 800384a <__sflush_r+0x46>
 8003846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003848:	1ac0      	subs	r0, r0, r3
 800384a:	2300      	movs	r3, #0
 800384c:	4602      	mov	r2, r0
 800384e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003850:	6a21      	ldr	r1, [r4, #32]
 8003852:	4628      	mov	r0, r5
 8003854:	47b0      	blx	r6
 8003856:	1c43      	adds	r3, r0, #1
 8003858:	89a3      	ldrh	r3, [r4, #12]
 800385a:	d106      	bne.n	800386a <__sflush_r+0x66>
 800385c:	6829      	ldr	r1, [r5, #0]
 800385e:	291d      	cmp	r1, #29
 8003860:	d82c      	bhi.n	80038bc <__sflush_r+0xb8>
 8003862:	4a2a      	ldr	r2, [pc, #168]	; (800390c <__sflush_r+0x108>)
 8003864:	40ca      	lsrs	r2, r1
 8003866:	07d6      	lsls	r6, r2, #31
 8003868:	d528      	bpl.n	80038bc <__sflush_r+0xb8>
 800386a:	2200      	movs	r2, #0
 800386c:	6062      	str	r2, [r4, #4]
 800386e:	04d9      	lsls	r1, r3, #19
 8003870:	6922      	ldr	r2, [r4, #16]
 8003872:	6022      	str	r2, [r4, #0]
 8003874:	d504      	bpl.n	8003880 <__sflush_r+0x7c>
 8003876:	1c42      	adds	r2, r0, #1
 8003878:	d101      	bne.n	800387e <__sflush_r+0x7a>
 800387a:	682b      	ldr	r3, [r5, #0]
 800387c:	b903      	cbnz	r3, 8003880 <__sflush_r+0x7c>
 800387e:	6560      	str	r0, [r4, #84]	; 0x54
 8003880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003882:	602f      	str	r7, [r5, #0]
 8003884:	2900      	cmp	r1, #0
 8003886:	d0ca      	beq.n	800381e <__sflush_r+0x1a>
 8003888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800388c:	4299      	cmp	r1, r3
 800388e:	d002      	beq.n	8003896 <__sflush_r+0x92>
 8003890:	4628      	mov	r0, r5
 8003892:	f000 f9d5 	bl	8003c40 <_free_r>
 8003896:	2000      	movs	r0, #0
 8003898:	6360      	str	r0, [r4, #52]	; 0x34
 800389a:	e7c1      	b.n	8003820 <__sflush_r+0x1c>
 800389c:	6a21      	ldr	r1, [r4, #32]
 800389e:	2301      	movs	r3, #1
 80038a0:	4628      	mov	r0, r5
 80038a2:	47b0      	blx	r6
 80038a4:	1c41      	adds	r1, r0, #1
 80038a6:	d1c7      	bne.n	8003838 <__sflush_r+0x34>
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0c4      	beq.n	8003838 <__sflush_r+0x34>
 80038ae:	2b1d      	cmp	r3, #29
 80038b0:	d001      	beq.n	80038b6 <__sflush_r+0xb2>
 80038b2:	2b16      	cmp	r3, #22
 80038b4:	d101      	bne.n	80038ba <__sflush_r+0xb6>
 80038b6:	602f      	str	r7, [r5, #0]
 80038b8:	e7b1      	b.n	800381e <__sflush_r+0x1a>
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c0:	81a3      	strh	r3, [r4, #12]
 80038c2:	e7ad      	b.n	8003820 <__sflush_r+0x1c>
 80038c4:	690f      	ldr	r7, [r1, #16]
 80038c6:	2f00      	cmp	r7, #0
 80038c8:	d0a9      	beq.n	800381e <__sflush_r+0x1a>
 80038ca:	0793      	lsls	r3, r2, #30
 80038cc:	680e      	ldr	r6, [r1, #0]
 80038ce:	bf08      	it	eq
 80038d0:	694b      	ldreq	r3, [r1, #20]
 80038d2:	600f      	str	r7, [r1, #0]
 80038d4:	bf18      	it	ne
 80038d6:	2300      	movne	r3, #0
 80038d8:	eba6 0807 	sub.w	r8, r6, r7
 80038dc:	608b      	str	r3, [r1, #8]
 80038de:	f1b8 0f00 	cmp.w	r8, #0
 80038e2:	dd9c      	ble.n	800381e <__sflush_r+0x1a>
 80038e4:	6a21      	ldr	r1, [r4, #32]
 80038e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038e8:	4643      	mov	r3, r8
 80038ea:	463a      	mov	r2, r7
 80038ec:	4628      	mov	r0, r5
 80038ee:	47b0      	blx	r6
 80038f0:	2800      	cmp	r0, #0
 80038f2:	dc06      	bgt.n	8003902 <__sflush_r+0xfe>
 80038f4:	89a3      	ldrh	r3, [r4, #12]
 80038f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038fa:	81a3      	strh	r3, [r4, #12]
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	e78e      	b.n	8003820 <__sflush_r+0x1c>
 8003902:	4407      	add	r7, r0
 8003904:	eba8 0800 	sub.w	r8, r8, r0
 8003908:	e7e9      	b.n	80038de <__sflush_r+0xda>
 800390a:	bf00      	nop
 800390c:	20400001 	.word	0x20400001

08003910 <_fflush_r>:
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	690b      	ldr	r3, [r1, #16]
 8003914:	4605      	mov	r5, r0
 8003916:	460c      	mov	r4, r1
 8003918:	b913      	cbnz	r3, 8003920 <_fflush_r+0x10>
 800391a:	2500      	movs	r5, #0
 800391c:	4628      	mov	r0, r5
 800391e:	bd38      	pop	{r3, r4, r5, pc}
 8003920:	b118      	cbz	r0, 800392a <_fflush_r+0x1a>
 8003922:	6983      	ldr	r3, [r0, #24]
 8003924:	b90b      	cbnz	r3, 800392a <_fflush_r+0x1a>
 8003926:	f000 f887 	bl	8003a38 <__sinit>
 800392a:	4b14      	ldr	r3, [pc, #80]	; (800397c <_fflush_r+0x6c>)
 800392c:	429c      	cmp	r4, r3
 800392e:	d11b      	bne.n	8003968 <_fflush_r+0x58>
 8003930:	686c      	ldr	r4, [r5, #4]
 8003932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0ef      	beq.n	800391a <_fflush_r+0xa>
 800393a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800393c:	07d0      	lsls	r0, r2, #31
 800393e:	d404      	bmi.n	800394a <_fflush_r+0x3a>
 8003940:	0599      	lsls	r1, r3, #22
 8003942:	d402      	bmi.n	800394a <_fflush_r+0x3a>
 8003944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003946:	f000 f915 	bl	8003b74 <__retarget_lock_acquire_recursive>
 800394a:	4628      	mov	r0, r5
 800394c:	4621      	mov	r1, r4
 800394e:	f7ff ff59 	bl	8003804 <__sflush_r>
 8003952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003954:	07da      	lsls	r2, r3, #31
 8003956:	4605      	mov	r5, r0
 8003958:	d4e0      	bmi.n	800391c <_fflush_r+0xc>
 800395a:	89a3      	ldrh	r3, [r4, #12]
 800395c:	059b      	lsls	r3, r3, #22
 800395e:	d4dd      	bmi.n	800391c <_fflush_r+0xc>
 8003960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003962:	f000 f908 	bl	8003b76 <__retarget_lock_release_recursive>
 8003966:	e7d9      	b.n	800391c <_fflush_r+0xc>
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <_fflush_r+0x70>)
 800396a:	429c      	cmp	r4, r3
 800396c:	d101      	bne.n	8003972 <_fflush_r+0x62>
 800396e:	68ac      	ldr	r4, [r5, #8]
 8003970:	e7df      	b.n	8003932 <_fflush_r+0x22>
 8003972:	4b04      	ldr	r3, [pc, #16]	; (8003984 <_fflush_r+0x74>)
 8003974:	429c      	cmp	r4, r3
 8003976:	bf08      	it	eq
 8003978:	68ec      	ldreq	r4, [r5, #12]
 800397a:	e7da      	b.n	8003932 <_fflush_r+0x22>
 800397c:	08004904 	.word	0x08004904
 8003980:	08004924 	.word	0x08004924
 8003984:	080048e4 	.word	0x080048e4

08003988 <std>:
 8003988:	2300      	movs	r3, #0
 800398a:	b510      	push	{r4, lr}
 800398c:	4604      	mov	r4, r0
 800398e:	e9c0 3300 	strd	r3, r3, [r0]
 8003992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003996:	6083      	str	r3, [r0, #8]
 8003998:	8181      	strh	r1, [r0, #12]
 800399a:	6643      	str	r3, [r0, #100]	; 0x64
 800399c:	81c2      	strh	r2, [r0, #14]
 800399e:	6183      	str	r3, [r0, #24]
 80039a0:	4619      	mov	r1, r3
 80039a2:	2208      	movs	r2, #8
 80039a4:	305c      	adds	r0, #92	; 0x5c
 80039a6:	f7ff fdc1 	bl	800352c <memset>
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <std+0x38>)
 80039ac:	6263      	str	r3, [r4, #36]	; 0x24
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <std+0x3c>)
 80039b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <std+0x40>)
 80039b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <std+0x44>)
 80039b8:	6224      	str	r4, [r4, #32]
 80039ba:	6323      	str	r3, [r4, #48]	; 0x30
 80039bc:	bd10      	pop	{r4, pc}
 80039be:	bf00      	nop
 80039c0:	08004421 	.word	0x08004421
 80039c4:	08004443 	.word	0x08004443
 80039c8:	0800447b 	.word	0x0800447b
 80039cc:	0800449f 	.word	0x0800449f

080039d0 <_cleanup_r>:
 80039d0:	4901      	ldr	r1, [pc, #4]	; (80039d8 <_cleanup_r+0x8>)
 80039d2:	f000 b8af 	b.w	8003b34 <_fwalk_reent>
 80039d6:	bf00      	nop
 80039d8:	08003911 	.word	0x08003911

080039dc <__sfmoreglue>:
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	1e4a      	subs	r2, r1, #1
 80039e0:	2568      	movs	r5, #104	; 0x68
 80039e2:	4355      	muls	r5, r2
 80039e4:	460e      	mov	r6, r1
 80039e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039ea:	f000 f979 	bl	8003ce0 <_malloc_r>
 80039ee:	4604      	mov	r4, r0
 80039f0:	b140      	cbz	r0, 8003a04 <__sfmoreglue+0x28>
 80039f2:	2100      	movs	r1, #0
 80039f4:	e9c0 1600 	strd	r1, r6, [r0]
 80039f8:	300c      	adds	r0, #12
 80039fa:	60a0      	str	r0, [r4, #8]
 80039fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a00:	f7ff fd94 	bl	800352c <memset>
 8003a04:	4620      	mov	r0, r4
 8003a06:	bd70      	pop	{r4, r5, r6, pc}

08003a08 <__sfp_lock_acquire>:
 8003a08:	4801      	ldr	r0, [pc, #4]	; (8003a10 <__sfp_lock_acquire+0x8>)
 8003a0a:	f000 b8b3 	b.w	8003b74 <__retarget_lock_acquire_recursive>
 8003a0e:	bf00      	nop
 8003a10:	20000914 	.word	0x20000914

08003a14 <__sfp_lock_release>:
 8003a14:	4801      	ldr	r0, [pc, #4]	; (8003a1c <__sfp_lock_release+0x8>)
 8003a16:	f000 b8ae 	b.w	8003b76 <__retarget_lock_release_recursive>
 8003a1a:	bf00      	nop
 8003a1c:	20000914 	.word	0x20000914

08003a20 <__sinit_lock_acquire>:
 8003a20:	4801      	ldr	r0, [pc, #4]	; (8003a28 <__sinit_lock_acquire+0x8>)
 8003a22:	f000 b8a7 	b.w	8003b74 <__retarget_lock_acquire_recursive>
 8003a26:	bf00      	nop
 8003a28:	2000090f 	.word	0x2000090f

08003a2c <__sinit_lock_release>:
 8003a2c:	4801      	ldr	r0, [pc, #4]	; (8003a34 <__sinit_lock_release+0x8>)
 8003a2e:	f000 b8a2 	b.w	8003b76 <__retarget_lock_release_recursive>
 8003a32:	bf00      	nop
 8003a34:	2000090f 	.word	0x2000090f

08003a38 <__sinit>:
 8003a38:	b510      	push	{r4, lr}
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	f7ff fff0 	bl	8003a20 <__sinit_lock_acquire>
 8003a40:	69a3      	ldr	r3, [r4, #24]
 8003a42:	b11b      	cbz	r3, 8003a4c <__sinit+0x14>
 8003a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a48:	f7ff bff0 	b.w	8003a2c <__sinit_lock_release>
 8003a4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a50:	6523      	str	r3, [r4, #80]	; 0x50
 8003a52:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <__sinit+0x68>)
 8003a54:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <__sinit+0x6c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a5a:	42a3      	cmp	r3, r4
 8003a5c:	bf04      	itt	eq
 8003a5e:	2301      	moveq	r3, #1
 8003a60:	61a3      	streq	r3, [r4, #24]
 8003a62:	4620      	mov	r0, r4
 8003a64:	f000 f820 	bl	8003aa8 <__sfp>
 8003a68:	6060      	str	r0, [r4, #4]
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f000 f81c 	bl	8003aa8 <__sfp>
 8003a70:	60a0      	str	r0, [r4, #8]
 8003a72:	4620      	mov	r0, r4
 8003a74:	f000 f818 	bl	8003aa8 <__sfp>
 8003a78:	2200      	movs	r2, #0
 8003a7a:	60e0      	str	r0, [r4, #12]
 8003a7c:	2104      	movs	r1, #4
 8003a7e:	6860      	ldr	r0, [r4, #4]
 8003a80:	f7ff ff82 	bl	8003988 <std>
 8003a84:	68a0      	ldr	r0, [r4, #8]
 8003a86:	2201      	movs	r2, #1
 8003a88:	2109      	movs	r1, #9
 8003a8a:	f7ff ff7d 	bl	8003988 <std>
 8003a8e:	68e0      	ldr	r0, [r4, #12]
 8003a90:	2202      	movs	r2, #2
 8003a92:	2112      	movs	r1, #18
 8003a94:	f7ff ff78 	bl	8003988 <std>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	61a3      	str	r3, [r4, #24]
 8003a9c:	e7d2      	b.n	8003a44 <__sinit+0xc>
 8003a9e:	bf00      	nop
 8003aa0:	080048e0 	.word	0x080048e0
 8003aa4:	080039d1 	.word	0x080039d1

08003aa8 <__sfp>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	4607      	mov	r7, r0
 8003aac:	f7ff ffac 	bl	8003a08 <__sfp_lock_acquire>
 8003ab0:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <__sfp+0x84>)
 8003ab2:	681e      	ldr	r6, [r3, #0]
 8003ab4:	69b3      	ldr	r3, [r6, #24]
 8003ab6:	b913      	cbnz	r3, 8003abe <__sfp+0x16>
 8003ab8:	4630      	mov	r0, r6
 8003aba:	f7ff ffbd 	bl	8003a38 <__sinit>
 8003abe:	3648      	adds	r6, #72	; 0x48
 8003ac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	d503      	bpl.n	8003ad0 <__sfp+0x28>
 8003ac8:	6833      	ldr	r3, [r6, #0]
 8003aca:	b30b      	cbz	r3, 8003b10 <__sfp+0x68>
 8003acc:	6836      	ldr	r6, [r6, #0]
 8003ace:	e7f7      	b.n	8003ac0 <__sfp+0x18>
 8003ad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ad4:	b9d5      	cbnz	r5, 8003b0c <__sfp+0x64>
 8003ad6:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <__sfp+0x88>)
 8003ad8:	60e3      	str	r3, [r4, #12]
 8003ada:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ade:	6665      	str	r5, [r4, #100]	; 0x64
 8003ae0:	f000 f847 	bl	8003b72 <__retarget_lock_init_recursive>
 8003ae4:	f7ff ff96 	bl	8003a14 <__sfp_lock_release>
 8003ae8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003aec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003af0:	6025      	str	r5, [r4, #0]
 8003af2:	61a5      	str	r5, [r4, #24]
 8003af4:	2208      	movs	r2, #8
 8003af6:	4629      	mov	r1, r5
 8003af8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003afc:	f7ff fd16 	bl	800352c <memset>
 8003b00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b08:	4620      	mov	r0, r4
 8003b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b0c:	3468      	adds	r4, #104	; 0x68
 8003b0e:	e7d9      	b.n	8003ac4 <__sfp+0x1c>
 8003b10:	2104      	movs	r1, #4
 8003b12:	4638      	mov	r0, r7
 8003b14:	f7ff ff62 	bl	80039dc <__sfmoreglue>
 8003b18:	4604      	mov	r4, r0
 8003b1a:	6030      	str	r0, [r6, #0]
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d1d5      	bne.n	8003acc <__sfp+0x24>
 8003b20:	f7ff ff78 	bl	8003a14 <__sfp_lock_release>
 8003b24:	230c      	movs	r3, #12
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	e7ee      	b.n	8003b08 <__sfp+0x60>
 8003b2a:	bf00      	nop
 8003b2c:	080048e0 	.word	0x080048e0
 8003b30:	ffff0001 	.word	0xffff0001

08003b34 <_fwalk_reent>:
 8003b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b38:	4606      	mov	r6, r0
 8003b3a:	4688      	mov	r8, r1
 8003b3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b40:	2700      	movs	r7, #0
 8003b42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b46:	f1b9 0901 	subs.w	r9, r9, #1
 8003b4a:	d505      	bpl.n	8003b58 <_fwalk_reent+0x24>
 8003b4c:	6824      	ldr	r4, [r4, #0]
 8003b4e:	2c00      	cmp	r4, #0
 8003b50:	d1f7      	bne.n	8003b42 <_fwalk_reent+0xe>
 8003b52:	4638      	mov	r0, r7
 8003b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b58:	89ab      	ldrh	r3, [r5, #12]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d907      	bls.n	8003b6e <_fwalk_reent+0x3a>
 8003b5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b62:	3301      	adds	r3, #1
 8003b64:	d003      	beq.n	8003b6e <_fwalk_reent+0x3a>
 8003b66:	4629      	mov	r1, r5
 8003b68:	4630      	mov	r0, r6
 8003b6a:	47c0      	blx	r8
 8003b6c:	4307      	orrs	r7, r0
 8003b6e:	3568      	adds	r5, #104	; 0x68
 8003b70:	e7e9      	b.n	8003b46 <_fwalk_reent+0x12>

08003b72 <__retarget_lock_init_recursive>:
 8003b72:	4770      	bx	lr

08003b74 <__retarget_lock_acquire_recursive>:
 8003b74:	4770      	bx	lr

08003b76 <__retarget_lock_release_recursive>:
 8003b76:	4770      	bx	lr

08003b78 <__swhatbuf_r>:
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	460e      	mov	r6, r1
 8003b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b80:	2900      	cmp	r1, #0
 8003b82:	b096      	sub	sp, #88	; 0x58
 8003b84:	4614      	mov	r4, r2
 8003b86:	461d      	mov	r5, r3
 8003b88:	da07      	bge.n	8003b9a <__swhatbuf_r+0x22>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	602b      	str	r3, [r5, #0]
 8003b8e:	89b3      	ldrh	r3, [r6, #12]
 8003b90:	061a      	lsls	r2, r3, #24
 8003b92:	d410      	bmi.n	8003bb6 <__swhatbuf_r+0x3e>
 8003b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b98:	e00e      	b.n	8003bb8 <__swhatbuf_r+0x40>
 8003b9a:	466a      	mov	r2, sp
 8003b9c:	f000 fca6 	bl	80044ec <_fstat_r>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	dbf2      	blt.n	8003b8a <__swhatbuf_r+0x12>
 8003ba4:	9a01      	ldr	r2, [sp, #4]
 8003ba6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003baa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003bae:	425a      	negs	r2, r3
 8003bb0:	415a      	adcs	r2, r3
 8003bb2:	602a      	str	r2, [r5, #0]
 8003bb4:	e7ee      	b.n	8003b94 <__swhatbuf_r+0x1c>
 8003bb6:	2340      	movs	r3, #64	; 0x40
 8003bb8:	2000      	movs	r0, #0
 8003bba:	6023      	str	r3, [r4, #0]
 8003bbc:	b016      	add	sp, #88	; 0x58
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}

08003bc0 <__smakebuf_r>:
 8003bc0:	898b      	ldrh	r3, [r1, #12]
 8003bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bc4:	079d      	lsls	r5, r3, #30
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	460c      	mov	r4, r1
 8003bca:	d507      	bpl.n	8003bdc <__smakebuf_r+0x1c>
 8003bcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	6123      	str	r3, [r4, #16]
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	6163      	str	r3, [r4, #20]
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
 8003bdc:	ab01      	add	r3, sp, #4
 8003bde:	466a      	mov	r2, sp
 8003be0:	f7ff ffca 	bl	8003b78 <__swhatbuf_r>
 8003be4:	9900      	ldr	r1, [sp, #0]
 8003be6:	4605      	mov	r5, r0
 8003be8:	4630      	mov	r0, r6
 8003bea:	f000 f879 	bl	8003ce0 <_malloc_r>
 8003bee:	b948      	cbnz	r0, 8003c04 <__smakebuf_r+0x44>
 8003bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bf4:	059a      	lsls	r2, r3, #22
 8003bf6:	d4ef      	bmi.n	8003bd8 <__smakebuf_r+0x18>
 8003bf8:	f023 0303 	bic.w	r3, r3, #3
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	81a3      	strh	r3, [r4, #12]
 8003c02:	e7e3      	b.n	8003bcc <__smakebuf_r+0xc>
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <__smakebuf_r+0x7c>)
 8003c06:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	6020      	str	r0, [r4, #0]
 8003c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c10:	81a3      	strh	r3, [r4, #12]
 8003c12:	9b00      	ldr	r3, [sp, #0]
 8003c14:	6163      	str	r3, [r4, #20]
 8003c16:	9b01      	ldr	r3, [sp, #4]
 8003c18:	6120      	str	r0, [r4, #16]
 8003c1a:	b15b      	cbz	r3, 8003c34 <__smakebuf_r+0x74>
 8003c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c20:	4630      	mov	r0, r6
 8003c22:	f000 fc75 	bl	8004510 <_isatty_r>
 8003c26:	b128      	cbz	r0, 8003c34 <__smakebuf_r+0x74>
 8003c28:	89a3      	ldrh	r3, [r4, #12]
 8003c2a:	f023 0303 	bic.w	r3, r3, #3
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	81a3      	strh	r3, [r4, #12]
 8003c34:	89a0      	ldrh	r0, [r4, #12]
 8003c36:	4305      	orrs	r5, r0
 8003c38:	81a5      	strh	r5, [r4, #12]
 8003c3a:	e7cd      	b.n	8003bd8 <__smakebuf_r+0x18>
 8003c3c:	080039d1 	.word	0x080039d1

08003c40 <_free_r>:
 8003c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c42:	2900      	cmp	r1, #0
 8003c44:	d048      	beq.n	8003cd8 <_free_r+0x98>
 8003c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c4a:	9001      	str	r0, [sp, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8003c52:	bfb8      	it	lt
 8003c54:	18e4      	addlt	r4, r4, r3
 8003c56:	f000 fc7d 	bl	8004554 <__malloc_lock>
 8003c5a:	4a20      	ldr	r2, [pc, #128]	; (8003cdc <_free_r+0x9c>)
 8003c5c:	9801      	ldr	r0, [sp, #4]
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	4615      	mov	r5, r2
 8003c62:	b933      	cbnz	r3, 8003c72 <_free_r+0x32>
 8003c64:	6063      	str	r3, [r4, #4]
 8003c66:	6014      	str	r4, [r2, #0]
 8003c68:	b003      	add	sp, #12
 8003c6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c6e:	f000 bc77 	b.w	8004560 <__malloc_unlock>
 8003c72:	42a3      	cmp	r3, r4
 8003c74:	d90b      	bls.n	8003c8e <_free_r+0x4e>
 8003c76:	6821      	ldr	r1, [r4, #0]
 8003c78:	1862      	adds	r2, r4, r1
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	bf04      	itt	eq
 8003c7e:	681a      	ldreq	r2, [r3, #0]
 8003c80:	685b      	ldreq	r3, [r3, #4]
 8003c82:	6063      	str	r3, [r4, #4]
 8003c84:	bf04      	itt	eq
 8003c86:	1852      	addeq	r2, r2, r1
 8003c88:	6022      	streq	r2, [r4, #0]
 8003c8a:	602c      	str	r4, [r5, #0]
 8003c8c:	e7ec      	b.n	8003c68 <_free_r+0x28>
 8003c8e:	461a      	mov	r2, r3
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b10b      	cbz	r3, 8003c98 <_free_r+0x58>
 8003c94:	42a3      	cmp	r3, r4
 8003c96:	d9fa      	bls.n	8003c8e <_free_r+0x4e>
 8003c98:	6811      	ldr	r1, [r2, #0]
 8003c9a:	1855      	adds	r5, r2, r1
 8003c9c:	42a5      	cmp	r5, r4
 8003c9e:	d10b      	bne.n	8003cb8 <_free_r+0x78>
 8003ca0:	6824      	ldr	r4, [r4, #0]
 8003ca2:	4421      	add	r1, r4
 8003ca4:	1854      	adds	r4, r2, r1
 8003ca6:	42a3      	cmp	r3, r4
 8003ca8:	6011      	str	r1, [r2, #0]
 8003caa:	d1dd      	bne.n	8003c68 <_free_r+0x28>
 8003cac:	681c      	ldr	r4, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	6053      	str	r3, [r2, #4]
 8003cb2:	4421      	add	r1, r4
 8003cb4:	6011      	str	r1, [r2, #0]
 8003cb6:	e7d7      	b.n	8003c68 <_free_r+0x28>
 8003cb8:	d902      	bls.n	8003cc0 <_free_r+0x80>
 8003cba:	230c      	movs	r3, #12
 8003cbc:	6003      	str	r3, [r0, #0]
 8003cbe:	e7d3      	b.n	8003c68 <_free_r+0x28>
 8003cc0:	6825      	ldr	r5, [r4, #0]
 8003cc2:	1961      	adds	r1, r4, r5
 8003cc4:	428b      	cmp	r3, r1
 8003cc6:	bf04      	itt	eq
 8003cc8:	6819      	ldreq	r1, [r3, #0]
 8003cca:	685b      	ldreq	r3, [r3, #4]
 8003ccc:	6063      	str	r3, [r4, #4]
 8003cce:	bf04      	itt	eq
 8003cd0:	1949      	addeq	r1, r1, r5
 8003cd2:	6021      	streq	r1, [r4, #0]
 8003cd4:	6054      	str	r4, [r2, #4]
 8003cd6:	e7c7      	b.n	8003c68 <_free_r+0x28>
 8003cd8:	b003      	add	sp, #12
 8003cda:	bd30      	pop	{r4, r5, pc}
 8003cdc:	20000094 	.word	0x20000094

08003ce0 <_malloc_r>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	1ccd      	adds	r5, r1, #3
 8003ce4:	f025 0503 	bic.w	r5, r5, #3
 8003ce8:	3508      	adds	r5, #8
 8003cea:	2d0c      	cmp	r5, #12
 8003cec:	bf38      	it	cc
 8003cee:	250c      	movcc	r5, #12
 8003cf0:	2d00      	cmp	r5, #0
 8003cf2:	4606      	mov	r6, r0
 8003cf4:	db01      	blt.n	8003cfa <_malloc_r+0x1a>
 8003cf6:	42a9      	cmp	r1, r5
 8003cf8:	d903      	bls.n	8003d02 <_malloc_r+0x22>
 8003cfa:	230c      	movs	r3, #12
 8003cfc:	6033      	str	r3, [r6, #0]
 8003cfe:	2000      	movs	r0, #0
 8003d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d02:	f000 fc27 	bl	8004554 <__malloc_lock>
 8003d06:	4921      	ldr	r1, [pc, #132]	; (8003d8c <_malloc_r+0xac>)
 8003d08:	680a      	ldr	r2, [r1, #0]
 8003d0a:	4614      	mov	r4, r2
 8003d0c:	b99c      	cbnz	r4, 8003d36 <_malloc_r+0x56>
 8003d0e:	4f20      	ldr	r7, [pc, #128]	; (8003d90 <_malloc_r+0xb0>)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	b923      	cbnz	r3, 8003d1e <_malloc_r+0x3e>
 8003d14:	4621      	mov	r1, r4
 8003d16:	4630      	mov	r0, r6
 8003d18:	f000 fb72 	bl	8004400 <_sbrk_r>
 8003d1c:	6038      	str	r0, [r7, #0]
 8003d1e:	4629      	mov	r1, r5
 8003d20:	4630      	mov	r0, r6
 8003d22:	f000 fb6d 	bl	8004400 <_sbrk_r>
 8003d26:	1c43      	adds	r3, r0, #1
 8003d28:	d123      	bne.n	8003d72 <_malloc_r+0x92>
 8003d2a:	230c      	movs	r3, #12
 8003d2c:	6033      	str	r3, [r6, #0]
 8003d2e:	4630      	mov	r0, r6
 8003d30:	f000 fc16 	bl	8004560 <__malloc_unlock>
 8003d34:	e7e3      	b.n	8003cfe <_malloc_r+0x1e>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	1b5b      	subs	r3, r3, r5
 8003d3a:	d417      	bmi.n	8003d6c <_malloc_r+0x8c>
 8003d3c:	2b0b      	cmp	r3, #11
 8003d3e:	d903      	bls.n	8003d48 <_malloc_r+0x68>
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	441c      	add	r4, r3
 8003d44:	6025      	str	r5, [r4, #0]
 8003d46:	e004      	b.n	8003d52 <_malloc_r+0x72>
 8003d48:	6863      	ldr	r3, [r4, #4]
 8003d4a:	42a2      	cmp	r2, r4
 8003d4c:	bf0c      	ite	eq
 8003d4e:	600b      	streq	r3, [r1, #0]
 8003d50:	6053      	strne	r3, [r2, #4]
 8003d52:	4630      	mov	r0, r6
 8003d54:	f000 fc04 	bl	8004560 <__malloc_unlock>
 8003d58:	f104 000b 	add.w	r0, r4, #11
 8003d5c:	1d23      	adds	r3, r4, #4
 8003d5e:	f020 0007 	bic.w	r0, r0, #7
 8003d62:	1ac2      	subs	r2, r0, r3
 8003d64:	d0cc      	beq.n	8003d00 <_malloc_r+0x20>
 8003d66:	1a1b      	subs	r3, r3, r0
 8003d68:	50a3      	str	r3, [r4, r2]
 8003d6a:	e7c9      	b.n	8003d00 <_malloc_r+0x20>
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	6864      	ldr	r4, [r4, #4]
 8003d70:	e7cc      	b.n	8003d0c <_malloc_r+0x2c>
 8003d72:	1cc4      	adds	r4, r0, #3
 8003d74:	f024 0403 	bic.w	r4, r4, #3
 8003d78:	42a0      	cmp	r0, r4
 8003d7a:	d0e3      	beq.n	8003d44 <_malloc_r+0x64>
 8003d7c:	1a21      	subs	r1, r4, r0
 8003d7e:	4630      	mov	r0, r6
 8003d80:	f000 fb3e 	bl	8004400 <_sbrk_r>
 8003d84:	3001      	adds	r0, #1
 8003d86:	d1dd      	bne.n	8003d44 <_malloc_r+0x64>
 8003d88:	e7cf      	b.n	8003d2a <_malloc_r+0x4a>
 8003d8a:	bf00      	nop
 8003d8c:	20000094 	.word	0x20000094
 8003d90:	20000098 	.word	0x20000098

08003d94 <__sfputc_r>:
 8003d94:	6893      	ldr	r3, [r2, #8]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	b410      	push	{r4}
 8003d9c:	6093      	str	r3, [r2, #8]
 8003d9e:	da08      	bge.n	8003db2 <__sfputc_r+0x1e>
 8003da0:	6994      	ldr	r4, [r2, #24]
 8003da2:	42a3      	cmp	r3, r4
 8003da4:	db01      	blt.n	8003daa <__sfputc_r+0x16>
 8003da6:	290a      	cmp	r1, #10
 8003da8:	d103      	bne.n	8003db2 <__sfputc_r+0x1e>
 8003daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dae:	f7ff bc69 	b.w	8003684 <__swbuf_r>
 8003db2:	6813      	ldr	r3, [r2, #0]
 8003db4:	1c58      	adds	r0, r3, #1
 8003db6:	6010      	str	r0, [r2, #0]
 8003db8:	7019      	strb	r1, [r3, #0]
 8003dba:	4608      	mov	r0, r1
 8003dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <__sfputs_r>:
 8003dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc4:	4606      	mov	r6, r0
 8003dc6:	460f      	mov	r7, r1
 8003dc8:	4614      	mov	r4, r2
 8003dca:	18d5      	adds	r5, r2, r3
 8003dcc:	42ac      	cmp	r4, r5
 8003dce:	d101      	bne.n	8003dd4 <__sfputs_r+0x12>
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	e007      	b.n	8003de4 <__sfputs_r+0x22>
 8003dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd8:	463a      	mov	r2, r7
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f7ff ffda 	bl	8003d94 <__sfputc_r>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d1f3      	bne.n	8003dcc <__sfputs_r+0xa>
 8003de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003de8 <_vfiprintf_r>:
 8003de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dec:	460d      	mov	r5, r1
 8003dee:	b09d      	sub	sp, #116	; 0x74
 8003df0:	4614      	mov	r4, r2
 8003df2:	4698      	mov	r8, r3
 8003df4:	4606      	mov	r6, r0
 8003df6:	b118      	cbz	r0, 8003e00 <_vfiprintf_r+0x18>
 8003df8:	6983      	ldr	r3, [r0, #24]
 8003dfa:	b90b      	cbnz	r3, 8003e00 <_vfiprintf_r+0x18>
 8003dfc:	f7ff fe1c 	bl	8003a38 <__sinit>
 8003e00:	4b89      	ldr	r3, [pc, #548]	; (8004028 <_vfiprintf_r+0x240>)
 8003e02:	429d      	cmp	r5, r3
 8003e04:	d11b      	bne.n	8003e3e <_vfiprintf_r+0x56>
 8003e06:	6875      	ldr	r5, [r6, #4]
 8003e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e0a:	07d9      	lsls	r1, r3, #31
 8003e0c:	d405      	bmi.n	8003e1a <_vfiprintf_r+0x32>
 8003e0e:	89ab      	ldrh	r3, [r5, #12]
 8003e10:	059a      	lsls	r2, r3, #22
 8003e12:	d402      	bmi.n	8003e1a <_vfiprintf_r+0x32>
 8003e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e16:	f7ff fead 	bl	8003b74 <__retarget_lock_acquire_recursive>
 8003e1a:	89ab      	ldrh	r3, [r5, #12]
 8003e1c:	071b      	lsls	r3, r3, #28
 8003e1e:	d501      	bpl.n	8003e24 <_vfiprintf_r+0x3c>
 8003e20:	692b      	ldr	r3, [r5, #16]
 8003e22:	b9eb      	cbnz	r3, 8003e60 <_vfiprintf_r+0x78>
 8003e24:	4629      	mov	r1, r5
 8003e26:	4630      	mov	r0, r6
 8003e28:	f7ff fc7e 	bl	8003728 <__swsetup_r>
 8003e2c:	b1c0      	cbz	r0, 8003e60 <_vfiprintf_r+0x78>
 8003e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e30:	07dc      	lsls	r4, r3, #31
 8003e32:	d50e      	bpl.n	8003e52 <_vfiprintf_r+0x6a>
 8003e34:	f04f 30ff 	mov.w	r0, #4294967295
 8003e38:	b01d      	add	sp, #116	; 0x74
 8003e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e3e:	4b7b      	ldr	r3, [pc, #492]	; (800402c <_vfiprintf_r+0x244>)
 8003e40:	429d      	cmp	r5, r3
 8003e42:	d101      	bne.n	8003e48 <_vfiprintf_r+0x60>
 8003e44:	68b5      	ldr	r5, [r6, #8]
 8003e46:	e7df      	b.n	8003e08 <_vfiprintf_r+0x20>
 8003e48:	4b79      	ldr	r3, [pc, #484]	; (8004030 <_vfiprintf_r+0x248>)
 8003e4a:	429d      	cmp	r5, r3
 8003e4c:	bf08      	it	eq
 8003e4e:	68f5      	ldreq	r5, [r6, #12]
 8003e50:	e7da      	b.n	8003e08 <_vfiprintf_r+0x20>
 8003e52:	89ab      	ldrh	r3, [r5, #12]
 8003e54:	0598      	lsls	r0, r3, #22
 8003e56:	d4ed      	bmi.n	8003e34 <_vfiprintf_r+0x4c>
 8003e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e5a:	f7ff fe8c 	bl	8003b76 <__retarget_lock_release_recursive>
 8003e5e:	e7e9      	b.n	8003e34 <_vfiprintf_r+0x4c>
 8003e60:	2300      	movs	r3, #0
 8003e62:	9309      	str	r3, [sp, #36]	; 0x24
 8003e64:	2320      	movs	r3, #32
 8003e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e6e:	2330      	movs	r3, #48	; 0x30
 8003e70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004034 <_vfiprintf_r+0x24c>
 8003e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e78:	f04f 0901 	mov.w	r9, #1
 8003e7c:	4623      	mov	r3, r4
 8003e7e:	469a      	mov	sl, r3
 8003e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e84:	b10a      	cbz	r2, 8003e8a <_vfiprintf_r+0xa2>
 8003e86:	2a25      	cmp	r2, #37	; 0x25
 8003e88:	d1f9      	bne.n	8003e7e <_vfiprintf_r+0x96>
 8003e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8003e8e:	d00b      	beq.n	8003ea8 <_vfiprintf_r+0xc0>
 8003e90:	465b      	mov	r3, fp
 8003e92:	4622      	mov	r2, r4
 8003e94:	4629      	mov	r1, r5
 8003e96:	4630      	mov	r0, r6
 8003e98:	f7ff ff93 	bl	8003dc2 <__sfputs_r>
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	f000 80aa 	beq.w	8003ff6 <_vfiprintf_r+0x20e>
 8003ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ea4:	445a      	add	r2, fp
 8003ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80a2 	beq.w	8003ff6 <_vfiprintf_r+0x20e>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ebc:	f10a 0a01 	add.w	sl, sl, #1
 8003ec0:	9304      	str	r3, [sp, #16]
 8003ec2:	9307      	str	r3, [sp, #28]
 8003ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8003eca:	4654      	mov	r4, sl
 8003ecc:	2205      	movs	r2, #5
 8003ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed2:	4858      	ldr	r0, [pc, #352]	; (8004034 <_vfiprintf_r+0x24c>)
 8003ed4:	f7fc f97c 	bl	80001d0 <memchr>
 8003ed8:	9a04      	ldr	r2, [sp, #16]
 8003eda:	b9d8      	cbnz	r0, 8003f14 <_vfiprintf_r+0x12c>
 8003edc:	06d1      	lsls	r1, r2, #27
 8003ede:	bf44      	itt	mi
 8003ee0:	2320      	movmi	r3, #32
 8003ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ee6:	0713      	lsls	r3, r2, #28
 8003ee8:	bf44      	itt	mi
 8003eea:	232b      	movmi	r3, #43	; 0x2b
 8003eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef6:	d015      	beq.n	8003f24 <_vfiprintf_r+0x13c>
 8003ef8:	9a07      	ldr	r2, [sp, #28]
 8003efa:	4654      	mov	r4, sl
 8003efc:	2000      	movs	r0, #0
 8003efe:	f04f 0c0a 	mov.w	ip, #10
 8003f02:	4621      	mov	r1, r4
 8003f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f08:	3b30      	subs	r3, #48	; 0x30
 8003f0a:	2b09      	cmp	r3, #9
 8003f0c:	d94e      	bls.n	8003fac <_vfiprintf_r+0x1c4>
 8003f0e:	b1b0      	cbz	r0, 8003f3e <_vfiprintf_r+0x156>
 8003f10:	9207      	str	r2, [sp, #28]
 8003f12:	e014      	b.n	8003f3e <_vfiprintf_r+0x156>
 8003f14:	eba0 0308 	sub.w	r3, r0, r8
 8003f18:	fa09 f303 	lsl.w	r3, r9, r3
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	9304      	str	r3, [sp, #16]
 8003f20:	46a2      	mov	sl, r4
 8003f22:	e7d2      	b.n	8003eca <_vfiprintf_r+0xe2>
 8003f24:	9b03      	ldr	r3, [sp, #12]
 8003f26:	1d19      	adds	r1, r3, #4
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	9103      	str	r1, [sp, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bfbb      	ittet	lt
 8003f30:	425b      	neglt	r3, r3
 8003f32:	f042 0202 	orrlt.w	r2, r2, #2
 8003f36:	9307      	strge	r3, [sp, #28]
 8003f38:	9307      	strlt	r3, [sp, #28]
 8003f3a:	bfb8      	it	lt
 8003f3c:	9204      	strlt	r2, [sp, #16]
 8003f3e:	7823      	ldrb	r3, [r4, #0]
 8003f40:	2b2e      	cmp	r3, #46	; 0x2e
 8003f42:	d10c      	bne.n	8003f5e <_vfiprintf_r+0x176>
 8003f44:	7863      	ldrb	r3, [r4, #1]
 8003f46:	2b2a      	cmp	r3, #42	; 0x2a
 8003f48:	d135      	bne.n	8003fb6 <_vfiprintf_r+0x1ce>
 8003f4a:	9b03      	ldr	r3, [sp, #12]
 8003f4c:	1d1a      	adds	r2, r3, #4
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	9203      	str	r2, [sp, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bfb8      	it	lt
 8003f56:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f5a:	3402      	adds	r4, #2
 8003f5c:	9305      	str	r3, [sp, #20]
 8003f5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004044 <_vfiprintf_r+0x25c>
 8003f62:	7821      	ldrb	r1, [r4, #0]
 8003f64:	2203      	movs	r2, #3
 8003f66:	4650      	mov	r0, sl
 8003f68:	f7fc f932 	bl	80001d0 <memchr>
 8003f6c:	b140      	cbz	r0, 8003f80 <_vfiprintf_r+0x198>
 8003f6e:	2340      	movs	r3, #64	; 0x40
 8003f70:	eba0 000a 	sub.w	r0, r0, sl
 8003f74:	fa03 f000 	lsl.w	r0, r3, r0
 8003f78:	9b04      	ldr	r3, [sp, #16]
 8003f7a:	4303      	orrs	r3, r0
 8003f7c:	3401      	adds	r4, #1
 8003f7e:	9304      	str	r3, [sp, #16]
 8003f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f84:	482c      	ldr	r0, [pc, #176]	; (8004038 <_vfiprintf_r+0x250>)
 8003f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f8a:	2206      	movs	r2, #6
 8003f8c:	f7fc f920 	bl	80001d0 <memchr>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	d03f      	beq.n	8004014 <_vfiprintf_r+0x22c>
 8003f94:	4b29      	ldr	r3, [pc, #164]	; (800403c <_vfiprintf_r+0x254>)
 8003f96:	bb1b      	cbnz	r3, 8003fe0 <_vfiprintf_r+0x1f8>
 8003f98:	9b03      	ldr	r3, [sp, #12]
 8003f9a:	3307      	adds	r3, #7
 8003f9c:	f023 0307 	bic.w	r3, r3, #7
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	9303      	str	r3, [sp, #12]
 8003fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa6:	443b      	add	r3, r7
 8003fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8003faa:	e767      	b.n	8003e7c <_vfiprintf_r+0x94>
 8003fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	e7a5      	b.n	8003f02 <_vfiprintf_r+0x11a>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	3401      	adds	r4, #1
 8003fba:	9305      	str	r3, [sp, #20]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	f04f 0c0a 	mov.w	ip, #10
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fc8:	3a30      	subs	r2, #48	; 0x30
 8003fca:	2a09      	cmp	r2, #9
 8003fcc:	d903      	bls.n	8003fd6 <_vfiprintf_r+0x1ee>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0c5      	beq.n	8003f5e <_vfiprintf_r+0x176>
 8003fd2:	9105      	str	r1, [sp, #20]
 8003fd4:	e7c3      	b.n	8003f5e <_vfiprintf_r+0x176>
 8003fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fda:	4604      	mov	r4, r0
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e7f0      	b.n	8003fc2 <_vfiprintf_r+0x1da>
 8003fe0:	ab03      	add	r3, sp, #12
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	462a      	mov	r2, r5
 8003fe6:	4b16      	ldr	r3, [pc, #88]	; (8004040 <_vfiprintf_r+0x258>)
 8003fe8:	a904      	add	r1, sp, #16
 8003fea:	4630      	mov	r0, r6
 8003fec:	f3af 8000 	nop.w
 8003ff0:	4607      	mov	r7, r0
 8003ff2:	1c78      	adds	r0, r7, #1
 8003ff4:	d1d6      	bne.n	8003fa4 <_vfiprintf_r+0x1bc>
 8003ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ff8:	07d9      	lsls	r1, r3, #31
 8003ffa:	d405      	bmi.n	8004008 <_vfiprintf_r+0x220>
 8003ffc:	89ab      	ldrh	r3, [r5, #12]
 8003ffe:	059a      	lsls	r2, r3, #22
 8004000:	d402      	bmi.n	8004008 <_vfiprintf_r+0x220>
 8004002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004004:	f7ff fdb7 	bl	8003b76 <__retarget_lock_release_recursive>
 8004008:	89ab      	ldrh	r3, [r5, #12]
 800400a:	065b      	lsls	r3, r3, #25
 800400c:	f53f af12 	bmi.w	8003e34 <_vfiprintf_r+0x4c>
 8004010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004012:	e711      	b.n	8003e38 <_vfiprintf_r+0x50>
 8004014:	ab03      	add	r3, sp, #12
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	462a      	mov	r2, r5
 800401a:	4b09      	ldr	r3, [pc, #36]	; (8004040 <_vfiprintf_r+0x258>)
 800401c:	a904      	add	r1, sp, #16
 800401e:	4630      	mov	r0, r6
 8004020:	f000 f880 	bl	8004124 <_printf_i>
 8004024:	e7e4      	b.n	8003ff0 <_vfiprintf_r+0x208>
 8004026:	bf00      	nop
 8004028:	08004904 	.word	0x08004904
 800402c:	08004924 	.word	0x08004924
 8004030:	080048e4 	.word	0x080048e4
 8004034:	08004944 	.word	0x08004944
 8004038:	0800494e 	.word	0x0800494e
 800403c:	00000000 	.word	0x00000000
 8004040:	08003dc3 	.word	0x08003dc3
 8004044:	0800494a 	.word	0x0800494a

08004048 <_printf_common>:
 8004048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800404c:	4616      	mov	r6, r2
 800404e:	4699      	mov	r9, r3
 8004050:	688a      	ldr	r2, [r1, #8]
 8004052:	690b      	ldr	r3, [r1, #16]
 8004054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004058:	4293      	cmp	r3, r2
 800405a:	bfb8      	it	lt
 800405c:	4613      	movlt	r3, r2
 800405e:	6033      	str	r3, [r6, #0]
 8004060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004064:	4607      	mov	r7, r0
 8004066:	460c      	mov	r4, r1
 8004068:	b10a      	cbz	r2, 800406e <_printf_common+0x26>
 800406a:	3301      	adds	r3, #1
 800406c:	6033      	str	r3, [r6, #0]
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	0699      	lsls	r1, r3, #26
 8004072:	bf42      	ittt	mi
 8004074:	6833      	ldrmi	r3, [r6, #0]
 8004076:	3302      	addmi	r3, #2
 8004078:	6033      	strmi	r3, [r6, #0]
 800407a:	6825      	ldr	r5, [r4, #0]
 800407c:	f015 0506 	ands.w	r5, r5, #6
 8004080:	d106      	bne.n	8004090 <_printf_common+0x48>
 8004082:	f104 0a19 	add.w	sl, r4, #25
 8004086:	68e3      	ldr	r3, [r4, #12]
 8004088:	6832      	ldr	r2, [r6, #0]
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	42ab      	cmp	r3, r5
 800408e:	dc26      	bgt.n	80040de <_printf_common+0x96>
 8004090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004094:	1e13      	subs	r3, r2, #0
 8004096:	6822      	ldr	r2, [r4, #0]
 8004098:	bf18      	it	ne
 800409a:	2301      	movne	r3, #1
 800409c:	0692      	lsls	r2, r2, #26
 800409e:	d42b      	bmi.n	80040f8 <_printf_common+0xb0>
 80040a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040a4:	4649      	mov	r1, r9
 80040a6:	4638      	mov	r0, r7
 80040a8:	47c0      	blx	r8
 80040aa:	3001      	adds	r0, #1
 80040ac:	d01e      	beq.n	80040ec <_printf_common+0xa4>
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	68e5      	ldr	r5, [r4, #12]
 80040b2:	6832      	ldr	r2, [r6, #0]
 80040b4:	f003 0306 	and.w	r3, r3, #6
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	bf08      	it	eq
 80040bc:	1aad      	subeq	r5, r5, r2
 80040be:	68a3      	ldr	r3, [r4, #8]
 80040c0:	6922      	ldr	r2, [r4, #16]
 80040c2:	bf0c      	ite	eq
 80040c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040c8:	2500      	movne	r5, #0
 80040ca:	4293      	cmp	r3, r2
 80040cc:	bfc4      	itt	gt
 80040ce:	1a9b      	subgt	r3, r3, r2
 80040d0:	18ed      	addgt	r5, r5, r3
 80040d2:	2600      	movs	r6, #0
 80040d4:	341a      	adds	r4, #26
 80040d6:	42b5      	cmp	r5, r6
 80040d8:	d11a      	bne.n	8004110 <_printf_common+0xc8>
 80040da:	2000      	movs	r0, #0
 80040dc:	e008      	b.n	80040f0 <_printf_common+0xa8>
 80040de:	2301      	movs	r3, #1
 80040e0:	4652      	mov	r2, sl
 80040e2:	4649      	mov	r1, r9
 80040e4:	4638      	mov	r0, r7
 80040e6:	47c0      	blx	r8
 80040e8:	3001      	adds	r0, #1
 80040ea:	d103      	bne.n	80040f4 <_printf_common+0xac>
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295
 80040f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f4:	3501      	adds	r5, #1
 80040f6:	e7c6      	b.n	8004086 <_printf_common+0x3e>
 80040f8:	18e1      	adds	r1, r4, r3
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	2030      	movs	r0, #48	; 0x30
 80040fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004102:	4422      	add	r2, r4
 8004104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800410c:	3302      	adds	r3, #2
 800410e:	e7c7      	b.n	80040a0 <_printf_common+0x58>
 8004110:	2301      	movs	r3, #1
 8004112:	4622      	mov	r2, r4
 8004114:	4649      	mov	r1, r9
 8004116:	4638      	mov	r0, r7
 8004118:	47c0      	blx	r8
 800411a:	3001      	adds	r0, #1
 800411c:	d0e6      	beq.n	80040ec <_printf_common+0xa4>
 800411e:	3601      	adds	r6, #1
 8004120:	e7d9      	b.n	80040d6 <_printf_common+0x8e>
	...

08004124 <_printf_i>:
 8004124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004128:	460c      	mov	r4, r1
 800412a:	4691      	mov	r9, r2
 800412c:	7e27      	ldrb	r7, [r4, #24]
 800412e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004130:	2f78      	cmp	r7, #120	; 0x78
 8004132:	4680      	mov	r8, r0
 8004134:	469a      	mov	sl, r3
 8004136:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800413a:	d807      	bhi.n	800414c <_printf_i+0x28>
 800413c:	2f62      	cmp	r7, #98	; 0x62
 800413e:	d80a      	bhi.n	8004156 <_printf_i+0x32>
 8004140:	2f00      	cmp	r7, #0
 8004142:	f000 80d8 	beq.w	80042f6 <_printf_i+0x1d2>
 8004146:	2f58      	cmp	r7, #88	; 0x58
 8004148:	f000 80a3 	beq.w	8004292 <_printf_i+0x16e>
 800414c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004154:	e03a      	b.n	80041cc <_printf_i+0xa8>
 8004156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800415a:	2b15      	cmp	r3, #21
 800415c:	d8f6      	bhi.n	800414c <_printf_i+0x28>
 800415e:	a001      	add	r0, pc, #4	; (adr r0, 8004164 <_printf_i+0x40>)
 8004160:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004164:	080041bd 	.word	0x080041bd
 8004168:	080041d1 	.word	0x080041d1
 800416c:	0800414d 	.word	0x0800414d
 8004170:	0800414d 	.word	0x0800414d
 8004174:	0800414d 	.word	0x0800414d
 8004178:	0800414d 	.word	0x0800414d
 800417c:	080041d1 	.word	0x080041d1
 8004180:	0800414d 	.word	0x0800414d
 8004184:	0800414d 	.word	0x0800414d
 8004188:	0800414d 	.word	0x0800414d
 800418c:	0800414d 	.word	0x0800414d
 8004190:	080042dd 	.word	0x080042dd
 8004194:	08004201 	.word	0x08004201
 8004198:	080042bf 	.word	0x080042bf
 800419c:	0800414d 	.word	0x0800414d
 80041a0:	0800414d 	.word	0x0800414d
 80041a4:	080042ff 	.word	0x080042ff
 80041a8:	0800414d 	.word	0x0800414d
 80041ac:	08004201 	.word	0x08004201
 80041b0:	0800414d 	.word	0x0800414d
 80041b4:	0800414d 	.word	0x0800414d
 80041b8:	080042c7 	.word	0x080042c7
 80041bc:	680b      	ldr	r3, [r1, #0]
 80041be:	1d1a      	adds	r2, r3, #4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	600a      	str	r2, [r1, #0]
 80041c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0a3      	b.n	8004318 <_printf_i+0x1f4>
 80041d0:	6825      	ldr	r5, [r4, #0]
 80041d2:	6808      	ldr	r0, [r1, #0]
 80041d4:	062e      	lsls	r6, r5, #24
 80041d6:	f100 0304 	add.w	r3, r0, #4
 80041da:	d50a      	bpl.n	80041f2 <_printf_i+0xce>
 80041dc:	6805      	ldr	r5, [r0, #0]
 80041de:	600b      	str	r3, [r1, #0]
 80041e0:	2d00      	cmp	r5, #0
 80041e2:	da03      	bge.n	80041ec <_printf_i+0xc8>
 80041e4:	232d      	movs	r3, #45	; 0x2d
 80041e6:	426d      	negs	r5, r5
 80041e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ec:	485e      	ldr	r0, [pc, #376]	; (8004368 <_printf_i+0x244>)
 80041ee:	230a      	movs	r3, #10
 80041f0:	e019      	b.n	8004226 <_printf_i+0x102>
 80041f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041f6:	6805      	ldr	r5, [r0, #0]
 80041f8:	600b      	str	r3, [r1, #0]
 80041fa:	bf18      	it	ne
 80041fc:	b22d      	sxthne	r5, r5
 80041fe:	e7ef      	b.n	80041e0 <_printf_i+0xbc>
 8004200:	680b      	ldr	r3, [r1, #0]
 8004202:	6825      	ldr	r5, [r4, #0]
 8004204:	1d18      	adds	r0, r3, #4
 8004206:	6008      	str	r0, [r1, #0]
 8004208:	0628      	lsls	r0, r5, #24
 800420a:	d501      	bpl.n	8004210 <_printf_i+0xec>
 800420c:	681d      	ldr	r5, [r3, #0]
 800420e:	e002      	b.n	8004216 <_printf_i+0xf2>
 8004210:	0669      	lsls	r1, r5, #25
 8004212:	d5fb      	bpl.n	800420c <_printf_i+0xe8>
 8004214:	881d      	ldrh	r5, [r3, #0]
 8004216:	4854      	ldr	r0, [pc, #336]	; (8004368 <_printf_i+0x244>)
 8004218:	2f6f      	cmp	r7, #111	; 0x6f
 800421a:	bf0c      	ite	eq
 800421c:	2308      	moveq	r3, #8
 800421e:	230a      	movne	r3, #10
 8004220:	2100      	movs	r1, #0
 8004222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004226:	6866      	ldr	r6, [r4, #4]
 8004228:	60a6      	str	r6, [r4, #8]
 800422a:	2e00      	cmp	r6, #0
 800422c:	bfa2      	ittt	ge
 800422e:	6821      	ldrge	r1, [r4, #0]
 8004230:	f021 0104 	bicge.w	r1, r1, #4
 8004234:	6021      	strge	r1, [r4, #0]
 8004236:	b90d      	cbnz	r5, 800423c <_printf_i+0x118>
 8004238:	2e00      	cmp	r6, #0
 800423a:	d04d      	beq.n	80042d8 <_printf_i+0x1b4>
 800423c:	4616      	mov	r6, r2
 800423e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004242:	fb03 5711 	mls	r7, r3, r1, r5
 8004246:	5dc7      	ldrb	r7, [r0, r7]
 8004248:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800424c:	462f      	mov	r7, r5
 800424e:	42bb      	cmp	r3, r7
 8004250:	460d      	mov	r5, r1
 8004252:	d9f4      	bls.n	800423e <_printf_i+0x11a>
 8004254:	2b08      	cmp	r3, #8
 8004256:	d10b      	bne.n	8004270 <_printf_i+0x14c>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	07df      	lsls	r7, r3, #31
 800425c:	d508      	bpl.n	8004270 <_printf_i+0x14c>
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	6861      	ldr	r1, [r4, #4]
 8004262:	4299      	cmp	r1, r3
 8004264:	bfde      	ittt	le
 8004266:	2330      	movle	r3, #48	; 0x30
 8004268:	f806 3c01 	strble.w	r3, [r6, #-1]
 800426c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004270:	1b92      	subs	r2, r2, r6
 8004272:	6122      	str	r2, [r4, #16]
 8004274:	f8cd a000 	str.w	sl, [sp]
 8004278:	464b      	mov	r3, r9
 800427a:	aa03      	add	r2, sp, #12
 800427c:	4621      	mov	r1, r4
 800427e:	4640      	mov	r0, r8
 8004280:	f7ff fee2 	bl	8004048 <_printf_common>
 8004284:	3001      	adds	r0, #1
 8004286:	d14c      	bne.n	8004322 <_printf_i+0x1fe>
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	b004      	add	sp, #16
 800428e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004292:	4835      	ldr	r0, [pc, #212]	; (8004368 <_printf_i+0x244>)
 8004294:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	680e      	ldr	r6, [r1, #0]
 800429c:	061f      	lsls	r7, r3, #24
 800429e:	f856 5b04 	ldr.w	r5, [r6], #4
 80042a2:	600e      	str	r6, [r1, #0]
 80042a4:	d514      	bpl.n	80042d0 <_printf_i+0x1ac>
 80042a6:	07d9      	lsls	r1, r3, #31
 80042a8:	bf44      	itt	mi
 80042aa:	f043 0320 	orrmi.w	r3, r3, #32
 80042ae:	6023      	strmi	r3, [r4, #0]
 80042b0:	b91d      	cbnz	r5, 80042ba <_printf_i+0x196>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	f023 0320 	bic.w	r3, r3, #32
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	2310      	movs	r3, #16
 80042bc:	e7b0      	b.n	8004220 <_printf_i+0xfc>
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	f043 0320 	orr.w	r3, r3, #32
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	2378      	movs	r3, #120	; 0x78
 80042c8:	4828      	ldr	r0, [pc, #160]	; (800436c <_printf_i+0x248>)
 80042ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042ce:	e7e3      	b.n	8004298 <_printf_i+0x174>
 80042d0:	065e      	lsls	r6, r3, #25
 80042d2:	bf48      	it	mi
 80042d4:	b2ad      	uxthmi	r5, r5
 80042d6:	e7e6      	b.n	80042a6 <_printf_i+0x182>
 80042d8:	4616      	mov	r6, r2
 80042da:	e7bb      	b.n	8004254 <_printf_i+0x130>
 80042dc:	680b      	ldr	r3, [r1, #0]
 80042de:	6826      	ldr	r6, [r4, #0]
 80042e0:	6960      	ldr	r0, [r4, #20]
 80042e2:	1d1d      	adds	r5, r3, #4
 80042e4:	600d      	str	r5, [r1, #0]
 80042e6:	0635      	lsls	r5, r6, #24
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	d501      	bpl.n	80042f0 <_printf_i+0x1cc>
 80042ec:	6018      	str	r0, [r3, #0]
 80042ee:	e002      	b.n	80042f6 <_printf_i+0x1d2>
 80042f0:	0671      	lsls	r1, r6, #25
 80042f2:	d5fb      	bpl.n	80042ec <_printf_i+0x1c8>
 80042f4:	8018      	strh	r0, [r3, #0]
 80042f6:	2300      	movs	r3, #0
 80042f8:	6123      	str	r3, [r4, #16]
 80042fa:	4616      	mov	r6, r2
 80042fc:	e7ba      	b.n	8004274 <_printf_i+0x150>
 80042fe:	680b      	ldr	r3, [r1, #0]
 8004300:	1d1a      	adds	r2, r3, #4
 8004302:	600a      	str	r2, [r1, #0]
 8004304:	681e      	ldr	r6, [r3, #0]
 8004306:	6862      	ldr	r2, [r4, #4]
 8004308:	2100      	movs	r1, #0
 800430a:	4630      	mov	r0, r6
 800430c:	f7fb ff60 	bl	80001d0 <memchr>
 8004310:	b108      	cbz	r0, 8004316 <_printf_i+0x1f2>
 8004312:	1b80      	subs	r0, r0, r6
 8004314:	6060      	str	r0, [r4, #4]
 8004316:	6863      	ldr	r3, [r4, #4]
 8004318:	6123      	str	r3, [r4, #16]
 800431a:	2300      	movs	r3, #0
 800431c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004320:	e7a8      	b.n	8004274 <_printf_i+0x150>
 8004322:	6923      	ldr	r3, [r4, #16]
 8004324:	4632      	mov	r2, r6
 8004326:	4649      	mov	r1, r9
 8004328:	4640      	mov	r0, r8
 800432a:	47d0      	blx	sl
 800432c:	3001      	adds	r0, #1
 800432e:	d0ab      	beq.n	8004288 <_printf_i+0x164>
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	079b      	lsls	r3, r3, #30
 8004334:	d413      	bmi.n	800435e <_printf_i+0x23a>
 8004336:	68e0      	ldr	r0, [r4, #12]
 8004338:	9b03      	ldr	r3, [sp, #12]
 800433a:	4298      	cmp	r0, r3
 800433c:	bfb8      	it	lt
 800433e:	4618      	movlt	r0, r3
 8004340:	e7a4      	b.n	800428c <_printf_i+0x168>
 8004342:	2301      	movs	r3, #1
 8004344:	4632      	mov	r2, r6
 8004346:	4649      	mov	r1, r9
 8004348:	4640      	mov	r0, r8
 800434a:	47d0      	blx	sl
 800434c:	3001      	adds	r0, #1
 800434e:	d09b      	beq.n	8004288 <_printf_i+0x164>
 8004350:	3501      	adds	r5, #1
 8004352:	68e3      	ldr	r3, [r4, #12]
 8004354:	9903      	ldr	r1, [sp, #12]
 8004356:	1a5b      	subs	r3, r3, r1
 8004358:	42ab      	cmp	r3, r5
 800435a:	dcf2      	bgt.n	8004342 <_printf_i+0x21e>
 800435c:	e7eb      	b.n	8004336 <_printf_i+0x212>
 800435e:	2500      	movs	r5, #0
 8004360:	f104 0619 	add.w	r6, r4, #25
 8004364:	e7f5      	b.n	8004352 <_printf_i+0x22e>
 8004366:	bf00      	nop
 8004368:	08004955 	.word	0x08004955
 800436c:	08004966 	.word	0x08004966

08004370 <_putc_r>:
 8004370:	b570      	push	{r4, r5, r6, lr}
 8004372:	460d      	mov	r5, r1
 8004374:	4614      	mov	r4, r2
 8004376:	4606      	mov	r6, r0
 8004378:	b118      	cbz	r0, 8004382 <_putc_r+0x12>
 800437a:	6983      	ldr	r3, [r0, #24]
 800437c:	b90b      	cbnz	r3, 8004382 <_putc_r+0x12>
 800437e:	f7ff fb5b 	bl	8003a38 <__sinit>
 8004382:	4b1c      	ldr	r3, [pc, #112]	; (80043f4 <_putc_r+0x84>)
 8004384:	429c      	cmp	r4, r3
 8004386:	d124      	bne.n	80043d2 <_putc_r+0x62>
 8004388:	6874      	ldr	r4, [r6, #4]
 800438a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800438c:	07d8      	lsls	r0, r3, #31
 800438e:	d405      	bmi.n	800439c <_putc_r+0x2c>
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	0599      	lsls	r1, r3, #22
 8004394:	d402      	bmi.n	800439c <_putc_r+0x2c>
 8004396:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004398:	f7ff fbec 	bl	8003b74 <__retarget_lock_acquire_recursive>
 800439c:	68a3      	ldr	r3, [r4, #8]
 800439e:	3b01      	subs	r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	60a3      	str	r3, [r4, #8]
 80043a4:	da05      	bge.n	80043b2 <_putc_r+0x42>
 80043a6:	69a2      	ldr	r2, [r4, #24]
 80043a8:	4293      	cmp	r3, r2
 80043aa:	db1c      	blt.n	80043e6 <_putc_r+0x76>
 80043ac:	b2eb      	uxtb	r3, r5
 80043ae:	2b0a      	cmp	r3, #10
 80043b0:	d019      	beq.n	80043e6 <_putc_r+0x76>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	6022      	str	r2, [r4, #0]
 80043b8:	701d      	strb	r5, [r3, #0]
 80043ba:	b2ed      	uxtb	r5, r5
 80043bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043be:	07da      	lsls	r2, r3, #31
 80043c0:	d405      	bmi.n	80043ce <_putc_r+0x5e>
 80043c2:	89a3      	ldrh	r3, [r4, #12]
 80043c4:	059b      	lsls	r3, r3, #22
 80043c6:	d402      	bmi.n	80043ce <_putc_r+0x5e>
 80043c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ca:	f7ff fbd4 	bl	8003b76 <__retarget_lock_release_recursive>
 80043ce:	4628      	mov	r0, r5
 80043d0:	bd70      	pop	{r4, r5, r6, pc}
 80043d2:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <_putc_r+0x88>)
 80043d4:	429c      	cmp	r4, r3
 80043d6:	d101      	bne.n	80043dc <_putc_r+0x6c>
 80043d8:	68b4      	ldr	r4, [r6, #8]
 80043da:	e7d6      	b.n	800438a <_putc_r+0x1a>
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <_putc_r+0x8c>)
 80043de:	429c      	cmp	r4, r3
 80043e0:	bf08      	it	eq
 80043e2:	68f4      	ldreq	r4, [r6, #12]
 80043e4:	e7d1      	b.n	800438a <_putc_r+0x1a>
 80043e6:	4629      	mov	r1, r5
 80043e8:	4622      	mov	r2, r4
 80043ea:	4630      	mov	r0, r6
 80043ec:	f7ff f94a 	bl	8003684 <__swbuf_r>
 80043f0:	4605      	mov	r5, r0
 80043f2:	e7e3      	b.n	80043bc <_putc_r+0x4c>
 80043f4:	08004904 	.word	0x08004904
 80043f8:	08004924 	.word	0x08004924
 80043fc:	080048e4 	.word	0x080048e4

08004400 <_sbrk_r>:
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	4d06      	ldr	r5, [pc, #24]	; (800441c <_sbrk_r+0x1c>)
 8004404:	2300      	movs	r3, #0
 8004406:	4604      	mov	r4, r0
 8004408:	4608      	mov	r0, r1
 800440a:	602b      	str	r3, [r5, #0]
 800440c:	f7fc fb7c 	bl	8000b08 <_sbrk>
 8004410:	1c43      	adds	r3, r0, #1
 8004412:	d102      	bne.n	800441a <_sbrk_r+0x1a>
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	b103      	cbz	r3, 800441a <_sbrk_r+0x1a>
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	bd38      	pop	{r3, r4, r5, pc}
 800441c:	20000918 	.word	0x20000918

08004420 <__sread>:
 8004420:	b510      	push	{r4, lr}
 8004422:	460c      	mov	r4, r1
 8004424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004428:	f000 f8a0 	bl	800456c <_read_r>
 800442c:	2800      	cmp	r0, #0
 800442e:	bfab      	itete	ge
 8004430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004432:	89a3      	ldrhlt	r3, [r4, #12]
 8004434:	181b      	addge	r3, r3, r0
 8004436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800443a:	bfac      	ite	ge
 800443c:	6563      	strge	r3, [r4, #84]	; 0x54
 800443e:	81a3      	strhlt	r3, [r4, #12]
 8004440:	bd10      	pop	{r4, pc}

08004442 <__swrite>:
 8004442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004446:	461f      	mov	r7, r3
 8004448:	898b      	ldrh	r3, [r1, #12]
 800444a:	05db      	lsls	r3, r3, #23
 800444c:	4605      	mov	r5, r0
 800444e:	460c      	mov	r4, r1
 8004450:	4616      	mov	r6, r2
 8004452:	d505      	bpl.n	8004460 <__swrite+0x1e>
 8004454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004458:	2302      	movs	r3, #2
 800445a:	2200      	movs	r2, #0
 800445c:	f000 f868 	bl	8004530 <_lseek_r>
 8004460:	89a3      	ldrh	r3, [r4, #12]
 8004462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800446a:	81a3      	strh	r3, [r4, #12]
 800446c:	4632      	mov	r2, r6
 800446e:	463b      	mov	r3, r7
 8004470:	4628      	mov	r0, r5
 8004472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004476:	f000 b817 	b.w	80044a8 <_write_r>

0800447a <__sseek>:
 800447a:	b510      	push	{r4, lr}
 800447c:	460c      	mov	r4, r1
 800447e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004482:	f000 f855 	bl	8004530 <_lseek_r>
 8004486:	1c43      	adds	r3, r0, #1
 8004488:	89a3      	ldrh	r3, [r4, #12]
 800448a:	bf15      	itete	ne
 800448c:	6560      	strne	r0, [r4, #84]	; 0x54
 800448e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004496:	81a3      	strheq	r3, [r4, #12]
 8004498:	bf18      	it	ne
 800449a:	81a3      	strhne	r3, [r4, #12]
 800449c:	bd10      	pop	{r4, pc}

0800449e <__sclose>:
 800449e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a2:	f000 b813 	b.w	80044cc <_close_r>
	...

080044a8 <_write_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4d07      	ldr	r5, [pc, #28]	; (80044c8 <_write_r+0x20>)
 80044ac:	4604      	mov	r4, r0
 80044ae:	4608      	mov	r0, r1
 80044b0:	4611      	mov	r1, r2
 80044b2:	2200      	movs	r2, #0
 80044b4:	602a      	str	r2, [r5, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f7fc fad5 	bl	8000a66 <_write>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d102      	bne.n	80044c6 <_write_r+0x1e>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	b103      	cbz	r3, 80044c6 <_write_r+0x1e>
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	bd38      	pop	{r3, r4, r5, pc}
 80044c8:	20000918 	.word	0x20000918

080044cc <_close_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	4d06      	ldr	r5, [pc, #24]	; (80044e8 <_close_r+0x1c>)
 80044d0:	2300      	movs	r3, #0
 80044d2:	4604      	mov	r4, r0
 80044d4:	4608      	mov	r0, r1
 80044d6:	602b      	str	r3, [r5, #0]
 80044d8:	f7fc fae1 	bl	8000a9e <_close>
 80044dc:	1c43      	adds	r3, r0, #1
 80044de:	d102      	bne.n	80044e6 <_close_r+0x1a>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	b103      	cbz	r3, 80044e6 <_close_r+0x1a>
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	bd38      	pop	{r3, r4, r5, pc}
 80044e8:	20000918 	.word	0x20000918

080044ec <_fstat_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4d07      	ldr	r5, [pc, #28]	; (800450c <_fstat_r+0x20>)
 80044f0:	2300      	movs	r3, #0
 80044f2:	4604      	mov	r4, r0
 80044f4:	4608      	mov	r0, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	602b      	str	r3, [r5, #0]
 80044fa:	f7fc fadc 	bl	8000ab6 <_fstat>
 80044fe:	1c43      	adds	r3, r0, #1
 8004500:	d102      	bne.n	8004508 <_fstat_r+0x1c>
 8004502:	682b      	ldr	r3, [r5, #0]
 8004504:	b103      	cbz	r3, 8004508 <_fstat_r+0x1c>
 8004506:	6023      	str	r3, [r4, #0]
 8004508:	bd38      	pop	{r3, r4, r5, pc}
 800450a:	bf00      	nop
 800450c:	20000918 	.word	0x20000918

08004510 <_isatty_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	4d06      	ldr	r5, [pc, #24]	; (800452c <_isatty_r+0x1c>)
 8004514:	2300      	movs	r3, #0
 8004516:	4604      	mov	r4, r0
 8004518:	4608      	mov	r0, r1
 800451a:	602b      	str	r3, [r5, #0]
 800451c:	f7fc fadb 	bl	8000ad6 <_isatty>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	d102      	bne.n	800452a <_isatty_r+0x1a>
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	b103      	cbz	r3, 800452a <_isatty_r+0x1a>
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	bd38      	pop	{r3, r4, r5, pc}
 800452c:	20000918 	.word	0x20000918

08004530 <_lseek_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	4d07      	ldr	r5, [pc, #28]	; (8004550 <_lseek_r+0x20>)
 8004534:	4604      	mov	r4, r0
 8004536:	4608      	mov	r0, r1
 8004538:	4611      	mov	r1, r2
 800453a:	2200      	movs	r2, #0
 800453c:	602a      	str	r2, [r5, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	f7fc fad4 	bl	8000aec <_lseek>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d102      	bne.n	800454e <_lseek_r+0x1e>
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	b103      	cbz	r3, 800454e <_lseek_r+0x1e>
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	20000918 	.word	0x20000918

08004554 <__malloc_lock>:
 8004554:	4801      	ldr	r0, [pc, #4]	; (800455c <__malloc_lock+0x8>)
 8004556:	f7ff bb0d 	b.w	8003b74 <__retarget_lock_acquire_recursive>
 800455a:	bf00      	nop
 800455c:	20000910 	.word	0x20000910

08004560 <__malloc_unlock>:
 8004560:	4801      	ldr	r0, [pc, #4]	; (8004568 <__malloc_unlock+0x8>)
 8004562:	f7ff bb08 	b.w	8003b76 <__retarget_lock_release_recursive>
 8004566:	bf00      	nop
 8004568:	20000910 	.word	0x20000910

0800456c <_read_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d07      	ldr	r5, [pc, #28]	; (800458c <_read_r+0x20>)
 8004570:	4604      	mov	r4, r0
 8004572:	4608      	mov	r0, r1
 8004574:	4611      	mov	r1, r2
 8004576:	2200      	movs	r2, #0
 8004578:	602a      	str	r2, [r5, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	f7fc fa56 	bl	8000a2c <_read>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_read_r+0x1e>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b103      	cbz	r3, 800458a <_read_r+0x1e>
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	20000918 	.word	0x20000918

08004590 <_init>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	bf00      	nop
 8004594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004596:	bc08      	pop	{r3}
 8004598:	469e      	mov	lr, r3
 800459a:	4770      	bx	lr

0800459c <_fini>:
 800459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459e:	bf00      	nop
 80045a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a2:	bc08      	pop	{r3}
 80045a4:	469e      	mov	lr, r3
 80045a6:	4770      	bx	lr
